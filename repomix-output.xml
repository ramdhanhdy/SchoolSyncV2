This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: /docs, .trae, node_modules, dist, *.xml
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.npmrc
.repomixignore
app-env.d.ts
app.json
app/_layout.tsx
app/(tabs)/_layout.tsx
app/(tabs)/index.tsx
app/(tabs)/two.tsx
app/+html.tsx
app/+not-found.tsx
app/auth/_layout.tsx
app/auth/index.tsx
app/auth/onboarding/index.tsx
app/dashboard.tsx
app/index.tsx
app/modal.tsx
babel.config.js
cesconfig.json
components/auth/ForgotPasswordScreen.tsx
components/auth/LoginScreen.tsx
components/auth/SignUpScreen.tsx
components/Button.tsx
components/Container.tsx
components/EditScreenInfo.tsx
components/HeaderButton.tsx
components/onboarding/BasicInfoStep.tsx
components/onboarding/PlanSelectionStep.tsx
components/onboarding/SchoolInfoStep.tsx
components/onboarding/TeacherInviteStep.tsx
components/onboarding/WelcomeStep.tsx
components/ScreenContent.tsx
components/TabBarIcon.tsx
components/ui/button/index.tsx
components/ui/card/index.tsx
components/ui/card/index.web.tsx
components/ui/card/styles.tsx
components/ui/design-system/authStyles.ts
components/ui/design-system/index.ts
components/ui/gluestack-ui-provider/config.ts
components/ui/gluestack-ui-provider/index.tsx
components/ui/gluestack-ui-provider/index.web.tsx
components/ui/gluestack-ui-provider/script.ts
components/ui/input/index.tsx
components/ui/ModernBackground.tsx
database/schema.sql
docs/GUIDELINE.md
docs/implementation-plan/auth-ui-analysis.md
docs/implementation-plan/auth-ui-coherence.md
docs/implementation-plan/fix-profile-load-error-pgrst116.md
docs/implementation-plan/full-schema-draft.md
docs/implementation-plan/login-screend-draft.md
docs/implementation-plan/remove-drawer-navigation.md
docs/implementation-plan/supabase-auth-database.md
docs/LESSONS_LEARNED.md
docs/prd_management_role
docs/prd_management_role.md
docs/scratchpad.md
docs/TODO.md
docs/WORK_SUMMARY.md
eslint.config.js
global.css
gluestack-ui.config.json
metro.config.js
nativewind-env.d.ts
package.json
prettier.config.js
README.md
repomix.config.json
store/authStore.ts
store/store.ts
tailwind.config.js
test-registration.js
tsconfig.json
utils/supabase.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomixignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
</file>


<file path="app.json">
{
  "expo": {
    "name": "SchoolSyncV2",
    "slug": "SchoolSyncV2",
    "version": "1.0.0",

    "scheme": "SchoolSyncV2",
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/favicon.png"
    },
    "plugins": ["expo-router"],
    "experiments": {
      "typedRoutes": true,

      "tsconfigPaths": true
    },

    "orientation": "portrait",
    "icon": "./assets/icon.png",

    "userInterfaceStyle": "light",

    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "assetBundlePatterns": ["**/*"],
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    }
  }
}
</file>

<file path="app/(tabs)/_layout.tsx">
import { Tabs } from 'expo-router';
import { TabBarIcon } from '~/components/TabBarIcon';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        headerShown: false,
        tabBarActiveTintColor: 'black',
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Tab One',
          tabBarIcon: ({ color }) => <TabBarIcon name="code" color={color} />,
        }}
      />
      <Tabs.Screen
        name="two"
        options={{
          title: 'Tab Two',
          tabBarIcon: ({ color }) => <TabBarIcon name="code" color={color} />,
        }}
      />
    </Tabs>
  );
}
</file>

<file path="app/(tabs)/index.tsx">
import { Stack } from 'expo-router';

import { Container } from '~/components/Container';
import { ScreenContent } from '~/components/ScreenContent';

export default function Home() {
  return (
    <>
      <Stack.Screen options={{ title: 'Tab One' }} />
      <Container>
        <ScreenContent path="app/(tabs)/index.tsx" title="Tab One" />
      </Container>
    </>
  );
}
</file>

<file path="app/(tabs)/two.tsx">
import { Stack } from 'expo-router';

import { Container } from '~/components/Container';
import { ScreenContent } from '~/components/ScreenContent';

export default function Home() {
  return (
    <>
      <Stack.Screen options={{ title: 'Tab Two' }} />
      <Container>
        <ScreenContent path="app/(tabs)/two.tsx" title="Tab Two" />
      </Container>
    </>
  );
}
</file>

<file path="app/+html.tsx">
import { ScrollViewStyleReset } from 'expo-router/html';

// This file is web-only and used to configure the root HTML for every
// web page during static rendering.
// The contents of this function only run in Node.js environments and
// do not have access to the DOM or browser APIs.
export default function Root({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />

        {/*
          This viewport disables scaling which makes the mobile website act more like a native app.
          However this does reduce built-in accessibility. If you want to enable scaling, use this instead:
            <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
        */}
        <meta
          name="viewport"
          content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1.00001,viewport-fit=cover"
        />
        {/*
          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.
          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.
        */}
        <ScrollViewStyleReset />

        {/* Using raw CSS styles as an escape-hatch to ensure the background color never flickers in dark-mode. */}
        <style dangerouslySetInnerHTML={{ __html: responsiveBackground }} />
        {/* Add any additional <head> elements that you want globally available on web... */}
      </head>
      <body>{children}</body>
    </html>
  );
}

const responsiveBackground = `
body {
  background-color: #fff;
}
@media (prefers-color-scheme: dark) {
  body {
    background-color: #000;
  }
}`;
</file>

<file path="app/+not-found.tsx">
import { Link, Stack } from 'expo-router';

import { Text } from 'react-native';

import { Container } from '~/components/Container';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <Container>
        <Text className={styles.title}>{"This screen doesn't exist."}</Text>
        <Link href="/" className={styles.link}>
          <Text className={styles.linkText}>Go to home screen!</Text>
        </Link>
      </Container>
    </>
  );
}

const styles = {
  title: `text-xl font-bold`,
  link: `mt-4 pt-4`,
  linkText: `text-base text-[#2e78b7]`,
};
</file>

<file path="app/auth/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function AuthLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="index" />
      <Stack.Screen name="onboarding/index" />
    </Stack>
  );
}
</file>

<file path="app/dashboard.tsx">
import { Stack, useRouter } from 'expo-router';
import { View, ScrollView, Text, Pressable } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Card } from '~/components/ui/card';
import { Button, ButtonText } from '~/components/ui/button';

export default function Dashboard() {
  const router = useRouter();

  const navigationCards = [
    {
      title: 'Kelola Data Santri',
      description: 'Tambah, edit, dan kelola data santri',
      icon: '👥',
      onPress: () => {
        // TODO: Navigate to santri management
        console.log('Navigate to santri management');
      },
    },
    {
      title: 'Jadwal Pelajaran',
      description: 'Lihat dan kelola jadwal pelajaran',
      icon: '📅',
      onPress: () => {
        // TODO: Navigate to schedule management
        console.log('Navigate to schedule management');
      },
    },
    {
      title: 'Laporan Keuangan',
      description: 'Kelola keuangan dan laporan',
      icon: '💰',
      onPress: () => {
        // TODO: Navigate to financial reports
        console.log('Navigate to financial reports');
      },
    },
    {
      title: 'Tab Sections',
      description: 'Akses fitur tab navigation',
      icon: '📱',
      onPress: () => {
        router.push('/(tabs)');
      },
    },
  ];

  return (
    <>
      <Stack.Screen options={{ title: 'Dashboard' }} />
      <SafeAreaView className="flex-1 bg-background">
        <ScrollView className="flex-1 p-4">
          {/* Welcome Header */}
          <View className="mb-6">
            <Text className="text-2xl font-bold text-typography-900 mb-2">
              Dashboard SchoolSync
            </Text>
            <Text className="text-base text-typography-600">
              Selamat datang di sistem manajemen pesantren
            </Text>
          </View>

          {/* Quick Stats Cards */}
          <View className="mb-6">
            <Text className="text-lg font-semibold text-typography-900 mb-3">
              Statistik Cepat
            </Text>
            <View className="flex-row flex-wrap gap-3">
              <Card className="flex-1 min-w-[150px] p-4">
                <Text className="text-2xl font-bold text-primary-600 mb-1">
                  150
                </Text>
                <Text className="text-sm text-typography-600">
                  Total Santri
                </Text>
              </Card>
              <Card className="flex-1 min-w-[150px] p-4">
                <Text className="text-2xl font-bold text-success-600 mb-1">
                  25
                </Text>
                <Text className="text-sm text-typography-600">
                  Ustadz/Ustadzah
                </Text>
              </Card>
            </View>
          </View>

          {/* Navigation Menu Cards */}
          <View className="mb-6">
            <Text className="text-lg font-semibold text-typography-900 mb-3">
              Menu Navigasi
            </Text>
            <View className="gap-3">
              {navigationCards.map((card, index) => (
                <Pressable key={index} onPress={card.onPress}>
                  <Card className="p-4 border border-outline-200 active:bg-background-50">
                    <View className="flex-row items-center">
                      <Text className="text-2xl mr-3">{card.icon}</Text>
                      <View className="flex-1">
                        <Text className="text-base font-semibold text-typography-900 mb-1">
                          {card.title}
                        </Text>
                        <Text className="text-sm text-typography-600">
                          {card.description}
                        </Text>
                      </View>
                      <Text className="text-typography-400 text-lg">›</Text>
                    </View>
                  </Card>
                </Pressable>
              ))}
            </View>
          </View>

          {/* Recent Activity */}
          <View>
            <Text className="text-lg font-semibold text-typography-900 mb-3">
              Aktivitas Terbaru
            </Text>
            <Card className="p-4">
              <Text className="text-sm text-typography-600 mb-2">
                Belum ada aktivitas terbaru
              </Text>
              <Text className="text-xs text-typography-500">
                Aktivitas akan muncul di sini setelah Anda mulai menggunakan sistem
              </Text>
            </Card>
          </View>
        </ScrollView>
      </SafeAreaView>
    </>
  );
}
</file>

<file path="app/index.tsx">
import { Redirect } from 'expo-router';

// Redirect to auth flow as the initial route
export default function Index() {
  return <Redirect href="/auth" />;
}
</file>

<file path="app/modal.tsx">
import { StatusBar } from 'expo-status-bar';
import { Platform } from 'react-native';

import { ScreenContent } from '~/components/ScreenContent';

export default function Modal() {
  return (
    <>
      <ScreenContent path="app/modal.tsx" title="Modal"></ScreenContent>
      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />
    </>
  );
}
</file>

<file path="babel.config.js">
module.exports = function (api) {
  api.cache(true);
  let plugins = [];

  plugins.push('react-native-reanimated/plugin');

  return {
    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }], 'nativewind/babel'],

    plugins,
  };
};
</file>

<file path="cesconfig.json">
{
  "cesVersion": "2.18.3",
  "projectName": "SchoolSyncV2",
  "packages": [
    {
      "name": "expo-router",
      "type": "navigation",
      "options": {
        "type": "drawer + tabs"
      }
    },
    {
      "name": "nativewind",
      "type": "styling"
    },
    {
      "name": "zustand",
      "type": "state-management"
    },
    {
      "name": "supabase",
      "type": "authentication"
    }
  ],
  "flags": {
    "noGit": false,
    "noInstall": false,
    "overwrite": false,
    "importAlias": true,
    "packageManager": "npm",
    "eas": false,
    "publish": false
  },
  "packageManager": {
    "type": "npm",
    "version": "10.9.0"
  },
  "os": {
    "type": "Windows_NT",
    "platform": "win32",
    "arch": "x64",
    "kernelVersion": "10.0.26100"
  }
}
</file>

<file path="components/auth/ForgotPasswordScreen.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuthStore } from '../../store/authStore';

interface ForgotPasswordScreenProps {
  onNavigateToLogin?: () => void;
}

export default function ForgotPasswordScreen({ onNavigateToLogin }: ForgotPasswordScreenProps) {
  const [email, setEmail] = useState('');
  const [isEmailSent, setIsEmailSent] = useState(false);
  
  const { resetPassword, loading, error, clearError } = useAuthStore();

  const handleResetPassword = async () => {
    if (!email.trim() || !validateEmail(email)) {
      Alert.alert('Error', 'Mohon isi email yang valid');
      return;
    }

    const result = await resetPassword(email.trim().toLowerCase());
    
    if (result.success) {
      setIsEmailSent(true);
      Alert.alert(
        'Email Terkirim',
        'Kami telah mengirimkan link reset password ke email Anda. Silakan cek inbox dan folder spam.',
        [
          {
            text: 'OK',
            onPress: () => {},
          },
        ]
      );
    } else {
      Alert.alert('Gagal', result.error || 'Terjadi kesalahan saat mengirim email reset password');
    }
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const isFormValid = email.trim() && validateEmail(email);

  React.useEffect(() => {
    if (error) {
      Alert.alert('Error', error);
      clearError();
    }
  }, [error, clearError]);

  if (isEmailSent) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.successContainer}>
          <View style={styles.successIcon}>
            <Text style={styles.successIconText}>📧</Text>
          </View>
          
          <Text style={styles.successTitle}>Email Terkirim!</Text>
          
          <Text style={styles.successMessage}>
            Kami telah mengirimkan link reset password ke:
          </Text>
          
          <Text style={styles.emailText}>{email}</Text>
          
          <Text style={styles.instructionText}>
            Silakan cek inbox email Anda dan ikuti instruksi untuk mereset password. 
            Jika tidak menemukan email, cek juga folder spam.
          </Text>
          
          <View style={styles.actionButtons}>
            <TouchableOpacity
              style={styles.resendButton}
              onPress={() => {
                setIsEmailSent(false);
                handleResetPassword();
              }}
              disabled={loading}
            >
              {loading ? (
                <ActivityIndicator color="#3b82f6" size="small" />
              ) : (
                <Text style={styles.resendButtonText}>Kirim Ulang</Text>
              )}
            </TouchableOpacity>
            
            <TouchableOpacity
              style={styles.backButton}
              onPress={onNavigateToLogin}
            >
              <Text style={styles.backButtonText}>Kembali ke Login</Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView 
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
        >
          {/* Header */}
          <View style={styles.header}>
            <View style={styles.iconContainer}>
              <Text style={styles.iconText}>🔒</Text>
            </View>
            
            <Text style={styles.title}>Lupa Password?</Text>
            <Text style={styles.subtitle}>
              Masukkan email Anda dan kami akan mengirimkan link untuk mereset password
            </Text>
          </View>

          {/* Form */}
          <View style={styles.form}>
            {/* Email Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.label}>Email</Text>
              <TextInput
                style={[
                  styles.input,
                  email && !validateEmail(email) && styles.inputError
                ]}
                placeholder="Masukkan email Anda"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
                autoCapitalize="none"
                autoCorrect={false}
                editable={!loading}
                autoFocus
              />
              {email && !validateEmail(email) && (
                <Text style={styles.errorText}>Format email tidak valid</Text>
              )}
            </View>

            {/* Reset Button */}
            <TouchableOpacity
              style={[
                styles.resetButton,
                (!isFormValid || loading) && styles.resetButtonDisabled
              ]}
              onPress={handleResetPassword}
              disabled={!isFormValid || loading}
            >
              {loading ? (
                <ActivityIndicator color="white" size="small" />
              ) : (
                <Text style={styles.resetButtonText}>Kirim Link Reset</Text>
              )}
            </TouchableOpacity>

            {/* Back to Login */}
            <TouchableOpacity
              style={styles.loginButton}
              onPress={onNavigateToLogin}
              disabled={loading}
            >
              <Text style={styles.loginButtonText}>← Kembali ke Login</Text>
            </TouchableOpacity>
          </View>

          {/* Info */}
          <View style={styles.infoContainer}>
            <Text style={styles.infoTitle}>Tidak menerima email?</Text>
            <Text style={styles.infoText}>
              • Cek folder spam atau junk mail{"\n"}
              • Pastikan email yang dimasukkan benar{"\n"}
              • Tunggu beberapa menit, email mungkin tertunda
            </Text>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  keyboardView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
  },
  iconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#dbeafe',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 24,
  },
  iconText: {
    fontSize: 32,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    textAlign: 'center',
    lineHeight: 24,
  },
  form: {
    flex: 1,
  },
  inputContainer: {
    marginBottom: 32,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    backgroundColor: 'white',
    color: '#1f2937',
  },
  inputError: {
    borderColor: '#ef4444',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 14,
    marginTop: 4,
  },
  resetButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 24,
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  resetButtonDisabled: {
    backgroundColor: '#9ca3af',
    shadowOpacity: 0,
    elevation: 0,
  },
  resetButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  loginButton: {
    alignItems: 'center',
    paddingVertical: 12,
  },
  loginButtonText: {
    color: '#3b82f6',
    fontSize: 16,
    fontWeight: '500',
  },
  infoContainer: {
    marginTop: 40,
    padding: 20,
    backgroundColor: '#f1f5f9',
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#3b82f6',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
  },
  // Success screen styles
  successContainer: {
    flex: 1,
    paddingHorizontal: 24,
    paddingVertical: 32,
    alignItems: 'center',
    justifyContent: 'center',
  },
  successIcon: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#dcfce7',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 32,
  },
  successIconText: {
    fontSize: 40,
  },
  successTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 16,
    textAlign: 'center',
  },
  successMessage: {
    fontSize: 16,
    color: '#64748b',
    textAlign: 'center',
    marginBottom: 8,
  },
  emailText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3b82f6',
    textAlign: 'center',
    marginBottom: 24,
  },
  instructionText: {
    fontSize: 14,
    color: '#64748b',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 40,
  },
  actionButtons: {
    width: '100%',
    gap: 16,
  },
  resendButton: {
    backgroundColor: 'white',
    borderWidth: 1,
    borderColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  resendButtonText: {
    color: '#3b82f6',
    fontSize: 16,
    fontWeight: '600',
  },
  backButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="components/Button.tsx">
import { forwardRef } from 'react';
import { Text, TouchableOpacity, TouchableOpacityProps, View } from 'react-native';

type ButtonProps = {
  title: string;
} & TouchableOpacityProps;

export const Button = forwardRef<View, ButtonProps>(({ title, ...touchableProps }, ref) => {
  return (
    <TouchableOpacity
      ref={ref}
      {...touchableProps}
      className={`${styles.button} ${touchableProps.className}`}>
      <Text className={styles.buttonText}>{title}</Text>
    </TouchableOpacity>
  );
});

Button.displayName = 'Button';

const styles = {
  button: 'items-center bg-indigo-500 rounded-[28px] shadow-md p-4',
  buttonText: 'text-white text-lg font-semibold text-center',
};
</file>

<file path="components/Container.tsx">
import { SafeAreaView } from 'react-native';

export const Container = ({ children }: { children: React.ReactNode }) => {
  return <SafeAreaView className={styles.container}>{children}</SafeAreaView>;
};

const styles = {
  container: 'flex flex-1 m-6',
};
</file>

<file path="components/EditScreenInfo.tsx">
import { Text, View } from 'react-native';

export const EditScreenInfo = ({ path }: { path: string }) => {
  const title = 'Open up the code for this screen:';
  const description =
    'Change any of the text, save the file, and your app will automatically update.';

  return (
    <View>
      <View className={styles.getStartedContainer}>
        <Text className={styles.getStartedText}>{title}</Text>
        <View className={styles.codeHighlightContainer + styles.homeScreenFilename}>
          <Text>{path}</Text>
        </View>
        <Text className={styles.getStartedText}>{description}</Text>
      </View>
    </View>
  );
};

const styles = {
  codeHighlightContainer: `rounded-md px-1`,
  getStartedContainer: `items-center mx-12`,
  getStartedText: `text-lg leading-6 text-center`,
  helpContainer: `items-center mx-5 mt-4`,
  helpLink: `py-4`,
  helpLinkText: `text-center`,
  homeScreenFilename: `my-2`,
};
</file>

<file path="components/HeaderButton.tsx">
import { forwardRef } from 'react';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { Pressable, StyleSheet } from 'react-native';

export const HeaderButton = forwardRef<typeof Pressable, { onPress?: () => void }>(
  ({ onPress }, ref) => {
    return (
      <Pressable onPress={onPress}>
        {({ pressed }) => (
          <FontAwesome
            name="info-circle"
            size={25}
            color="gray"
            style={[
              styles.headerRight,
              {
                opacity: pressed ? 0.5 : 1,
              },
            ]}
          />
        )}
      </Pressable>
    );
  }
);

HeaderButton.displayName = 'HeaderButton';

export const styles = StyleSheet.create({
  headerRight: {
    marginRight: 15,
  },
});
</file>

<file path="components/onboarding/PlanSelectionStep.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import { OnboardingData } from '../../app/auth/onboarding';
import { Card } from '~/components/ui/card';
import { Button, ButtonText } from '~/components/ui/button';
import ModernBackground from '../ui/ModernBackground';
import { Ionicons } from '@expo/vector-icons';

interface PlanSelectionStepProps {
  data: OnboardingData;
  onUpdate: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
  onBack: () => void;
}

interface PlanFeature {
  text: string;
  included: boolean;
}

interface Plan {
  id: 'starter' | 'professional' | 'enterprise';
  name: string;
  price: string;
  period: string;
  description: string;
  features: PlanFeature[];
  popular?: boolean;
  trialDays?: number;
}

const PLANS: Plan[] = [
  {
    id: 'starter',
    name: 'Starter',
    price: 'Gratis',
    period: '30 hari',
    description: 'Cocok untuk pesantren kecil yang baru memulai digitalisasi',
    trialDays: 30,
    features: [
      { text: 'Hingga 50 santri', included: true },
      { text: 'Hingga 5 guru', included: true },
      { text: 'Manajemen absensi dasar', included: true },
      { text: 'Laporan bulanan', included: true },
      { text: 'Support email', included: true },
      { text: 'Manajemen nilai', included: false },
      { text: 'Komunikasi orang tua', included: false },
      { text: 'Laporan real-time', included: false },
      { text: 'API akses', included: false },
    ],
  },
  {
    id: 'professional',
    name: 'Professional',
    price: 'Rp 299.000',
    period: '/bulan',
    description: 'Solusi lengkap untuk pesantren menengah',
    popular: true,
    features: [
      { text: 'Hingga 500 santri', included: true },
      { text: 'Guru tidak terbatas', included: true },
      { text: 'Manajemen absensi lengkap', included: true },
      { text: 'Manajemen nilai', included: true },
      { text: 'Komunikasi orang tua', included: true },
      { text: 'Laporan real-time', included: true },
      { text: 'Support prioritas', included: true },
      { text: 'Backup otomatis', included: true },
      { text: 'API akses', included: false },
    ],
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    price: 'Rp 799.000',
    period: '/bulan',
    description: 'Untuk pesantren besar dengan kebutuhan khusus',
    features: [
      { text: 'Santri tidak terbatas', included: true },
      { text: 'Guru tidak terbatas', included: true },
      { text: 'Semua fitur Professional', included: true },
      { text: 'API akses penuh', included: true },
      { text: 'Integrasi custom', included: true },
      { text: 'Dedicated support', included: true },
      { text: 'Training tim', included: true },
      { text: 'Multi-campus', included: true },
      { text: 'White-label option', included: true },
    ],
  },
];

export default function PlanSelectionStep({ data, onUpdate, onNext, onBack }: PlanSelectionStepProps) {
  const [selectedPlan, setSelectedPlan] = useState<'starter' | 'professional' | 'enterprise' | ''>(data.selectedPlan || '');

  const handlePlanSelect = (planId: 'starter' | 'professional' | 'enterprise') => {
    setSelectedPlan(planId);
    onUpdate({ selectedPlan: planId });
  };

  const handleNext = () => {
    if (!selectedPlan) {
      Alert.alert('Error', 'Mohon pilih paket berlangganan');
      return;
    }

    onNext();
  };

  const getRecommendedPlan = () => {
    const studentCount = data.studentCount || 0;
    if (studentCount <= 50) return 'starter';
    if (studentCount <= 500) return 'professional';
    return 'enterprise';
  };

  const recommendedPlan = getRecommendedPlan();

  return (
    <ModernBackground>
      <ScrollView className="flex-1" showsVerticalScrollIndicator={false}>
        <View className="px-6 py-8">
          {/* Header */}
          <View className="items-center mb-8">
            <View className="w-16 h-16 bg-primary-100 rounded-full items-center justify-center mb-4">
              <Ionicons name="diamond" size={32} color="#667eea" />
            </View>
            <Text className="text-2xl font-bold text-gray-800 text-center mb-2">
              Pilih Paket Berlangganan
            </Text>
            <Text className="text-base text-gray-600 text-center leading-6">
              Pilih paket yang sesuai dengan kebutuhan pesantren Anda
            </Text>
          </View>

           {/* Recommendation */}
           <Card variant="glassmorphism" size="md" className="mb-6 border-l-4 border-l-amber-500">
             <View className="p-4">
               <View className="flex-row items-center mb-2">
                 <Ionicons name="bulb" size={16} color="#f59e0b" />
                 <Text className="text-sm font-semibold text-amber-700 ml-2">
                   Rekomendasi untuk Anda
                 </Text>
               </View>
               <Text className="text-sm text-amber-700 leading-5">
                 Berdasarkan {data.studentCount} santri, kami merekomendasikan paket{' '}
                 <Text className="font-semibold">
                   {PLANS.find(p => p.id === recommendedPlan)?.name}
                 </Text>
               </Text>
             </View>
           </Card>

           {/* Plans */}
           <View className="space-y-4 mb-6">
             {PLANS.map((plan) => (
               <TouchableOpacity
                 key={plan.id}
                 onPress={() => handlePlanSelect(plan.id)}
                 activeOpacity={0.8}
               >
                 <Card 
                   variant="glassmorphism" 
                   size="lg" 
                   className={`relative ${
                     selectedPlan === plan.id 
                       ? 'border-2 border-primary-500' 
                       : 'border border-white/20'
                   } ${
                     plan.popular ? 'border-emerald-500' : ''
                   }`}
                 >
                   <View className="p-5">
                     {/* Popular Badge */}
                     {plan.popular && (
                       <View className="absolute -top-3 left-4 bg-emerald-500 px-3 py-1 rounded-full">
                         <Text className="text-xs font-bold text-white">
                           PALING POPULER
                         </Text>
                       </View>
                     )}

                     {/* Recommended Badge */}
                     {plan.id === recommendedPlan && !plan.popular && (
                       <View className="absolute -top-3 left-4 bg-amber-500 px-3 py-1 rounded-full">
                         <Text className="text-xs font-bold text-white">
                           DIREKOMENDASIKAN
                         </Text>
                       </View>
                     )}

                     {/* Plan Header */}
                     <View className="mb-4">
                       <Text className="text-xl font-bold text-gray-800 mb-2">
                         {plan.name}
                       </Text>
                       <View className="flex-row items-baseline mb-2">
                         <Text className="text-2xl font-bold text-primary-600">
                           {plan.price}
                         </Text>
                         <Text className="text-sm text-gray-600 ml-1">
                           {plan.period}
                         </Text>
                       </View>
                       <Text className="text-sm text-gray-600 leading-5">
                         {plan.description}
                       </Text>
                     </View>

                     {/* Trial Info */}
                     {plan.trialDays && (
                       <View className="bg-emerald-50 px-3 py-2 rounded-lg mb-4">
                         <View className="flex-row items-center">
                           <Ionicons name="gift" size={16} color="#10b981" />
                           <Text className="text-sm font-medium text-emerald-700 ml-2">
                             Gratis {plan.trialDays} hari
                           </Text>
                         </View>
                       </View>
                     )}

                     {/* Features */}
                     <View className="space-y-3 mb-4">
                       {plan.features.map((feature, index) => (
                         <View key={index} className="flex-row items-center">
                           <View className={`w-5 h-5 rounded-full items-center justify-center mr-3 ${
                             feature.included ? 'bg-emerald-100' : 'bg-gray-100'
                           }`}>
                             <Ionicons 
                               name={feature.included ? 'checkmark' : 'close'} 
                               size={12} 
                               color={feature.included ? '#10b981' : '#6b7280'} 
                             />
                           </View>
                           <Text className={`text-sm flex-1 ${
                             feature.included ? 'text-gray-700' : 'text-gray-400'
                           }`}>
                             {feature.text}
                           </Text>
                         </View>
                       ))}
                     </View>

                     {/* Selection Indicator */}
                     {selectedPlan === plan.id && (
                       <View className="bg-primary-100 px-3 py-2 rounded-lg">
                         <View className="flex-row items-center justify-center">
                           <Ionicons name="checkmark-circle" size={16} color="#667eea" />
                           <Text className="text-sm font-medium text-primary-700 ml-2">
                             Dipilih
                           </Text>
                         </View>
                       </View>
                     )}
                   </View>
                 </Card>
               </TouchableOpacity>
          ))}
        </View>

           {/* Info Box */}
           <Card variant="glassmorphism" size="md" className="mb-8">
             <View className="p-4">
               <View className="flex-row items-center mb-3">
                 <Ionicons name="information-circle" size={20} color="#667eea" />
                 <Text className="text-base font-semibold text-gray-800 ml-2">
                   Informasi Penting
                 </Text>
               </View>
               <View className="space-y-2">
                 <View className="flex-row items-start">
                   <Text className="text-primary-600 mr-2">•</Text>
                   <Text className="text-sm text-gray-700 flex-1">
                     Anda dapat mengubah paket kapan saja
                   </Text>
                 </View>
                 <View className="flex-row items-start">
                   <Text className="text-primary-600 mr-2">•</Text>
                   <Text className="text-sm text-gray-700 flex-1">
                     Semua paket termasuk backup data otomatis
                   </Text>
                 </View>
                 <View className="flex-row items-start">
                   <Text className="text-primary-600 mr-2">•</Text>
                   <Text className="text-sm text-gray-700 flex-1">
                     Tidak ada biaya setup atau instalasi
                   </Text>
                 </View>
                 <View className="flex-row items-start">
                   <Text className="text-primary-600 mr-2">•</Text>
                   <Text className="text-sm text-gray-700 flex-1">
                     Pembayaran dapat dilakukan bulanan atau tahunan
                   </Text>
                 </View>
               </View>
             </View>
           </Card>

           {/* Navigation Buttons */}
           <View className="flex-row space-x-4">
             <Button
               variant="outline"
               size="lg"
               className="flex-1"
               onPress={onBack}
             >
               <ButtonText className="text-gray-700">
                 Kembali
               </ButtonText>
             </Button>
             
             <Button
               variant="solid"
               size="lg"
               className="flex-1"
               onPress={handleNext}
               isDisabled={!selectedPlan}
             >
               <ButtonText className="text-white font-semibold">
                 Lanjutkan
               </ButtonText>
             </Button>
           </View>
         </View>
       </ScrollView>
     </ModernBackground>
   );
}
</file>

<file path="components/onboarding/TeacherInviteStep.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  FlatList,
} from 'react-native';
import { OnboardingData } from '../../app/auth/onboarding';

interface TeacherInviteStepProps {
  data: OnboardingData;
  onUpdate: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
  onBack: () => void;
}

interface TeacherInvite {
  id: string;
  name: string;
  email: string;
  subject?: string;
}

const COMMON_SUBJECTS = [
  'Bahasa Arab',
  'Al-Quran',
  'Hadits',
  'Fiqh',
  'Aqidah',
  'Akhlaq',
  'Sejarah Islam',
  'Bahasa Indonesia',
  'Matematika',
  'IPA',
  'IPS',
  'Bahasa Inggris',
  'Olahraga',
  'Seni',
  'Lainnya',
];

const generateId = () => {
  return Date.now().toString() + Math.random().toString(36).substr(2, 9);
};

export default function TeacherInviteStep({ data, onUpdate, onNext, onBack }: TeacherInviteStepProps) {
  const [teachers, setTeachers] = useState<TeacherInvite[]>(
    data.teacherInvites?.map(invite => ({
      id: generateId(),
      name: invite.name,
      email: invite.email,
      subject: invite.subject
    })) || []
  );
  const [newTeacher, setNewTeacher] = useState({ name: '', email: '', subject: '' });
  const [showSubjectDropdown, setShowSubjectDropdown] = useState(false);
  const [editingTeacher, setEditingTeacher] = useState<string | null>(null);

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const addTeacher = () => {
    if (!newTeacher.name.trim()) {
      Alert.alert('Error', 'Mohon isi nama guru');
      return;
    }

    if (!newTeacher.email.trim() || !validateEmail(newTeacher.email)) {
      Alert.alert('Error', 'Mohon isi email yang valid');
      return;
    }

    // Check for duplicate email
    if (teachers.some(t => t.email.toLowerCase() === newTeacher.email.toLowerCase())) {
      Alert.alert('Error', 'Email sudah digunakan');
      return;
    }

    const teacher: TeacherInvite = {
      id: generateId(),
      name: newTeacher.name.trim(),
      email: newTeacher.email.trim().toLowerCase(),
      subject: newTeacher.subject.trim() || undefined,
    };

    const updatedTeachers = [...teachers, teacher];
    setTeachers(updatedTeachers);
    onUpdate({ teacherInvites: updatedTeachers });
    setNewTeacher({ name: '', email: '', subject: '' });
  };

  const removeTeacher = (id: string) => {
    Alert.alert(
      'Hapus Guru',
      'Apakah Anda yakin ingin menghapus guru ini?',
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Hapus',
          style: 'destructive',
          onPress: () => {
            const updatedTeachers = teachers.filter(t => t.id !== id);
            setTeachers(updatedTeachers);
            onUpdate({ teacherInvites: updatedTeachers });
          },
        },
      ]
    );
  };



  const handleSubjectSelect = (subject: string) => {
    setNewTeacher({ ...newTeacher, subject });
    setShowSubjectDropdown(false);
  };

  const handleNext = () => {
    // Teachers are optional, so we can proceed even with empty list
    onNext();
  };

  const renderTeacherItem = ({ item }: { item: TeacherInvite }) => (
    <View style={styles.teacherCard}>
      <View style={styles.teacherInfo}>
        <Text style={styles.teacherName}>{item.name}</Text>
        <Text style={styles.teacherEmail}>{item.email}</Text>
        {item.subject && (
          <Text style={styles.teacherSubject}>📚 {item.subject}</Text>
        )}
      </View>
      <View style={styles.teacherActions}>
        <TouchableOpacity
          style={styles.editButton}
          onPress={() => setEditingTeacher(editingTeacher === item.id ? null : item.id)}
        >
          <Text style={styles.editButtonText}>✏️</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.deleteButton}
          onPress={() => removeTeacher(item.id)}
        >
          <Text style={styles.deleteButtonText}>🗑️</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <ScrollView style={styles.container} keyboardShouldPersistTaps="handled">
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>Undang Guru</Text>
          <Text style={styles.subtitle}>
            Undang guru-guru untuk bergabung dengan SchoolSync (opsional)
          </Text>
        </View>

        {/* Add Teacher Form */}
        <View style={styles.addTeacherSection}>
          <Text style={styles.sectionTitle}>Tambah Guru Baru</Text>
          
          {/* Name Input */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Nama Guru</Text>
            <TextInput
              style={styles.input}
              placeholder="Contoh: Ustadz Ahmad"
              value={newTeacher.name}
              onChangeText={(value) => setNewTeacher({ ...newTeacher, name: value })}
              autoCapitalize="words"
              autoCorrect={false}
            />
          </View>

          {/* Email Input */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Email</Text>
            <TextInput
              style={[
                styles.input,
                newTeacher.email && !validateEmail(newTeacher.email) && styles.inputError
              ]}
              placeholder="contoh@email.com"
              value={newTeacher.email}
              onChangeText={(value) => setNewTeacher({ ...newTeacher, email: value })}
              keyboardType="email-address"
              autoCapitalize="none"
              autoCorrect={false}
            />
            {newTeacher.email && !validateEmail(newTeacher.email) && (
              <Text style={styles.errorText}>Format email tidak valid</Text>
            )}
          </View>

          {/* Subject Input */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Mata Pelajaran (Opsional)</Text>
            
            <TouchableOpacity
              style={styles.dropdownButton}
              onPress={() => setShowSubjectDropdown(!showSubjectDropdown)}
            >
              <Text style={[
                styles.dropdownButtonText,
                !newTeacher.subject && styles.placeholderText
              ]}>
                {newTeacher.subject || 'Pilih mata pelajaran'}
              </Text>
              <Text style={styles.dropdownArrow}>
                {showSubjectDropdown ? '▲' : '▼'}
              </Text>
            </TouchableOpacity>

            {showSubjectDropdown && (
              <View style={styles.dropdown}>
                {COMMON_SUBJECTS.map((subject, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.dropdownOption}
                    onPress={() => handleSubjectSelect(subject)}
                  >
                    <Text style={styles.dropdownOptionText}>{subject}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            )}
          </View>

          {/* Add Button */}
          <TouchableOpacity
            style={[
              styles.addButton,
              (!newTeacher.name.trim() || !validateEmail(newTeacher.email)) && styles.addButtonDisabled
            ]}
            onPress={addTeacher}
            disabled={!newTeacher.name.trim() || !validateEmail(newTeacher.email)}
          >
            <Text style={styles.addButtonText}>+ Tambah Guru</Text>
          </TouchableOpacity>
        </View>

        {/* Teachers List */}
        {teachers.length > 0 && (
          <View style={styles.teachersSection}>
            <Text style={styles.sectionTitle}>
              Guru yang Akan Diundang ({teachers.length})
            </Text>
            
            <FlatList
              data={teachers}
              renderItem={renderTeacherItem}
              keyExtractor={(item) => item.id}
              scrollEnabled={false}
              showsVerticalScrollIndicator={false}
            />
          </View>
        )}

        {/* Info Box */}
        <View style={styles.infoBox}>
          <Text style={styles.infoTitle}>📧 Tentang Undangan Guru</Text>
          <Text style={styles.infoText}>
            • Guru akan menerima email undangan untuk bergabung{"\n"}
            • Mereka dapat mengatur password sendiri{"\n"}
            • Anda dapat menambah guru lain kapan saja nanti{"\n"}
            • Langkah ini bersifat opsional dan dapat dilewati
          </Text>
        </View>

        {/* Skip Option */}
        {teachers.length === 0 && (
          <View style={styles.skipSection}>
            <Text style={styles.skipText}>
              Tidak ada guru yang ingin diundang sekarang? Tidak masalah!
            </Text>
            <Text style={styles.skipSubtext}>
              Anda dapat mengundang guru kapan saja dari dashboard nanti.
            </Text>
          </View>
        )}

        {/* Navigation Buttons */}
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.backButton} onPress={onBack}>
            <Text style={styles.backButtonText}>Kembali</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.nextButton} onPress={handleNext}>
            <Text style={styles.nextButtonText}>
              {teachers.length > 0 ? 'Kirim Undangan' : 'Lewati'}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    marginBottom: 32,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    lineHeight: 24,
  },
  addTeacherSection: {
    marginBottom: 32,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 16,
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 6,
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: 'white',
    color: '#1f2937',
  },
  inputError: {
    borderColor: '#ef4444',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 12,
    marginTop: 4,
  },
  dropdownButton: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    backgroundColor: 'white',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  dropdownButtonText: {
    fontSize: 16,
    color: '#1f2937',
    flex: 1,
  },
  placeholderText: {
    color: '#9ca3af',
  },
  dropdownArrow: {
    fontSize: 12,
    color: '#6b7280',
  },
  dropdown: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    backgroundColor: 'white',
    marginTop: 4,
    maxHeight: 150,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  dropdownOption: {
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#f3f4f6',
  },
  dropdownOptionText: {
    fontSize: 14,
    color: '#1f2937',
  },
  addButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
    marginTop: 8,
  },
  addButtonDisabled: {
    backgroundColor: '#9ca3af',
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  teachersSection: {
    marginBottom: 32,
  },
  teacherCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  teacherInfo: {
    flex: 1,
  },
  teacherName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  teacherEmail: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 4,
  },
  teacherSubject: {
    fontSize: 12,
    color: '#3b82f6',
    fontWeight: '500',
  },
  teacherActions: {
    flexDirection: 'row',
    gap: 8,
  },
  editButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#f3f4f6',
  },
  editButtonText: {
    fontSize: 16,
  },
  deleteButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#fef2f2',
  },
  deleteButtonText: {
    fontSize: 16,
  },
  infoBox: {
    backgroundColor: '#f0f9ff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    borderLeftWidth: 4,
    borderLeftColor: '#3b82f6',
  },
  infoTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
  },
  skipSection: {
    backgroundColor: '#f9fafb',
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    alignItems: 'center',
  },
  skipText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#374151',
    textAlign: 'center',
    marginBottom: 4,
  },
  skipSubtext: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 16,
  },
  backButton: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#6b7280',
    fontSize: 16,
    fontWeight: '600',
  },
  nextButton: {
    flex: 2,
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  nextButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="components/ScreenContent.tsx">
import { Text, View } from 'react-native';

import { EditScreenInfo } from './EditScreenInfo';

type ScreenContentProps = {
  title: string;
  path: string;
  children?: React.ReactNode;
};

export const ScreenContent = ({ title, path, children }: ScreenContentProps) => {
  return (
    <View className={styles.container}>
      <Text className={styles.title}>{title}</Text>
      <View className={styles.separator} />
      <EditScreenInfo path={path} />
      {children}
    </View>
  );
};
const styles = {
  container: `items-center flex-1 justify-center`,
  separator: `h-[1px] my-7 w-4/5 bg-gray-200`,
  title: `text-xl font-bold`,
};
</file>

<file path="components/TabBarIcon.tsx">
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { StyleSheet } from 'react-native';

export const TabBarIcon = (props: {
  name: React.ComponentProps<typeof FontAwesome>['name'];
  color: string;
}) => {
  return <FontAwesome size={28} style={styles.tabBarIcon} {...props} />;
};

export const styles = StyleSheet.create({
  tabBarIcon: {
    marginBottom: -3,
  },
});
</file>

<file path="components/ui/button/index.tsx">
'use client';
import React from 'react';
import { createButton } from '@gluestack-ui/button';
import { tva } from '@gluestack-ui/nativewind-utils/tva';
import {
  withStyleContext,
  useStyleContext,
} from '@gluestack-ui/nativewind-utils/withStyleContext';
import { cssInterop } from 'nativewind';
import { ActivityIndicator, Pressable, Text, View } from 'react-native';
import type { VariantProps } from '@gluestack-ui/nativewind-utils';
import { PrimitiveIcon, UIIcon } from '@gluestack-ui/icon';

const SCOPE = 'BUTTON';

const Root = withStyleContext(Pressable, SCOPE);

const UIButton = createButton({
  Root: Root,
  Text,
  Group: View,
  Spinner: ActivityIndicator,
  Icon: UIIcon,
});

cssInterop(PrimitiveIcon, {
  className: {
    target: 'style',
    nativeStyleToProp: {
      height: true,
      width: true,
      fill: true,
      color: 'classNameColor',
      stroke: true,
    },
  },
});

const buttonStyle = tva({
  base: 'group/button rounded bg-primary-500 flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 transition-all duration-200 data-[active=true]:scale-[0.98]',
  variants: {
    action: {
      primary:
          'bg-gradient-to-r from-primary-500 to-primary-600 data-[hover=true]:from-primary-600 data-[hover=true]:to-primary-700 data-[active=true]:from-primary-700 data-[active=true]:to-primary-800 border-primary-300 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info',
      secondary:
        'bg-secondary-500 border-secondary-300 data-[hover=true]:bg-secondary-600 data-[hover=true]:border-secondary-400 data-[active=true]:bg-secondary-700 data-[active=true]:border-secondary-700 data-[focus-visible=true]:web:ring-indicator-info',
      positive:
        'bg-success-500 border-success-300 data-[hover=true]:bg-success-600 data-[hover=true]:border-success-400 data-[active=true]:bg-success-700 data-[active=true]:border-success-500 data-[focus-visible=true]:web:ring-indicator-info',
      negative:
        'bg-error-500 border-error-300 data-[hover=true]:bg-error-600 data-[hover=true]:border-error-400 data-[active=true]:bg-error-700 data-[active=true]:border-error-500 data-[focus-visible=true]:web:ring-indicator-info',
      default:
        'bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
    },
    variant: {
      link: 'px-0',
      outline:
        'bg-transparent border data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
      solid: '',
    },

    size: {
      xs: 'px-3.5 h-8',
      sm: 'px-4 h-9',
      md: 'px-5 h-10',
      lg: 'px-6 h-11',
      xl: 'px-7 h-12',
    },
  },
  compoundVariants: [
    {
      action: 'primary',
      variant: 'link',
      class:
        'px-0 bg-transparent data-[hover=true]:bg-transparent data-[active=true]:bg-transparent',
    },
    {
      action: 'secondary',
      variant: 'link',
      class:
        'px-0 bg-transparent data-[hover=true]:bg-transparent data-[active=true]:bg-transparent',
    },
    {
      action: 'positive',
      variant: 'link',
      class:
        'px-0 bg-transparent data-[hover=true]:bg-transparent data-[active=true]:bg-transparent',
    },
    {
      action: 'negative',
      variant: 'link',
      class:
        'px-0 bg-transparent data-[hover=true]:bg-transparent data-[active=true]:bg-transparent',
    },
    {
      action: 'primary',
      variant: 'outline',
      class:
        'bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
    },
    {
      action: 'secondary',
      variant: 'outline',
      class:
        'bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
    },
    {
      action: 'positive',
      variant: 'outline',
      class:
        'bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
    },
    {
      action: 'negative',
      variant: 'outline',
      class:
        'bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent',
    },
  ],
});

const buttonTextStyle = tva({
  base: 'text-typography-0 font-semibold web:select-none',
  parentVariants: {
    action: {
      primary:
        'text-primary-600 data-[hover=true]:text-primary-600 data-[active=true]:text-primary-700',
      secondary:
        'text-typography-500 data-[hover=true]:text-typography-600 data-[active=true]:text-typography-700',
      positive:
        'text-success-600 data-[hover=true]:text-success-600 data-[active=true]:text-success-700',
      negative:
        'text-error-600 data-[hover=true]:text-error-600 data-[active=true]:text-error-700',
    },
    variant: {
      link: 'data-[hover=true]:underline data-[active=true]:underline',
      outline: '',
      solid:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    size: {
      xs: 'text-xs',
      sm: 'text-sm',
      md: 'text-base',
      lg: 'text-lg',
      xl: 'text-xl',
    },
  },
  parentCompoundVariants: [
    {
      variant: 'solid',
      action: 'primary',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    {
      variant: 'solid',
      action: 'secondary',
      class:
        'text-typography-800 data-[hover=true]:text-typography-800 data-[active=true]:text-typography-800',
    },
    {
      variant: 'solid',
      action: 'positive',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    {
      variant: 'solid',
      action: 'negative',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    {
      variant: 'outline',
      action: 'primary',
      class:
        'text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500',
    },
    {
      variant: 'outline',
      action: 'secondary',
      class:
        'text-typography-500 data-[hover=true]:text-primary-600 data-[active=true]:text-typography-700',
    },
    {
      variant: 'outline',
      action: 'positive',
      class:
        'text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500',
    },
    {
      variant: 'outline',
      action: 'negative',
      class:
        'text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500',
    },
  ],
});

const buttonIconStyle = tva({
  base: 'fill-none',
  parentVariants: {
    variant: {
      link: 'data-[hover=true]:underline data-[active=true]:underline',
      outline: '',
      solid:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    size: {
      xs: 'h-3.5 w-3.5',
      sm: 'h-4 w-4',
      md: 'h-[18px] w-[18px]',
      lg: 'h-[18px] w-[18px]',
      xl: 'h-5 w-5',
    },
    action: {
      primary:
        'text-primary-600 data-[hover=true]:text-primary-600 data-[active=true]:text-primary-700',
      secondary:
        'text-typography-500 data-[hover=true]:text-typography-600 data-[active=true]:text-typography-700',
      positive:
        'text-success-600 data-[hover=true]:text-success-600 data-[active=true]:text-success-700',

      negative:
        'text-error-600 data-[hover=true]:text-error-600 data-[active=true]:text-error-700',
    },
  },
  parentCompoundVariants: [
    {
      variant: 'solid',
      action: 'primary',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    {
      variant: 'solid',
      action: 'secondary',
      class:
        'text-typography-800 data-[hover=true]:text-typography-800 data-[active=true]:text-typography-800',
    },
    {
      variant: 'solid',
      action: 'positive',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
    {
      variant: 'solid',
      action: 'negative',
      class:
        'text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0',
    },
  ],
});

const buttonGroupStyle = tva({
  base: '',
  variants: {
    space: {
      'xs': 'gap-1',
      'sm': 'gap-2',
      'md': 'gap-3',
      'lg': 'gap-4',
      'xl': 'gap-5',
      '2xl': 'gap-6',
      '3xl': 'gap-7',
      '4xl': 'gap-8',
    },
    isAttached: {
      true: 'gap-0',
    },
    flexDirection: {
      'row': 'flex-row',
      'column': 'flex-col',
      'row-reverse': 'flex-row-reverse',
      'column-reverse': 'flex-col-reverse',
    },
  },
});

type IButtonProps = Omit<
  React.ComponentPropsWithoutRef<typeof UIButton>,
  'context'
> &
  VariantProps<typeof buttonStyle> & { className?: string };

const Button = React.forwardRef<
  React.ComponentRef<typeof UIButton>,
  IButtonProps
>(function Button(
  { className, variant = 'solid', size = 'md', action = 'primary', ...props },
  ref
) {
  return (
    <UIButton
      ref={ref}
      {...props}
      className={buttonStyle({ variant, size, action, class: className })}
      context={{ variant, size, action }}
    />
  );
});

type IButtonTextProps = React.ComponentPropsWithoutRef<typeof UIButton.Text> &
  VariantProps<typeof buttonTextStyle> & { className?: string };

const ButtonText = React.forwardRef<
  React.ComponentRef<typeof UIButton.Text>,
  IButtonTextProps
>(function ButtonText({ className, variant, size, action, ...props }, ref) {
  const {
    variant: parentVariant,
    size: parentSize,
    action: parentAction,
  } = useStyleContext(SCOPE);

  return (
    <UIButton.Text
      ref={ref}
      {...props}
      className={buttonTextStyle({
        parentVariants: {
          variant: parentVariant,
          size: parentSize,
          action: parentAction,
        },
        variant,
        size,
        action,
        class: className,
      })}
    />
  );
});

const ButtonSpinner = UIButton.Spinner;

type IButtonIcon = React.ComponentPropsWithoutRef<typeof UIButton.Icon> &
  VariantProps<typeof buttonIconStyle> & {
    className?: string | undefined;
    as?: React.ElementType;
    height?: number;
    width?: number;
  };

const ButtonIcon = React.forwardRef<
  React.ComponentRef<typeof UIButton.Icon>,
  IButtonIcon
>(function ButtonIcon({ className, size, ...props }, ref) {
  const {
    variant: parentVariant,
    size: parentSize,
    action: parentAction,
  } = useStyleContext(SCOPE);

  if (typeof size === 'number') {
    return (
      <UIButton.Icon
        ref={ref}
        {...props}
        className={buttonIconStyle({ class: className })}
        size={size}
      />
    );
  } else if (
    (props.height !== undefined || props.width !== undefined) &&
    size === undefined
  ) {
    return (
      <UIButton.Icon
        ref={ref}
        {...props}
        className={buttonIconStyle({ class: className })}
      />
    );
  }
  return (
    <UIButton.Icon
      {...props}
      className={buttonIconStyle({
        parentVariants: {
          size: parentSize,
          variant: parentVariant,
          action: parentAction,
        },
        size,
        class: className,
      })}
      ref={ref}
    />
  );
});

type IButtonGroupProps = React.ComponentPropsWithoutRef<typeof UIButton.Group> &
  VariantProps<typeof buttonGroupStyle>;

const ButtonGroup = React.forwardRef<
  React.ComponentRef<typeof UIButton.Group>,
  IButtonGroupProps
>(function ButtonGroup(
  {
    className,
    space = 'md',
    isAttached = false,
    flexDirection = 'column',
    ...props
  },
  ref
) {
  return (
    <UIButton.Group
      className={buttonGroupStyle({
        class: className,
        space,
        isAttached,
        flexDirection,
      })}
      {...props}
      ref={ref}
    />
  );
});

Button.displayName = 'Button';
ButtonText.displayName = 'ButtonText';
ButtonSpinner.displayName = 'ButtonSpinner';
ButtonIcon.displayName = 'ButtonIcon';
ButtonGroup.displayName = 'ButtonGroup';

export { Button, ButtonText, ButtonSpinner, ButtonIcon, ButtonGroup };
</file>

<file path="components/ui/card/index.tsx">
import React from 'react';
import type { VariantProps } from '@gluestack-ui/nativewind-utils';
import { View, ViewProps } from 'react-native';
import { cardStyle } from './styles';

type ICardProps = ViewProps &
  VariantProps<typeof cardStyle> & { className?: string };

const Card = React.forwardRef<React.ComponentRef<typeof View>, ICardProps>(
  function Card(
    { className, size = 'md', variant = 'elevated', ...props },
    ref
  ) {
    return (
      <View
        className={cardStyle({ size, variant, class: className })}
        {...props}
        ref={ref}
      />
    );
  }
);

Card.displayName = 'Card';

export { Card };
</file>

<file path="components/ui/card/index.web.tsx">
import React from 'react';
import { cardStyle } from './styles';
import type { VariantProps } from '@gluestack-ui/nativewind-utils';

type ICardProps = React.ComponentPropsWithoutRef<'div'> &
  VariantProps<typeof cardStyle>;

const Card = React.forwardRef<HTMLDivElement, ICardProps>(function Card(
  { className, size = 'md', variant = 'elevated', ...props },
  ref
) {
  return (
    <div
      className={cardStyle({ size, variant, class: className })}
      {...props}
      ref={ref}
    />
  );
});

Card.displayName = 'Card';

export { Card };
</file>

<file path="components/ui/card/styles.tsx">
import { tva } from '@gluestack-ui/nativewind-utils/tva';
import { isWeb } from '@gluestack-ui/nativewind-utils/IsWeb';
const baseStyle = isWeb ? 'flex flex-col relative z-0' : '';

export const cardStyle = tva({
  base: baseStyle,
  variants: {
    size: {
      sm: 'p-3 rounded',
      md: 'p-4 rounded-md',
      lg: 'p-6 rounded-xl',
    },
    variant: {
      elevated: 'bg-background-0',
      outline: 'border border-outline-200 ',
      ghost: 'rounded-none',
      filled: 'bg-background-50',
      glassmorphism: 'bg-white/10 backdrop-blur-md border border-white/20',
    },
  },
});
</file>

<file path="components/ui/design-system/authStyles.ts">
/**
 * Auth Flow Design System Constants
 * 
 * This file contains standardized styling constants for authentication screens
 * to ensure visual coherence with the onboarding flow.
 */

import { tva } from '@gluestack-ui/nativewind-utils/tva';

// Auth Screen Layout Constants
export const AUTH_LAYOUT = {
  // Container padding and spacing
  CONTAINER_PADDING: 'p-5', // 20px padding
  CONTENT_SPACING: 'space-y-6', // 24px vertical spacing
  FORM_SPACING: 'space-y-4', // 16px form field spacing
  
  // Card styling for auth forms
  CARD_CONTAINER: 'p-6 bg-white shadow-lg mb-6',
  CARD_VARIANT: 'elevated' as const,
  CARD_SIZE: 'lg' as const,
  
  // Background configuration
  BACKGROUND_VARIANT: 'auth' as const,
} as const;

// Typography Constants
export const AUTH_TYPOGRAPHY = {
  // Main heading (e.g., "Buat Akun Baru", "Login to your account")
  MAIN_TITLE: 'text-4xl font-bold text-typography-900 mb-4',
  
  // Subtitle/description text
  SUBTITLE: 'text-lg text-typography-600 leading-7',
  
  // Form field labels
  FIELD_LABEL: 'text-base font-semibold text-typography-900 mb-3',
  
  // Error messages
  ERROR_TEXT: 'text-sm text-error-600 mt-2',
  
  // Helper text
  HELPER_TEXT: 'text-sm text-typography-600',
  
  // Link text
  LINK_TEXT: 'text-primary-600 font-semibold',
  
  // Button text
  BUTTON_TEXT: 'text-white font-semibold text-lg',
} as const;

// Input Field Styling
export const AUTH_INPUT = {
  // Standard input styling
  CONTAINER: 'bg-background-50 border-border-300',
  VARIANT: 'outline' as const,
  SIZE: 'lg' as const,
  
  // Input field text styling
  FIELD_TEXT: 'text-typography-900',
  
  // Placeholder styling
  PLACEHOLDER_COLOR: 'text-typography-500',
  
  // Error state styling
  ERROR_BORDER: 'border-error-500',
} as const;

// Button Styling
export const AUTH_BUTTON = {
  // Primary action button (Login, Sign Up)
  PRIMARY: {
    SIZE: 'lg' as const,
    VARIANT: 'solid' as const,
    ACTION: 'primary' as const,
    CLASSES: 'bg-primary-500 mt-8 py-4 rounded-xl h-14',
  },
  
  // Secondary button styling
  SECONDARY: {
    SIZE: 'md' as const,
    VARIANT: 'outline' as const,
    ACTION: 'secondary' as const,
    CLASSES: 'border-border-300',
  },
} as const;

// Color Scheme Constants
export const AUTH_COLORS = {
  // Primary colors
  PRIMARY: 'primary-500',
  PRIMARY_HOVER: 'primary-600',
  PRIMARY_ACTIVE: 'primary-700',
  
  // Background colors
  BACKGROUND: 'background-0',
  BACKGROUND_SUBTLE: 'background-50',
  
  // Text colors
  TEXT_PRIMARY: 'typography-900',
  TEXT_SECONDARY: 'typography-600',
  TEXT_MUTED: 'typography-500',
  
  // Border colors
  BORDER: 'border-300',
  BORDER_FOCUS: 'border-400',
  
  // Status colors
  ERROR: 'error-600',
  SUCCESS: 'success-600',
  WARNING: 'warning-600',
} as const;

// Animation and Transition Constants
export const AUTH_ANIMATIONS = {
  // Standard transition duration
  TRANSITION: 'transition-all duration-200',
  
  // Button press animation
  BUTTON_PRESS: 'data-[active=true]:scale-[0.98]',
  
  // Focus states
  FOCUS_RING: 'data-[focus-visible=true]:web:ring-2 data-[focus-visible=true]:web:ring-indicator-info',
} as const;

// Spacing Constants
export const AUTH_SPACING = {
  // Section spacing
  SECTION_MARGIN: 'mb-8',
  SECTION_PADDING: 'py-6',
  
  // Form element spacing
  FIELD_MARGIN: 'mb-6',
  SMALL_MARGIN: 'mb-4',
  
  // Header spacing
  HEADER_MARGIN: 'mb-10 mt-6',
  TITLE_MARGIN: 'mb-4',
} as const;

// Responsive Design Constants
export const AUTH_RESPONSIVE = {
  // Container max width
  MAX_WIDTH: 'max-w-md mx-auto',
  
  // Padding for different screen sizes
  MOBILE_PADDING: 'px-4',
  TABLET_PADDING: 'px-6',
  DESKTOP_PADDING: 'px-8',
} as const;

// Validation Styling
export const AUTH_VALIDATION = {
  // Valid state
  VALID_BORDER: 'border-success-500',
  VALID_TEXT: 'text-success-600',
  
  // Invalid state
  INVALID_BORDER: 'border-error-500',
  INVALID_TEXT: 'text-error-600',
  
  // Focus states
  FOCUS_VALID: 'focus:border-success-600',
  FOCUS_INVALID: 'focus:border-error-600',
} as const;

// Social Login Styling
export const AUTH_SOCIAL = {
  // Social button container
  CONTAINER: 'flex-row justify-center space-x-4 mb-12',
  
  // Individual social button
  BUTTON: 'w-12 h-12 rounded-xl bg-background-100 items-center justify-center border border-border-200',
  
  // Divider styling
  DIVIDER: {
    CONTAINER: 'flex-row items-center mb-8',
    LINE: 'flex-1 h-px bg-border-200',
    TEXT: 'mx-4 text-sm text-typography-500',
  },
} as const;

// Utility function to combine auth styles
export const combineAuthStyles = (...styles: string[]) => {
  return styles.filter(Boolean).join(' ');
};

// Auth form container style using tva
export const authContainerStyle = tva({
  base: 'flex-1 relative',
  variants: {
    variant: {
      default: 'bg-background-0',
      modern: 'bg-gradient-to-br from-background-0 to-background-50',
    },
  },
  defaultVariants: {
    variant: 'default',
  },
});

// Auth card style using tva
export const authCardStyle = tva({
  base: 'bg-white shadow-lg rounded-xl',
  variants: {
    size: {
      sm: 'p-4',
      md: 'p-5',
      lg: 'p-6',
    },
    elevation: {
      low: 'shadow-sm',
      medium: 'shadow-lg',
      high: 'shadow-xl',
    },
  },
  defaultVariants: {
    size: 'lg',
    elevation: 'medium',
  },
});

// Auth input style using tva
export const authInputStyle = tva({
  base: 'border rounded-lg px-4 py-3 text-typography-900',
  variants: {
    state: {
      default: 'border-border-300 bg-background-50',
      focus: 'border-primary-500 bg-background-0',
      error: 'border-error-500 bg-error-50',
      success: 'border-success-500 bg-success-50',
    },
    size: {
      sm: 'px-3 py-2 text-sm',
      md: 'px-4 py-3 text-base',
      lg: 'px-4 py-4 text-lg',
    },
  },
  defaultVariants: {
    state: 'default',
    size: 'lg',
  },
});
</file>

<file path="components/ui/design-system/index.ts">
/**
 * Design System Exports
 * 
 * Central export file for all design system constants and utilities.
 */

export {
  AUTH_LAYOUT,
  AUTH_TYPOGRAPHY,
  AUTH_INPUT,
  AUTH_BUTTON,
  AUTH_COLORS,
  AUTH_ANIMATIONS,
  AUTH_SPACING,
  AUTH_RESPONSIVE,
  AUTH_VALIDATION,
  AUTH_SOCIAL,
  combineAuthStyles,
  authContainerStyle,
  authCardStyle,
  authInputStyle,
} from './authStyles';

// Re-export common design system types
export type {
  VariantProps
} from '@gluestack-ui/nativewind-utils';
</file>

<file path="components/ui/gluestack-ui-provider/config.ts">
'use client';
import { vars } from 'nativewind';

export const config = {
  light: vars({
    '--color-primary-0': '179 179 179',
    '--color-primary-50': '153 153 153',
    '--color-primary-100': '128 128 128',
    '--color-primary-200': '115 115 115',
    '--color-primary-300': '102 102 102',
    '--color-primary-400': '82 82 82',
    '--color-primary-500': '51 51 51',
    '--color-primary-600': '41 41 41',
    '--color-primary-700': '31 31 31',
    '--color-primary-800': '13 13 13',
    '--color-primary-900': '10 10 10',
    '--color-primary-950': '8 8 8',

    /* Secondary  */
    '--color-secondary-0': '253 253 253',
    '--color-secondary-50': '251 251 251',
    '--color-secondary-100': '246 246 246',
    '--color-secondary-200': '242 242 242',
    '--color-secondary-300': '237 237 237',
    '--color-secondary-400': '230 230 231',
    '--color-secondary-500': '217 217 219',
    '--color-secondary-600': '198 199 199',
    '--color-secondary-700': '189 189 189',
    '--color-secondary-800': '177 177 177',
    '--color-secondary-900': '165 164 164',
    '--color-secondary-950': '157 157 157',

    /* Tertiary */
    '--color-tertiary-0': '255 250 245',
    '--color-tertiary-50': '255 242 229',
    '--color-tertiary-100': '255 233 213',
    '--color-tertiary-200': '254 209 170',
    '--color-tertiary-300': '253 180 116',
    '--color-tertiary-400': '251 157 75',
    '--color-tertiary-500': '231 129 40',
    '--color-tertiary-600': '215 117 31',
    '--color-tertiary-700': '180 98 26',
    '--color-tertiary-800': '130 73 23',
    '--color-tertiary-900': '108 61 19',
    '--color-tertiary-950': '84 49 18',

    /* Error */
    '--color-error-0': '254 233 233',
    '--color-error-50': '254 226 226',
    '--color-error-100': '254 202 202',
    '--color-error-200': '252 165 165',
    '--color-error-300': '248 113 113',
    '--color-error-400': '239 68 68',
    '--color-error-500': '230 53 53',
    '--color-error-600': '220 38 38',
    '--color-error-700': '185 28 28',
    '--color-error-800': '153 27 27',
    '--color-error-900': '127 29 29',
    '--color-error-950': '83 19 19',

    /* Success */
    '--color-success-0': '228 255 244',
    '--color-success-50': '202 255 232',
    '--color-success-100': '162 241 192',
    '--color-success-200': '132 211 162',
    '--color-success-300': '102 181 132',
    '--color-success-400': '72 151 102',
    '--color-success-500': '52 131 82',
    '--color-success-600': '42 121 72',
    '--color-success-700': '32 111 62',
    '--color-success-800': '22 101 52',
    '--color-success-900': '20 83 45',
    '--color-success-950': '27 50 36',

    /* Warning */
    '--color-warning-0': '255 249 245',
    '--color-warning-50': '255 244 236',
    '--color-warning-100': '255 231 213',
    '--color-warning-200': '254 205 170',
    '--color-warning-300': '253 173 116',
    '--color-warning-400': '251 149 75',
    '--color-warning-500': '231 120 40',
    '--color-warning-600': '215 108 31',
    '--color-warning-700': '180 90 26',
    '--color-warning-800': '130 68 23',
    '--color-warning-900': '108 56 19',
    '--color-warning-950': '84 45 18',

    /* Info */
    '--color-info-0': '236 248 254',
    '--color-info-50': '199 235 252',
    '--color-info-100': '162 221 250',
    '--color-info-200': '124 207 248',
    '--color-info-300': '87 194 246',
    '--color-info-400': '50 180 244',
    '--color-info-500': '13 166 242',
    '--color-info-600': '11 141 205',
    '--color-info-700': '9 115 168',
    '--color-info-800': '7 90 131',
    '--color-info-900': '5 64 93',
    '--color-info-950': '3 38 56',

    /* Typography */
    '--color-typography-0': '254 254 255',
    '--color-typography-50': '245 245 245',
    '--color-typography-100': '229 229 229',
    '--color-typography-200': '219 219 220',
    '--color-typography-300': '212 212 212',
    '--color-typography-400': '163 163 163',
    '--color-typography-500': '140 140 140',
    '--color-typography-600': '115 115 115',
    '--color-typography-700': '82 82 82',
    '--color-typography-800': '64 64 64',
    '--color-typography-900': '38 38 39',
    '--color-typography-950': '23 23 23',

    /* Outline */
    '--color-outline-0': '253 254 254',
    '--color-outline-50': '243 243 243',
    '--color-outline-100': '230 230 230',
    '--color-outline-200': '221 220 219',
    '--color-outline-300': '211 211 211',
    '--color-outline-400': '165 163 163',
    '--color-outline-500': '140 141 141',
    '--color-outline-600': '115 116 116',
    '--color-outline-700': '83 82 82',
    '--color-outline-800': '65 65 65',
    '--color-outline-900': '39 38 36',
    '--color-outline-950': '26 23 23',

    /* Background */
    '--color-background-0': '255 255 255',
    '--color-background-50': '246 246 246',
    '--color-background-100': '242 241 241',
    '--color-background-200': '220 219 219',
    '--color-background-300': '213 212 212',
    '--color-background-400': '162 163 163',
    '--color-background-500': '142 142 142',
    '--color-background-600': '116 116 116',
    '--color-background-700': '83 82 82',
    '--color-background-800': '65 64 64',
    '--color-background-900': '39 38 37',
    '--color-background-950': '18 18 18',

    /* Background Special */
    '--color-background-error': '254 241 241',
    '--color-background-warning': '255 243 234',
    '--color-background-success': '237 252 242',
    '--color-background-muted': '247 248 247',
    '--color-background-info': '235 248 254',

    /* Focus Ring Indicator  */
    '--color-indicator-primary': '55 55 55',
    '--color-indicator-info': '83 153 236',
    '--color-indicator-error': '185 28 28',
  }),
  dark: vars({
    '--color-primary-0': '166 166 166',
    '--color-primary-50': '175 175 175',
    '--color-primary-100': '186 186 186',
    '--color-primary-200': '197 197 197',
    '--color-primary-300': '212 212 212',
    '--color-primary-400': '221 221 221',
    '--color-primary-500': '230 230 230',
    '--color-primary-600': '240 240 240',
    '--color-primary-700': '250 250 250',
    '--color-primary-800': '253 253 253',
    '--color-primary-900': '254 249 249',
    '--color-primary-950': '253 252 252',

    /* Secondary  */
    '--color-secondary-0': '20 20 20',
    '--color-secondary-50': '23 23 23',
    '--color-secondary-100': '31 31 31',
    '--color-secondary-200': '39 39 39',
    '--color-secondary-300': '44 44 44',
    '--color-secondary-400': '56 57 57',
    '--color-secondary-500': '63 64 64',
    '--color-secondary-600': '86 86 86',
    '--color-secondary-700': '110 110 110',
    '--color-secondary-800': '135 135 135',
    '--color-secondary-900': '150 150 150',
    '--color-secondary-950': '164 164 164',

    /* Tertiary */
    '--color-tertiary-0': '84 49 18',
    '--color-tertiary-50': '108 61 19',
    '--color-tertiary-100': '130 73 23',
    '--color-tertiary-200': '180 98 26',
    '--color-tertiary-300': '215 117 31',
    '--color-tertiary-400': '231 129 40',
    '--color-tertiary-500': '251 157 75',
    '--color-tertiary-600': '253 180 116',
    '--color-tertiary-700': '254 209 170',
    '--color-tertiary-800': '255 233 213',
    '--color-tertiary-900': '255 242 229',
    '--color-tertiary-950': '255 250 245',

    /* Error */
    '--color-error-0': '83 19 19',
    '--color-error-50': '127 29 29',
    '--color-error-100': '153 27 27',
    '--color-error-200': '185 28 28',
    '--color-error-300': '220 38 38',
    '--color-error-400': '230 53 53',
    '--color-error-500': '239 68 68',
    '--color-error-600': '249 97 96',
    '--color-error-700': '229 91 90',
    '--color-error-800': '254 202 202',
    '--color-error-900': '254 226 226',
    '--color-error-950': '254 233 233',

    /* Success */
    '--color-success-0': '27 50 36',
    '--color-success-50': '20 83 45',
    '--color-success-100': '22 101 52',
    '--color-success-200': '32 111 62',
    '--color-success-300': '42 121 72',
    '--color-success-400': '52 131 82',
    '--color-success-500': '72 151 102',
    '--color-success-600': '102 181 132',
    '--color-success-700': '132 211 162',
    '--color-success-800': '162 241 192',
    '--color-success-900': '202 255 232',
    '--color-success-950': '228 255 244',

    /* Warning */
    '--color-warning-0': '84 45 18',
    '--color-warning-50': '108 56 19',
    '--color-warning-100': '130 68 23',
    '--color-warning-200': '180 90 26',
    '--color-warning-300': '215 108 31',
    '--color-warning-400': '231 120 40',
    '--color-warning-500': '251 149 75',
    '--color-warning-600': '253 173 116',
    '--color-warning-700': '254 205 170',
    '--color-warning-800': '255 231 213',
    '--color-warning-900': '255 244 237',
    '--color-warning-950': '255 249 245',

    /* Info */
    '--color-info-0': '3 38 56',
    '--color-info-50': '5 64 93',
    '--color-info-100': '7 90 131',
    '--color-info-200': '9 115 168',
    '--color-info-300': '11 141 205',
    '--color-info-400': '13 166 242',
    '--color-info-500': '50 180 244',
    '--color-info-600': '87 194 246',
    '--color-info-700': '124 207 248',
    '--color-info-800': '162 221 250',
    '--color-info-900': '199 235 252',
    '--color-info-950': '236 248 254',

    /* Typography */
    '--color-typography-0': '23 23 23',
    '--color-typography-50': '38 38 39',
    '--color-typography-100': '64 64 64',
    '--color-typography-200': '82 82 82',
    '--color-typography-300': '115 115 115',
    '--color-typography-400': '140 140 140',
    '--color-typography-500': '163 163 163',
    '--color-typography-600': '212 212 212',
    '--color-typography-700': '219 219 220',
    '--color-typography-800': '229 229 229',
    '--color-typography-900': '245 245 245',
    '--color-typography-950': '254 254 255',

    /* Outline */
    '--color-outline-0': '26 23 23',
    '--color-outline-50': '39 38 36',
    '--color-outline-100': '65 65 65',
    '--color-outline-200': '83 82 82',
    '--color-outline-300': '115 116 116',
    '--color-outline-400': '140 141 141',
    '--color-outline-500': '165 163 163',
    '--color-outline-600': '211 211 211',
    '--color-outline-700': '221 220 219',
    '--color-outline-800': '230 230 230',
    '--color-outline-900': '243 243 243',
    '--color-outline-950': '253 254 254',

    /* Background */
    '--color-background-0': '18 18 18',
    '--color-background-50': '39 38 37',
    '--color-background-100': '65 64 64',
    '--color-background-200': '83 82 82',
    '--color-background-300': '116 116 116',
    '--color-background-400': '142 142 142',
    '--color-background-500': '162 163 163',
    '--color-background-600': '213 212 212',
    '--color-background-700': '229 228 228',
    '--color-background-800': '242 241 241',
    '--color-background-900': '246 246 246',
    '--color-background-950': '255 255 255',

    /* Background Special */
    '--color-background-error': '66 43 43',
    '--color-background-warning': '65 47 35',
    '--color-background-success': '28 43 33',
    '--color-background-muted': '51 51 51',
    '--color-background-info': '26 40 46',

    /* Focus Ring Indicator  */
    '--color-indicator-primary': '247 247 247',
    '--color-indicator-info': '161 199 245',
    '--color-indicator-error': '232 70 69',
  }),
};
</file>

<file path="components/ui/gluestack-ui-provider/index.tsx">
import React, { useEffect } from 'react';
import { config } from './config';
import { View, ViewProps } from 'react-native';
import { OverlayProvider } from '@gluestack-ui/overlay';
import { ToastProvider } from '@gluestack-ui/toast';
import { useColorScheme } from 'nativewind';

export type ModeType = 'light' | 'dark' | 'system';

export function GluestackUIProvider({
  mode = 'light',
  ...props
}: {
  mode?: ModeType;
  children?: React.ReactNode;
  style?: ViewProps['style'];
}) {
  const { colorScheme, setColorScheme } = useColorScheme();

  useEffect(() => {
    setColorScheme(mode);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mode]);

  return (
    <View
      style={[
        config[colorScheme!],
        { flex: 1, height: '100%', width: '100%' },
        props.style,
      ]}
    >
      <OverlayProvider>
        <ToastProvider>{props.children}</ToastProvider>
      </OverlayProvider>
    </View>
  );
}
</file>

<file path="components/ui/gluestack-ui-provider/index.web.tsx">
'use client';
import React, { useEffect, useLayoutEffect } from 'react';
import { config } from './config';
import { OverlayProvider } from '@gluestack-ui/overlay';
import { ToastProvider } from '@gluestack-ui/toast';
import { setFlushStyles } from '@gluestack-ui/nativewind-utils/flush';
import { script } from './script';

export type ModeType = 'light' | 'dark' | 'system';

const variableStyleTagId = 'nativewind-style';
const createStyle = (styleTagId: string) => {
  const style = document.createElement('style');
  style.id = styleTagId;
  style.appendChild(document.createTextNode(''));
  return style;
};

export const useSafeLayoutEffect =
  typeof window !== 'undefined' ? useLayoutEffect : useEffect;

export function GluestackUIProvider({
  mode = 'light',
  ...props
}: {
  mode?: ModeType;
  children?: React.ReactNode;
}) {
  let cssVariablesWithMode = ``;
  Object.keys(config).forEach((configKey) => {
    cssVariablesWithMode +=
      configKey === 'dark' ? `\n .dark {\n ` : `\n:root {\n`;
    const cssVariables = Object.keys(
      config[configKey as keyof typeof config]
    ).reduce((acc: string, curr: string) => {
      acc += `${curr}:${config[configKey as keyof typeof config][curr]}; `;
      return acc;
    }, '');
    cssVariablesWithMode += `${cssVariables} \n}`;
  });

  setFlushStyles(cssVariablesWithMode);

  const handleMediaQuery = React.useCallback((e: MediaQueryListEvent) => {
    script(e.matches ? 'dark' : 'light');
  }, []);

  useSafeLayoutEffect(() => {
    if (mode !== 'system') {
      const documentElement = document.documentElement;
      if (documentElement) {
        documentElement.classList.add(mode);
        documentElement.classList.remove(mode === 'light' ? 'dark' : 'light');
        documentElement.style.colorScheme = mode;
      }
    }
  }, [mode]);

  useSafeLayoutEffect(() => {
    if (mode !== 'system') return;
    const media = window.matchMedia('(prefers-color-scheme: dark)');

    media.addListener(handleMediaQuery);

    return () => media.removeListener(handleMediaQuery);
  }, [handleMediaQuery]);

  useSafeLayoutEffect(() => {
    if (typeof window !== 'undefined') {
      const documentElement = document.documentElement;
      if (documentElement) {
        const head = documentElement.querySelector('head');
        let style = head?.querySelector(`[id='${variableStyleTagId}']`);
        if (!style) {
          style = createStyle(variableStyleTagId);
          style.innerHTML = cssVariablesWithMode;
          if (head) head.appendChild(style);
        }
      }
    }
  }, []);

  return (
    <>
      <script
        suppressHydrationWarning
        dangerouslySetInnerHTML={{
          __html: `(${script.toString()})('${mode}')`,
        }}
      />
      <OverlayProvider>
        <ToastProvider>{props.children}</ToastProvider>
      </OverlayProvider>
    </>
  );
}
</file>

<file path="components/ui/gluestack-ui-provider/script.ts">
export const script = (mode: string) => {
  const documentElement = document.documentElement;

  function getSystemColorMode() {
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  }

  try {
    const isSystem = mode === 'system';
    const theme = isSystem ? getSystemColorMode() : mode;
    documentElement.classList.remove(theme === 'light' ? 'dark' : 'light');
    documentElement.classList.add(theme);
    documentElement.style.colorScheme = theme;
  } catch (e) {
    console.error(e);
  }
};
</file>

<file path="components/ui/input/index.tsx">
'use client';
import React from 'react';
import { createInput } from '@gluestack-ui/input';
import { View, Pressable, TextInput } from 'react-native';
import { tva } from '@gluestack-ui/nativewind-utils/tva';
import {
  withStyleContext,
  useStyleContext,
} from '@gluestack-ui/nativewind-utils/withStyleContext';
import { cssInterop } from 'nativewind';
import type { VariantProps } from '@gluestack-ui/nativewind-utils';
import { PrimitiveIcon, UIIcon } from '@gluestack-ui/icon';

const SCOPE = 'INPUT';

const UIInput = createInput({
  Root: withStyleContext(View, SCOPE),
  Icon: UIIcon,
  Slot: Pressable,
  Input: TextInput,
});

cssInterop(PrimitiveIcon, {
  className: {
    target: 'style',
    nativeStyleToProp: {
      height: true,
      width: true,
      fill: true,
      color: 'classNameColor',
      stroke: true,
    },
  },
});

const inputStyle = tva({
  base: 'border-background-300 flex-row overflow-hidden content-center data-[hover=true]:border-outline-400 data-[focus=true]:border-primary-700 data-[focus=true]:hover:border-primary-700 data-[disabled=true]:opacity-40 data-[disabled=true]:hover:border-background-300 items-center transition-all duration-200',

  variants: {
    size: {
      xl: 'h-12',
      lg: 'h-11',
      md: 'h-10',
      sm: 'h-9',
    },

    variant: {
      underlined:
        'rounded-none border-b data-[invalid=true]:border-b-2 data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700',

      outline:
        'rounded border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error',

      rounded:
        'rounded-full border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error',
    },
  },
});

const inputIconStyle = tva({
  base: 'justify-center items-center text-typography-400 fill-none',
  parentVariants: {
    size: {
      '2xs': 'h-3 w-3',
      'xs': 'h-3.5 w-3.5',
      'sm': 'h-4 w-4',
      'md': 'h-[18px] w-[18px]',
      'lg': 'h-5 w-5',
      'xl': 'h-6 w-6',
    },
  },
});

const inputSlotStyle = tva({
  base: 'justify-center items-center web:disabled:cursor-not-allowed',
});

const inputFieldStyle = tva({
  base: 'flex-1 text-typography-900 py-0 px-3 placeholder:text-typography-500 h-full ios:leading-[0px] web:cursor-text web:data-[disabled=true]:cursor-not-allowed',

  parentVariants: {
    variant: {
      underlined: 'web:outline-0 web:outline-none px-0',
      outline: 'web:outline-0 web:outline-none',
      rounded: 'web:outline-0 web:outline-none px-4',
    },

    size: {
      '2xs': 'text-2xs',
      'xs': 'text-xs',
      'sm': 'text-sm',
      'md': 'text-base',
      'lg': 'text-lg',
      'xl': 'text-xl',
      '2xl': 'text-2xl',
      '3xl': 'text-3xl',
      '4xl': 'text-4xl',
      '5xl': 'text-5xl',
      '6xl': 'text-6xl',
    },
  },
});

type IInputProps = React.ComponentProps<typeof UIInput> &
  VariantProps<typeof inputStyle> & { className?: string };
const Input = React.forwardRef<React.ComponentRef<typeof UIInput>, IInputProps>(
  function Input(
    { className, variant = 'outline', size = 'md', ...props },
    ref
  ) {
    return (
      <UIInput
        ref={ref}
        {...props}
        className={inputStyle({ variant, size, class: className })}
        context={{ variant, size }}
      />
    );
  }
);

type IInputIconProps = React.ComponentProps<typeof UIInput.Icon> &
  VariantProps<typeof inputIconStyle> & {
    className?: string;
    height?: number;
    width?: number;
  };

const InputIcon = React.forwardRef<
  React.ComponentRef<typeof UIInput.Icon>,
  IInputIconProps
>(function InputIcon({ className, size, ...props }, ref) {
  const { size: parentSize } = useStyleContext(SCOPE);

  if (typeof size === 'number') {
    return (
      <UIInput.Icon
        ref={ref}
        {...props}
        className={inputIconStyle({ class: className })}
        size={size}
      />
    );
  } else if (
    (props.height !== undefined || props.width !== undefined) &&
    size === undefined
  ) {
    return (
      <UIInput.Icon
        ref={ref}
        {...props}
        className={inputIconStyle({ class: className })}
      />
    );
  }
  return (
    <UIInput.Icon
      ref={ref}
      {...props}
      className={inputIconStyle({
        parentVariants: {
          size: parentSize,
        },
        class: className,
      })}
    />
  );
});

type IInputSlotProps = React.ComponentProps<typeof UIInput.Slot> &
  VariantProps<typeof inputSlotStyle> & { className?: string };

const InputSlot = React.forwardRef<
  React.ComponentRef<typeof UIInput.Slot>,
  IInputSlotProps
>(function InputSlot({ className, ...props }, ref) {
  return (
    <UIInput.Slot
      ref={ref}
      {...props}
      className={inputSlotStyle({
        class: className,
      })}
    />
  );
});

type IInputFieldProps = React.ComponentProps<typeof UIInput.Input> &
  VariantProps<typeof inputFieldStyle> & { className?: string };

const InputField = React.forwardRef<
  React.ComponentRef<typeof UIInput.Input>,
  IInputFieldProps
>(function InputField({ className, ...props }, ref) {
  const { variant: parentVariant, size: parentSize } = useStyleContext(SCOPE);

  return (
    <UIInput.Input
      ref={ref}
      {...props}
      className={inputFieldStyle({
        parentVariants: {
          variant: parentVariant,
          size: parentSize,
        },
        class: className,
      })}
    />
  );
});

Input.displayName = 'Input';
InputIcon.displayName = 'InputIcon';
InputSlot.displayName = 'InputSlot';
InputField.displayName = 'InputField';

export { Input, InputField, InputIcon, InputSlot };
</file>

<file path="components/ui/ModernBackground.tsx">
import React from 'react';
import { View } from 'react-native';
import Svg, { Defs, LinearGradient, Stop, Circle, Path } from 'react-native-svg';

interface ModernBackgroundProps {
  children: React.ReactNode;
  variant?: 'default' | 'auth' | 'minimal';
}

export default function ModernBackground({ 
  children, 
  variant = 'default' 
}: ModernBackgroundProps) {
  const renderBackgroundElements = () => {
    switch (variant) {
      case 'auth':
        return (
          <Svg
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              zIndex: -1,
            }}
            width="100%"
            height="100%"
            viewBox="0 0 400 800"
          >
            <Defs>
              <LinearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <Stop offset="0%" stopColor="#667eea" stopOpacity={0.1} />
                <Stop offset="50%" stopColor="#764ba2" stopOpacity={0.05} />
                <Stop offset="100%" stopColor="#f093fb" stopOpacity={0.1} />
              </LinearGradient>
              <LinearGradient id="circleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <Stop offset="0%" stopColor="#667eea" stopOpacity={0.15} />
                <Stop offset="100%" stopColor="#764ba2" stopOpacity={0.05} />
              </LinearGradient>
            </Defs>
            
            {/* Background gradient */}
            <Path
              d="M0,0 L400,0 L400,800 L0,800 Z"
              fill="url(#bgGradient)"
            />
            
            {/* Floating geometric elements */}
            <Circle
              cx="80"
              cy="120"
              r="40"
              fill="url(#circleGradient)"
            />
            <Circle
              cx="320"
              cy="200"
              r="25"
              fill="url(#circleGradient)"
            />
            <Circle
              cx="60"
              cy="600"
              r="30"
              fill="url(#circleGradient)"
            />
            <Circle
              cx="350"
              cy="650"
              r="35"
              fill="url(#circleGradient)"
            />
            
            {/* Abstract shapes */}
            <Path
              d="M-50,300 Q100,250 200,300 T400,320 L400,400 Q300,380 200,400 T-50,380 Z"
              fill="url(#circleGradient)"
            />
          </Svg>
        );
      
      case 'minimal':
        return (
          <View 
            className="absolute inset-0 bg-gradient-to-br from-slate-50 to-blue-50" 
            style={{ zIndex: -1 }}
          />
        );
      
      default:
        return (
          <View 
            className="absolute inset-0 bg-gradient-to-br from-background-0 to-background-50" 
            style={{ zIndex: -1 }}
          />
        );
    }
  };

  return (
    <View className="flex-1 relative">
      {renderBackgroundElements()}
      {children}
    </View>
  );
}
</file>

<file path="database/schema.sql">
-- Enable Row Level Security
ALTER DATABASE postgres SET "app.jwt_secret" TO 'your-jwt-secret';

-- Create custom types
CREATE TYPE user_role AS ENUM ('management', 'teacher', 'student', 'parent');
CREATE TYPE subscription_plan AS ENUM ('starter', 'growing', 'enterprise');
CREATE TYPE subscription_status AS ENUM ('trial', 'active', 'cancelled', 'expired');

-- Schools table
CREATE TABLE IF NOT EXISTS schools (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  address TEXT,
  city VARCHAR(100),
  province VARCHAR(100),
  license_number VARCHAR(100),
  student_count_estimate INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Users table (extends Supabase auth.users)
CREATE TABLE IF NOT EXISTS users (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  full_name VARCHAR(255) NOT NULL,
  phone VARCHAR(20),
  role user_role NOT NULL DEFAULT 'management',
  school_id UUID REFERENCES schools(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Subscriptions table
CREATE TABLE IF NOT EXISTS subscriptions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE NOT NULL,
  plan subscription_plan NOT NULL DEFAULT 'starter',
  status subscription_status NOT NULL DEFAULT 'trial',
  trial_ends_at TIMESTAMP WITH TIME ZONE,
  current_period_start TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  current_period_end TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (NOW() + INTERVAL '30 days'),
  student_limit INTEGER NOT NULL DEFAULT 50,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Teacher invitations table
CREATE TABLE IF NOT EXISTS teacher_invitations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE NOT NULL,
  invited_by UUID REFERENCES users(id) ON DELETE CASCADE NOT NULL,
  email VARCHAR(255) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  phone VARCHAR(20),
  status VARCHAR(20) NOT NULL DEFAULT 'pending', -- pending, accepted, expired
  invitation_token UUID DEFAULT gen_random_uuid(),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT (NOW() + INTERVAL '7 days'),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  accepted_at TIMESTAMP WITH TIME ZONE
);

-- Students table
CREATE TABLE IF NOT EXISTS students (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE NOT NULL,
  student_id VARCHAR(50) NOT NULL, -- School's internal student ID
  full_name VARCHAR(255) NOT NULL,
  date_of_birth DATE,
  gender VARCHAR(10),
  address TEXT,
  parent_phone VARCHAR(20),
  parent_email VARCHAR(255),
  class_name VARCHAR(100),
  enrollment_date DATE DEFAULT CURRENT_DATE,
  status VARCHAR(20) NOT NULL DEFAULT 'active', -- active, inactive, graduated
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(school_id, student_id)
);

-- Classes table
CREATE TABLE IF NOT EXISTS classes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE NOT NULL,
  name VARCHAR(100) NOT NULL,
  grade_level INTEGER,
  teacher_id UUID REFERENCES users(id) ON DELETE SET NULL,
  academic_year VARCHAR(20) NOT NULL,
  student_capacity INTEGER DEFAULT 30,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(school_id, name, academic_year)
);

-- Student-Class relationships
CREATE TABLE IF NOT EXISTS student_classes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  student_id UUID REFERENCES students(id) ON DELETE CASCADE NOT NULL,
  class_id UUID REFERENCES classes(id) ON DELETE CASCADE NOT NULL,
  academic_year VARCHAR(20) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(student_id, class_id, academic_year)
);

-- Attendance records
CREATE TABLE IF NOT EXISTS attendance (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  student_id UUID REFERENCES students(id) ON DELETE CASCADE NOT NULL,
  class_id UUID REFERENCES classes(id) ON DELETE CASCADE NOT NULL,
  date DATE NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'present', -- present, absent, late, excused
  notes TEXT,
  recorded_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(student_id, class_id, date)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_school_id ON users(school_id);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_subscriptions_school_id ON subscriptions(school_id);
CREATE INDEX IF NOT EXISTS idx_teacher_invitations_school_id ON teacher_invitations(school_id);
CREATE INDEX IF NOT EXISTS idx_teacher_invitations_email ON teacher_invitations(email);
CREATE INDEX IF NOT EXISTS idx_teacher_invitations_token ON teacher_invitations(invitation_token);
CREATE INDEX IF NOT EXISTS idx_students_school_id ON students(school_id);
CREATE INDEX IF NOT EXISTS idx_students_student_id ON students(school_id, student_id);
CREATE INDEX IF NOT EXISTS idx_classes_school_id ON classes(school_id);
CREATE INDEX IF NOT EXISTS idx_classes_teacher_id ON classes(teacher_id);
CREATE INDEX IF NOT EXISTS idx_student_classes_student_id ON student_classes(student_id);
CREATE INDEX IF NOT EXISTS idx_student_classes_class_id ON student_classes(class_id);
CREATE INDEX IF NOT EXISTS idx_attendance_student_id ON attendance(student_id);
CREATE INDEX IF NOT EXISTS idx_attendance_class_id ON attendance(class_id);
CREATE INDEX IF NOT EXISTS idx_attendance_date ON attendance(date);

-- Enable Row Level Security
ALTER TABLE schools ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE teacher_invitations ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE classes ENABLE ROW LEVEL SECURITY;
ALTER TABLE student_classes ENABLE ROW LEVEL SECURITY;
ALTER TABLE attendance ENABLE ROW LEVEL SECURITY;

-- Row Level Security Policies

-- Schools policies
CREATE POLICY "Users can view their own school" ON schools
  FOR SELECT USING (
    id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    )
  );

CREATE POLICY "Management can update their school" ON schools
  FOR UPDATE USING (
    id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

CREATE POLICY "Management can insert schools" ON schools
  FOR INSERT WITH CHECK (
    auth.uid() IN (
      SELECT id FROM users WHERE role = 'management'
    )
  );

-- Users policies
CREATE POLICY "Users can view users in their school" ON users
  FOR SELECT USING (
    school_id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    ) OR id = auth.uid()
  );

CREATE POLICY "Users can update their own profile" ON users
  FOR UPDATE USING (id = auth.uid());

CREATE POLICY "Management can update users in their school" ON users
  FOR UPDATE USING (
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

CREATE POLICY "Users can insert their own profile" ON users
  FOR INSERT WITH CHECK (id = auth.uid());

-- Subscriptions policies
CREATE POLICY "Users can view their school's subscription" ON subscriptions
  FOR SELECT USING (
    school_id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    )
  );

CREATE POLICY "Management can manage their school's subscription" ON subscriptions
  FOR ALL USING (
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

-- Teacher invitations policies
CREATE POLICY "Management can manage teacher invitations" ON teacher_invitations
  FOR ALL USING (
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

CREATE POLICY "Invited teachers can view their invitation" ON teacher_invitations
  FOR SELECT USING (
    email = (
      SELECT email FROM auth.users WHERE id = auth.uid()
    )
  );

-- Students policies
CREATE POLICY "School users can view students" ON students
  FOR SELECT USING (
    school_id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    )
  );

CREATE POLICY "Management and teachers can manage students" ON students
  FOR ALL USING (
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role IN ('management', 'teacher')
    )
  );

-- Classes policies
CREATE POLICY "School users can view classes" ON classes
  FOR SELECT USING (
    school_id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    )
  );

CREATE POLICY "Management can manage all classes" ON classes
  FOR ALL USING (
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

CREATE POLICY "Teachers can manage their own classes" ON classes
  FOR ALL USING (
    teacher_id = auth.uid() OR
    school_id IN (
      SELECT school_id FROM users 
      WHERE id = auth.uid() AND role = 'management'
    )
  );

-- Student-Classes policies
CREATE POLICY "School users can view student-class relationships" ON student_classes
  FOR SELECT USING (
    student_id IN (
      SELECT id FROM students 
      WHERE school_id IN (
        SELECT school_id FROM users WHERE id = auth.uid()
      )
    )
  );

CREATE POLICY "Management and teachers can manage student-class relationships" ON student_classes
  FOR ALL USING (
    student_id IN (
      SELECT id FROM students 
      WHERE school_id IN (
        SELECT school_id FROM users 
        WHERE id = auth.uid() AND role IN ('management', 'teacher')
      )
    )
  );

-- Attendance policies
CREATE POLICY "School users can view attendance" ON attendance
  FOR SELECT USING (
    student_id IN (
      SELECT id FROM students 
      WHERE school_id IN (
        SELECT school_id FROM users WHERE id = auth.uid()
      )
    )
  );

CREATE POLICY "Teachers can manage attendance for their classes" ON attendance
  FOR ALL USING (
    class_id IN (
      SELECT id FROM classes 
      WHERE teacher_id = auth.uid() OR
      school_id IN (
        SELECT school_id FROM users 
        WHERE id = auth.uid() AND role = 'management'
      )
    )
  );

-- Functions and triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers
CREATE TRIGGER update_schools_updated_at BEFORE UPDATE ON schools
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_subscriptions_updated_at BEFORE UPDATE ON subscriptions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_students_updated_at BEFORE UPDATE ON students
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_classes_updated_at BEFORE UPDATE ON classes
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to handle new user registration
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO users (id, email, full_name, phone, role)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'full_name', ''),
    COALESCE(NEW.raw_user_meta_data->>'phone', ''),
    COALESCE(NEW.raw_user_meta_data->>'role', 'management')::user_role
  );
  RETURN NEW;
END;
$$ language 'plpgsql' SECURITY DEFINER;

-- Trigger for new user registration
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION handle_new_user();

-- Function to create initial subscription for new school
CREATE OR REPLACE FUNCTION create_initial_subscription()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO subscriptions (school_id, plan, status, trial_ends_at, student_limit)
  VALUES (
    NEW.id,
    'starter',
    'trial',
    NOW() + INTERVAL '14 days',
    50
  );
  RETURN NEW;
END;
$$ language 'plpgsql' SECURITY DEFINER;

-- Trigger for new school creation
CREATE TRIGGER on_school_created
  AFTER INSERT ON schools
  FOR EACH ROW EXECUTE FUNCTION create_initial_subscription();
</file>

<file path="docs/GUIDELINE.md">
1. When you start any task, always act like a planner.
2. Always refer to the latest documentation about any task you're working on using Context7 MCP.
3. Check to make sure the user has selected the OpenAI o3 model. If they have not, ask them to select it before going any further.
4. Always review and follow all rules in .cursor/rules (or .windsurfrules)
5. Always refer to the http://README.md file in the root of the project when you want to run any command.
6. Make sure you refer docs/LESSON_LEARNED.md for lessons learned.
7. Ask any questions that's not clear to you and make sure you understand the task before you start.
</file>

<file path="docs/implementation-plan/auth-ui-analysis.md">
# Auth UI Coherence - Current State Analysis

**Date:** 2025-06-02  
**Branch:** feature/auth-ui-coherence  
**Task:** T1 - Create Feature Branch and Analyze Current State

## Executive Summary

After analyzing the current auth screens and onboarding components, I've identified significant design inconsistencies that need to be addressed to achieve UI coherence.

## Current State Analysis

### 1. LoginScreen.tsx - Current Implementation

**Design Characteristics:**
- Uses basic white background (`bg-white`)
- Simple SafeAreaView + KeyboardAvoidingView + ScrollView structure
- Basic form layout with standard Input components
- Social login buttons with simple styling
- Clean but basic design without modern visual elements
- Uses standard typography and spacing

**Key Issues:**
- No use of ModernBackground component
- Lacks visual hierarchy and modern styling
- Inconsistent with onboarding design patterns
- Missing card-based layout structure

### 2. SignUpScreen.tsx - Current Implementation

**Design Characteristics:**
- **GOOD:** Uses ModernBackground with 'auth' variant
- **GOOD:** Uses Card component for form container
- **GOOD:** Better visual hierarchy with proper spacing
- **GOOD:** Consistent with modern design patterns
- Uses elevated card with shadow effects
- Proper form validation and error handling

**Key Observations:**
- SignUpScreen is already more aligned with desired design patterns
- Uses ModernBackground component effectively
- Card-based layout provides better visual structure
- This should serve as a reference for LoginScreen updates

### 3. Onboarding Components Analysis

**BasicInfoStep.tsx Design Patterns:**
- Uses StyleSheet instead of className (older pattern)
- Clean form layout with proper spacing
- Consistent input styling and validation
- Good typography hierarchy
- Proper error handling and feedback

**ModernBackground Component:**
- Supports 'auth' variant with gradient backgrounds
- Uses SVG for geometric elements and visual interest
- Provides consistent background styling across components

## Design Inconsistencies Identified

### 1. Background Treatment
- **LoginScreen:** Plain white background
- **SignUpScreen:** ModernBackground with 'auth' variant ✓
- **Onboarding:** Consistent background patterns

### 2. Layout Structure
- **LoginScreen:** Direct ScrollView layout
- **SignUpScreen:** Card-based layout with proper elevation ✓
- **Onboarding:** Consistent card/container patterns

### 3. Visual Hierarchy
- **LoginScreen:** Basic typography, minimal visual interest
- **SignUpScreen:** Better hierarchy with proper spacing ✓
- **Onboarding:** Consistent typography and spacing patterns

### 4. Component Usage
- **LoginScreen:** Basic Input components, no modern styling
- **SignUpScreen:** Proper use of Card, Input, and Button components ✓
- **Onboarding:** Consistent component usage patterns

## Design Alignment Strategy

### Primary Reference: SignUpScreen.tsx
The SignUpScreen already demonstrates the desired design patterns:
- ModernBackground with 'auth' variant
- Card-based layout with elevation
- Proper spacing and typography
- Modern visual hierarchy

### Key Design Patterns to Implement:
1. **Background:** Use ModernBackground with 'auth' variant
2. **Layout:** Card-based container for form elements
3. **Typography:** Consistent heading and body text styling
4. **Spacing:** Proper padding and margins following SignUpScreen patterns
5. **Visual Elements:** Maintain modern, clean aesthetic

## Implementation Recommendations

### For LoginScreen.tsx:
1. **Replace background:** Add ModernBackground with 'auth' variant
2. **Add Card container:** Wrap form elements in Card component
3. **Update typography:** Use consistent heading styles
4. **Improve spacing:** Follow SignUpScreen spacing patterns
5. **Maintain functionality:** Preserve all existing login logic

### For ForgotPasswordScreen (if exists):
1. Follow same patterns as updated LoginScreen
2. Ensure visual consistency across all auth screens

## Success Criteria for T1 ✓

- [x] Feature branch created and checked out
- [x] Current state documented with detailed analysis
- [x] Clear list of design inconsistencies identified
- [x] Implementation strategy defined

## Next Steps (T2)

1. Standardize design system components
2. Create shared styling constants for auth flows
3. Verify ModernBackground component supports auth variant properly
4. Begin LoginScreen component updates

## Files Analyzed

- `components/auth/LoginScreen.tsx` - Needs major updates
- `components/auth/SignUpScreen.tsx` - Good reference implementation
- `components/onboarding/BasicInfoStep.tsx` - Design pattern reference
- `components/ui/ModernBackground.tsx` - Background component analysis

## Risk Assessment

**Low Risk:** Changes are primarily visual/UI focused with no functional modifications required.

**Mitigation:** Preserve all existing functionality while updating visual presentation only.
</file>

<file path="docs/implementation-plan/auth-ui-coherence.md">
# UI Coherence - Auth Screens Implementation Plan

**Branch Name:** `feature/auth-ui-coherence`

## Background and Motivation

The current login and sign-up screens have inconsistent design patterns compared to the onboarding flow. The onboarding components use a clean, modern design with consistent styling, spacing, and visual hierarchy, while the auth screens have different approaches:

### Current Issues Identified:
1. **Login Screen Draft vs Current Implementation**: The draft in `login-screend-draft.md` shows a modern gradient-based design with blur effects, while the current `LoginScreen.tsx` uses a basic white background
2. **Design Inconsistency**: Onboarding screens use consistent styling patterns, typography, and spacing that don't match auth screens
3. **Visual Hierarchy**: Onboarding screens have better visual flow and modern UI elements
4. **Component Reusability**: Auth screens don't leverage the same design system components used in onboarding

### Design Patterns from Onboarding Flow:
- Clean, modern styling with consistent spacing
- Proper visual hierarchy with clear typography
- Consistent input field styling and validation patterns
- Modern card-based layouts
- Consistent color scheme and branding
- Proper use of the ModernBackground component

## Key Challenges and Analysis

### Technical Challenges:
1. **Design System Alignment**: Need to ensure auth screens use the same design tokens and patterns as onboarding
2. **Component Consistency**: Auth screens should use similar input styling, button patterns, and layout structures
3. **Visual Coherence**: Maintain consistent branding, colors, and spacing throughout the auth flow
4. **User Experience**: Ensure smooth transition between auth screens and onboarding flow

### Design Considerations:
1. **Gradient vs Clean Design**: The login draft uses gradients while onboarding uses cleaner backgrounds - need to decide on consistent approach
2. **Animation Consistency**: Onboarding has subtle animations that should be reflected in auth screens
3. **Typography Hierarchy**: Ensure consistent font sizes, weights, and spacing
4. **Input Field Styling**: Standardize input field appearance and validation feedback

## High-level Task Breakdown

### T1: Create Feature Branch and Analyze Current State ✅
- [x] Create feature branch `feature/auth-ui-coherence` from main
- [x] Document current auth screen designs and onboarding patterns
- [x] Identify specific design inconsistencies
- [x] Create design alignment checklist

**Success Criteria:**
- [x] Feature branch created and checked out
- [x] Current state documented with screenshots/analysis
- [x] Clear list of design inconsistencies identified

**Analysis Document:** `docs/implementation-plan/auth-ui-analysis.md`

### T2: Align with Onboarding Design Patterns ⏳

**Status**: In Progress
**Objective**: Update authentication screens to follow onboarding flow design patterns

### Acceptance Criteria:
- [ ] Remove ModernBackground from auth screens
- [ ] Apply onboarding-style layout: clean white background, proper spacing, card-based design
- [ ] Use consistent typography, input styling, and button design from onboarding
- [ ] Ensure visual coherence between auth and onboarding flows

### Design Pattern Analysis:
From onboarding components (BasicInfoStep, WelcomeStep):
- **Layout**: Simple ScrollView with white background, no fancy backgrounds
- **Spacing**: 24px horizontal padding, 32px vertical padding
- **Typography**: Bold titles (24px), subtle subtitles (16px, #64748b)
- **Inputs**: White background, #d1d5db border, 12px border radius, 16px horizontal padding
- **Buttons**: #3b82f6 background, 12-16px border radius, proper shadows
- **Cards**: White background with subtle shadows, 12-16px border radius

### Current Progress:
- ✅ Analyzed onboarding design patterns
- ⏳ **Next**: Update LoginScreen.tsx to match onboarding style

**Success Criteria:**
- Design system components documented
- Shared styling constants created
- ModernBackground component verified for auth use

### T3: Update LoginScreen Component
- [ ] Replace current LoginScreen with design coherent to onboarding
- [ ] Implement consistent typography and spacing
- [ ] Use standardized input field styling
- [ ] Add proper visual hierarchy and modern styling
- [ ] Ensure responsive design and accessibility

**Success Criteria:**
- LoginScreen visually coherent with onboarding flow
- All functionality preserved (login, validation, error handling)
- Responsive design maintained
- Manual testing confirms visual consistency

### T4: Update SignUpScreen Component
- [ ] Apply same design patterns to SignUpScreen
- [ ] Ensure consistent styling with updated LoginScreen
- [ ] Implement proper form validation feedback
- [ ] Add visual coherence with onboarding flow

**Success Criteria:**
- SignUpScreen matches LoginScreen design patterns
- Form validation feedback consistent
- Visual flow coherent with onboarding
- All signup functionality preserved

### T5: Update ForgotPasswordScreen Component
- [ ] Apply consistent design patterns to ForgotPasswordScreen
- [ ] Ensure visual coherence across all auth screens
- [ ] Test complete auth flow for consistency

**Success Criteria:**
- ForgotPasswordScreen matches other auth screens
- Complete auth flow visually coherent
- All functionality preserved

### T6: Testing and Refinement
- [ ] Test complete auth flow on multiple devices
- [ ] Verify smooth transition to onboarding flow
- [ ] Conduct visual consistency review
- [ ] Fix any identified issues
- [ ] Update documentation

**Success Criteria:**
- Auth flow tested on iOS and Android
- Visual consistency verified across all screens
- No functional regressions identified
- Documentation updated

### T7: Code Review and Deployment
- [ ] Create pull request with comprehensive description
- [ ] Address code review feedback
- [ ] Merge to main branch
- [ ] Update project documentation

**Success Criteria:**
- Pull request approved and merged
- No merge conflicts
- Documentation updated
- Task marked complete

## Project Status Board

### In Progress
- [ ] T2: Align with Onboarding Design Patterns
  - [x] Analyze onboarding design patterns (BasicInfoStep, WelcomeStep)
  - [ ] Remove ModernBackground from LoginScreen.tsx
  - [ ] Apply onboarding-style layout to LoginScreen.tsx
  - [ ] Update SignUpScreen.tsx to match onboarding patterns

### Pending
- [ ] T3: Update LoginScreen Component
- [ ] T4: Update SignUpScreen Component
- [ ] T5: Update ForgotPasswordScreen Component
- [ ] T6: Testing and Refinement
- [ ] T7: Code Review and Deployment

### Completed
- [x] Planning phase completed
- [x] T1: Create Feature Branch and Analyze Current State

## Current Status / Progress Tracking

**Date:** 2025-06-02
**Status:** T1 Complete - Analysis Done
**Next Action:** Begin T2 - Standardize Design System Components

**T1 Completed:** Feature branch created, current state analyzed, design inconsistencies documented in `auth-ui-analysis.md`

### Key Decisions Made:
1. Will align auth screens with onboarding design patterns rather than the gradient-heavy draft
2. Focus on clean, modern design consistent with existing onboarding flow
3. Prioritize component reusability and design system consistency
4. Maintain all existing functionality while improving visual coherence

## Executor's Feedback or Assistance Requests

*This section will be updated by the Executor during implementation*

## Lessons Learned

*This section will be updated as implementation progresses*

## Acceptance Criteria

### Visual Consistency
- [ ] Auth screens use consistent typography with onboarding flow
- [ ] Input fields have standardized styling and validation feedback
- [ ] Color scheme and spacing consistent across auth and onboarding
- [ ] Visual hierarchy matches onboarding patterns

### Functional Requirements
- [ ] All existing auth functionality preserved
- [ ] Form validation works consistently
- [ ] Error handling maintains current behavior
- [ ] Navigation between auth screens smooth
- [ ] Transition to onboarding flow seamless

### Technical Requirements
- [ ] Code follows existing patterns and conventions
- [ ] Components are reusable and maintainable
- [ ] Performance not degraded
- [ ] Responsive design maintained
- [ ] Accessibility standards met

### Testing Requirements
- [ ] Manual testing on iOS and Android
- [ ] Visual regression testing completed
- [ ] Auth flow end-to-end testing
- [ ] Edge cases and error scenarios tested

---

**Estimated Effort:** 2-3 days
**Priority:** Medium
**Dependencies:** None
**Risk Level:** Low (UI changes only, no functional modifications)
</file>

<file path="docs/implementation-plan/fix-profile-load-error-pgrst116.md">
# Implementation Plan: Fix Profile Load Error (PGRST116) After Registration

**Branch Name:** `bugfix/profile-load-pgrst116`

## 1. Background and Motivation

After implementing the Supabase Auth Database Integration, we've encountered an issue where newly registered users receive a `PGRST116` error ("JSON object requested, multiple (or no) rows returned") when attempting to load their profile immediately after registration. This error occurs because the client-side `loadUserProfile` function is querying the profile before the database trigger (`on_auth_user_created`) has completed creating the new profile row, or due to RLS policy issues preventing the newly registered user from seeing their own profile.

## 2. Key Challenges and Analysis

*   **Race Condition**: The core issue is a timing/race condition between the client-side profile loading and the server-side trigger execution.
*   **Role Hierarchy**: Only management users should perform direct sign-up. Other roles (teachers, students, parents) are added hierarchically through the UI.
*   **RLS Policy Circular Dependencies**: We discovered that some RLS policies were creating circular dependencies by using helper functions that themselves query the users table.
*   **Client-Side Retry Strategy**: Implementing a robust retry mechanism in the client to handle potential delays in profile availability.

## 3. High-level Task Breakdown

*   **T1: Create Feature Branch**
    *   Create a new branch `bugfix/profile-load-pgrst116` from the latest `master`.
    *   **Success Criteria**: Branch created and checked out.

*   **T2: Enhance `handle_new_user` Trigger for Robustness**
    *   Review the `handle_new_user` trigger function for any potential silent failure points or unhandled exceptions.
    *   Update the default role to 'management' since only management users should perform direct sign-up.
    *   Add explicit error handling and transaction management to ensure the profile is committed before returning.
    *   **Success Criteria**: Trigger function updated with better error handling and correct default role.
    *   **Success Criteria**: Trigger function reviewed and potentially updated for better error handling and reliability. Database logs show clear success or failure of trigger execution during testing.

*   **T3: Fix RLS Policies to Avoid Circular Dependencies**
    *   Identify and fix RLS policies that create circular dependencies.
    *   Simplify the RLS policies to ensure new users can always access their own profiles.
    *   Remove helper functions that query the users table from within RLS policies.
    *   **Success Criteria**: RLS policies updated to avoid circular dependencies and infinite recursion errors.

*   **T4: Implement Resilient Profile Loading in `authStore.ts`**
    *   Modify the `loadUserProfile` function to implement a retry mechanism with appropriate delay.
    *   Add specific error handling for the `PGRST116` error code.
    *   Implement comprehensive logging to track retry attempts and success/failure.
    *   Add special handling for new management users to ensure smooth onboarding.
    *   **Success Criteria**: Client-side code successfully retries profile loading when the profile is not immediately available, with appropriate timeout and error handling.

*   **T5: Test Registration Flow**
    *   Create a test script to simulate user registration and profile loading.
    *   Test the full registration flow to ensure that profiles are correctly created and loaded.
    *   Verify that the retry mechanism works as expected.
    *   **Success Criteria**: New users can register and their profiles are loaded successfully, with no `PGRST116` errors visible to the end user.

*   **T6: Update Documentation**
    *   Document the changes made and the lessons learned in `docs/LESSONS_LEARNED.md`.
    *   **Success Criteria**: Documentation updated with clear explanation of the issue and solution.

*   **T7: Merge and Deploy**
    *   Create a pull request for the bugfix branch.
    *   Merge the pull request into `master` after review.
    *   **Success Criteria**: Changes merged into `master` and deployed to production.

## 4. Project Status Board

- [x] T1: Create Feature Branch
- [x] T2: Enhance `handle_new_user` Trigger for Robustness
- [x] T3: Fix RLS Policies to Avoid Circular Dependencies
- [x] T4: Implement Resilient Profile Loading in `authStore.ts`
- [x] T5: Test Registration Flow
- [ ] T6: Update Documentation
- [ ] T7: Merge and Deploy

## 5. Executor's Feedback or Assistance Requests

During implementation, we discovered several important insights:

1. The default role for new sign-ups should be 'management', not 'student', as only management users should perform direct sign-up.

2. We encountered an infinite recursion error in the RLS policies due to circular dependencies. The RLS policies were using helper functions like `get_my_role()` and `get_my_school_id()` that themselves query the users table, creating a circular reference.

3. We had to simplify the RLS policies to ensure that new users can always access their own profiles without circular dependencies.

4. The client-side retry mechanism needed to be more robust, with better logging and special handling for new management users.

5. Testing with the Supabase JavaScript client revealed that email confirmation might be required for new registrations, which affects how we test the solution.

## 6. Lessons Learned

1. **RLS Policy Design**: When designing RLS policies, be careful about circular dependencies. Avoid using helper functions that query the same table the policy is protecting.

2. **Role-Based Registration**: Our application has a hierarchical user model where only management users should perform direct sign-up. Other roles are added through the UI by users higher in the hierarchy.

3. **Client-Side Resilience**: Implement robust retry mechanisms in client-side code to handle potential delays in database operations, especially when dealing with triggers and RLS policies.

4. **Comprehensive Logging**: Add detailed logging throughout the authentication and profile loading process to help diagnose issues in production.

5. **Testing Authentication Flows**: When testing authentication flows, be aware of email confirmation requirements and other Supabase Auth settings that might affect the registration process.
</file>

<file path="docs/implementation-plan/full-schema-draft.md">
-- =============================================
-- PESANTREN DIGITAL DATABASE SCHEMA
-- Version: 1.0
-- Database: PostgreSQL (Supabase)
-- =============================================

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =============================================
-- ENUM TYPES
-- =============================================

-- User roles
CREATE TYPE user_role AS ENUM (
    'super_admin',
    'school_owner',
    'management',
    'teacher',
    'parent',
    'student'
);

-- Subscription plans
CREATE TYPE subscription_plan AS ENUM (
    'trial',
    'starter',
    'growing',
    'enterprise'
);

-- Subscription status
CREATE TYPE subscription_status AS ENUM (
    'trial',
    'active',
    'past_due',
    'canceled',
    'expired'
);

-- Incident types
CREATE TYPE incident_type AS ENUM (
    'bullying',
    'health',
    'academic',
    'facility',
    'security',
    'other'
);

-- Incident priority
CREATE TYPE incident_priority AS ENUM (
    'low',
    'medium',
    'high',
    'critical'
);

-- Incident status
CREATE TYPE incident_status AS ENUM (
    'new',
    'assigned',
    'investigating',
    'resolved',
    'closed'
);

-- Payment status
CREATE TYPE payment_status AS ENUM (
    'pending',
    'paid',
    'partial',
    'overdue',
    'canceled'
);

-- Attendance status
CREATE TYPE attendance_status AS ENUM (
    'present',
    'absent',
    'sick',
    'permission',
    'late'
);

-- CCTV request status
CREATE TYPE cctv_request_status AS ENUM (
    'pending',
    'approved',
    'rejected',
    'expired'
);

-- Leave request status
CREATE TYPE leave_status AS ENUM (
    'pending',
    'approved',
    'rejected',
    'canceled'
);

-- =============================================
-- CORE TABLES
-- =============================================

-- Schools table (multi-tenant root)
CREATE TABLE schools (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    address TEXT,
    city VARCHAR(100),
    province VARCHAR(100),
    postal_code VARCHAR(10),
    phone VARCHAR(20),
    email VARCHAR(255),
    website VARCHAR(255),
    logo_url TEXT,
    
    -- Subscription info
    subscription_plan subscription_plan DEFAULT 'trial',
    subscription_status subscription_status DEFAULT 'trial',
    subscription_started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    subscription_ends_at TIMESTAMP WITH TIME ZONE,
    trial_ends_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() + INTERVAL '30 days'),
    
    -- Limits based on plan
    student_limit INTEGER DEFAULT 50,
    storage_limit_gb INTEGER DEFAULT 10,
    sms_credits INTEGER DEFAULT 100,
    
    -- Settings
    settings JSONB DEFAULT '{}',
    features JSONB DEFAULT '{"cctv": true, "incident_reporting": true, "financial": true}',
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT valid_email CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Users table (from Supabase Auth, extended with profiles)
CREATE TABLE users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
    email VARCHAR(255) UNIQUE NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    role user_role NOT NULL,
    avatar_url TEXT,
    
    -- Role-specific IDs
    teacher_id UUID,
    parent_id UUID,
    student_id UUID,
    
    -- Status
    is_active BOOLEAN DEFAULT true,
    last_login_at TIMESTAMP WITH TIME ZONE,
    
    -- Metadata
    invited_by UUID REFERENCES users(id),
    invited_at TIMESTAMP WITH TIME ZONE,
    activated_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT valid_role_id CHECK (
        (role = 'teacher' AND teacher_id IS NOT NULL) OR
        (role = 'parent' AND parent_id IS NOT NULL) OR
        (role = 'student' AND student_id IS NOT NULL) OR
        (role IN ('super_admin', 'school_owner', 'management'))
    )
);

-- Create indexes for users
CREATE INDEX idx_users_school_id ON users(school_id);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_email ON users(email);

-- =============================================
-- USER ROLE SPECIFIC TABLES
-- =============================================

-- Teachers table
CREATE TABLE teachers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    employee_id VARCHAR(50),
    
    -- Academic info
    subjects TEXT[],
    is_homeroom_teacher BOOLEAN DEFAULT false,
    homeroom_class_id UUID,
    is_dorm_supervisor BOOLEAN DEFAULT false,
    supervised_dorm_id UUID,
    
    -- Status
    join_date DATE,
    resign_date DATE,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Students table
CREATE TABLE students (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_id VARCHAR(50) UNIQUE NOT NULL,
    
    -- Personal info
    full_name VARCHAR(255) NOT NULL,
    nickname VARCHAR(100),
    birth_date DATE NOT NULL,
    birth_place VARCHAR(100),
    gender VARCHAR(10) CHECK (gender IN ('male', 'female')),
    blood_type VARCHAR(5),
    
    -- Academic info
    class_id UUID,
    enrollment_date DATE NOT NULL,
    graduation_date DATE,
    
    -- Boarding info
    dorm_id UUID,
    room_number VARCHAR(20),
    bed_number VARCHAR(10),
    
    -- Family info (linked to parents)
    father_id UUID REFERENCES parents(id),
    mother_id UUID REFERENCES parents(id),
    guardian_id UUID REFERENCES parents(id),
    
    -- Health info
    health_conditions TEXT,
    allergies TEXT,
    medications TEXT,
    
    -- Status
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'graduated', 'dropped_out')),
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Parents table
CREATE TABLE parents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    
    -- Personal info
    full_name VARCHAR(255) NOT NULL,
    relationship VARCHAR(50) CHECK (relationship IN ('father', 'mother', 'guardian', 'other')),
    occupation VARCHAR(100),
    company VARCHAR(100),
    
    -- Contact info
    phone_primary VARCHAR(20) NOT NULL,
    phone_secondary VARCHAR(20),
    email VARCHAR(255),
    address TEXT,
    city VARCHAR(100),
    
    -- Emergency contact
    is_emergency_contact BOOLEAN DEFAULT false,
    emergency_priority INTEGER DEFAULT 0,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Student-Parent relationship (many-to-many)
CREATE TABLE student_parents (
    student_id UUID REFERENCES students(id) ON DELETE CASCADE,
    parent_id UUID REFERENCES parents(id) ON DELETE CASCADE,
    relationship VARCHAR(50),
    is_primary_contact BOOLEAN DEFAULT false,
    
    PRIMARY KEY (student_id, parent_id)
);

-- =============================================
-- ACADEMIC TABLES
-- =============================================

-- Academic years
CREATE TABLE academic_years (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    name VARCHAR(50) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    is_active BOOLEAN DEFAULT false,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT one_active_year_per_school UNIQUE (school_id, is_active) WHERE is_active = true
);

-- Classes
CREATE TABLE classes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    academic_year_id UUID REFERENCES academic_years(id) ON DELETE CASCADE,
    name VARCHAR(50) NOT NULL,
    grade_level INTEGER NOT NULL CHECK (grade_level BETWEEN 1 AND 12),
    homeroom_teacher_id UUID REFERENCES teachers(id),
    capacity INTEGER DEFAULT 30,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Subjects
CREATE TABLE subjects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    code VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    credit_hours INTEGER DEFAULT 2,
    is_mandatory BOOLEAN DEFAULT true,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Class subjects (which subjects are taught in which class)
CREATE TABLE class_subjects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    subject_id UUID REFERENCES subjects(id) ON DELETE CASCADE,
    teacher_id UUID REFERENCES teachers(id),
    schedule JSONB, -- Store weekly schedule
    
    UNIQUE(class_id, subject_id)
);

-- Grades
CREATE TABLE grades (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    subject_id UUID NOT NULL REFERENCES subjects(id) ON DELETE CASCADE,
    academic_year_id UUID NOT NULL REFERENCES academic_years(id),
    
    -- Grade details
    semester INTEGER CHECK (semester IN (1, 2)),
    midterm_score DECIMAL(5,2),
    final_score DECIMAL(5,2),
    assignment_score DECIMAL(5,2),
    attendance_score DECIMAL(5,2),
    total_score DECIMAL(5,2),
    grade_letter VARCHAR(2),
    
    -- Teacher who input the grade
    graded_by UUID REFERENCES teachers(id),
    graded_at TIMESTAMP WITH TIME ZONE,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT valid_scores CHECK (
        midterm_score BETWEEN 0 AND 100 AND
        final_score BETWEEN 0 AND 100 AND
        assignment_score BETWEEN 0 AND 100 AND
        attendance_score BETWEEN 0 AND 100 AND
        total_score BETWEEN 0 AND 100
    )
);

-- Attendance
CREATE TABLE attendance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    class_id UUID NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    status attendance_status NOT NULL,
    check_in_time TIME,
    check_out_time TIME,
    notes TEXT,
    
    -- Who marked the attendance
    marked_by UUID REFERENCES users(id),
    marked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(student_id, date)
);

-- =============================================
-- BOARDING/DORMITORY TABLES
-- =============================================

-- Dormitories
CREATE TABLE dormitories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    type VARCHAR(20) CHECK (type IN ('male', 'female')),
    capacity INTEGER NOT NULL,
    supervisor_id UUID REFERENCES teachers(id),
    
    -- Facilities
    facilities JSONB DEFAULT '{}',
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Leave requests
CREATE TABLE leave_requests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    
    -- Request details
    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
    reason TEXT NOT NULL,
    destination VARCHAR(255),
    contact_during_leave VARCHAR(20),
    
    -- Approval workflow
    status leave_status DEFAULT 'pending',
    requested_by UUID REFERENCES users(id),
    requested_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    approved_by UUID REFERENCES users(id),
    approved_at TIMESTAMP WITH TIME ZONE,
    rejection_reason TEXT,
    
    -- Parent confirmation
    parent_confirmed BOOLEAN DEFAULT false,
    parent_confirmed_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- INCIDENT & SAFETY TABLES
-- =============================================

-- Incidents
CREATE TABLE incidents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    incident_number VARCHAR(50) UNIQUE NOT NULL,
    
    -- Incident details
    type incident_type NOT NULL,
    priority incident_priority DEFAULT 'medium',
    status incident_status DEFAULT 'new',
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    location VARCHAR(255),
    incident_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- People involved
    reported_by UUID REFERENCES users(id),
    is_anonymous BOOLEAN DEFAULT false,
    students_involved UUID[],
    
    -- Assignment and resolution
    assigned_to UUID REFERENCES users(id),
    assigned_at TIMESTAMP WITH TIME ZONE,
    resolved_by UUID REFERENCES users(id),
    resolved_at TIMESTAMP WITH TIME ZONE,
    resolution_notes TEXT,
    
    -- Evidence
    evidence_urls TEXT[],
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Incident logs (audit trail)
CREATE TABLE incident_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    incident_id UUID REFERENCES incidents(id) ON DELETE CASCADE,
    action VARCHAR(100) NOT NULL,
    description TEXT,
    performed_by UUID REFERENCES users(id),
    performed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- CCTV cameras
CREATE TABLE cctv_cameras (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    location VARCHAR(255) NOT NULL,
    stream_url TEXT,
    is_active BOOLEAN DEFAULT true,
    is_public_area BOOLEAN DEFAULT true,
    retention_days INTEGER DEFAULT 30,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- CCTV access requests
CREATE TABLE cctv_access_requests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    request_number VARCHAR(50) UNIQUE NOT NULL,
    
    -- Request details
    requested_by UUID REFERENCES users(id) NOT NULL,
    student_id UUID REFERENCES students(id) NOT NULL,
    camera_id UUID REFERENCES cctv_cameras(id) NOT NULL,
    requested_date_time TIMESTAMP WITH TIME ZONE NOT NULL,
    duration_minutes INTEGER DEFAULT 30 CHECK (duration_minutes <= 30),
    reason TEXT NOT NULL,
    
    -- Approval workflow
    status cctv_request_status DEFAULT 'pending',
    reviewed_by UUID REFERENCES users(id),
    reviewed_at TIMESTAMP WITH TIME ZONE,
    rejection_reason TEXT,
    
    -- Access details
    access_token VARCHAR(255) UNIQUE,
    access_expires_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- CCTV access logs
CREATE TABLE cctv_access_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    request_id UUID REFERENCES cctv_access_requests(id),
    accessed_by UUID REFERENCES users(id) NOT NULL,
    camera_id UUID REFERENCES cctv_cameras(id) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    ip_address INET,
    user_agent TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- FINANCIAL TABLES
-- =============================================

-- Fee types
CREATE TABLE fee_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    code VARCHAR(20) UNIQUE NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    frequency VARCHAR(20) CHECK (frequency IN ('monthly', 'quarterly', 'semester', 'yearly', 'one_time')),
    is_mandatory BOOLEAN DEFAULT true,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Student fees (bills)
CREATE TABLE student_fees (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    fee_type_id UUID NOT NULL REFERENCES fee_types(id),
    academic_year_id UUID NOT NULL REFERENCES academic_years(id),
    
    -- Billing details
    amount DECIMAL(12,2) NOT NULL,
    due_date DATE NOT NULL,
    status payment_status DEFAULT 'pending',
    
    -- Payment tracking
    paid_amount DECIMAL(12,2) DEFAULT 0,
    paid_date DATE,
    payment_method VARCHAR(50),
    transaction_reference VARCHAR(100),
    
    -- Late fees
    late_fee_amount DECIMAL(12,2) DEFAULT 0,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Payment transactions
CREATE TABLE payment_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    student_fee_id UUID REFERENCES student_fees(id),
    
    -- Transaction details
    transaction_number VARCHAR(50) UNIQUE NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    
    -- Payment gateway info
    gateway_name VARCHAR(50),
    gateway_transaction_id VARCHAR(100),
    gateway_response JSONB,
    
    -- Who processed
    processed_by UUID REFERENCES users(id),
    processed_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- COMMUNICATION TABLES
-- =============================================

-- Announcements
CREATE TABLE announcements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    
    -- Announcement details
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    
    -- Target audience
    target_roles user_role[],
    target_classes UUID[],
    target_users UUID[],
    
    -- Scheduling
    publish_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expire_at TIMESTAMP WITH TIME ZONE,
    
    -- Who created
    created_by UUID REFERENCES users(id) NOT NULL,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Messages (direct messages between users)
CREATE TABLE messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    
    -- Message details
    sender_id UUID REFERENCES users(id) NOT NULL,
    recipient_id UUID REFERENCES users(id) NOT NULL,
    subject VARCHAR(255),
    content TEXT NOT NULL,
    
    -- Status
    is_read BOOLEAN DEFAULT false,
    read_at TIMESTAMP WITH TIME ZONE,
    
    -- Parent message for threading
    parent_message_id UUID REFERENCES messages(id),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- SYSTEM TABLES
-- =============================================

-- Audit logs (track all important actions)
CREATE TABLE audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
    
    -- Who did what
    user_id UUID REFERENCES users(id),
    action VARCHAR(100) NOT NULL,
    entity_type VARCHAR(50),
    entity_id UUID,
    
    -- Details
    old_values JSONB,
    new_values JSONB,
    ip_address INET,
    user_agent TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Notifications
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) NOT NULL,
    
    -- Notification details
    type VARCHAR(50) NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    action_url TEXT,
    
    -- Status
    is_read BOOLEAN DEFAULT false,
    read_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- File uploads
CREATE TABLE file_uploads (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    
    -- File details
    filename VARCHAR(255) NOT NULL,
    file_url TEXT NOT NULL,
    file_size INTEGER,
    mime_type VARCHAR(100),
    
    -- Context
    entity_type VARCHAR(50),
    entity_id UUID,
    
    -- Who uploaded
    uploaded_by UUID REFERENCES users(id) NOT NULL,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- School-based indexes (for multi-tenancy)
CREATE INDEX idx_teachers_school_id ON teachers(school_id);
CREATE INDEX idx_students_school_id ON students(school_id);
CREATE INDEX idx_parents_school_id ON parents(school_id);
CREATE INDEX idx_classes_school_id ON classes(school_id);
CREATE INDEX idx_incidents_school_id ON incidents(school_id);
CREATE INDEX idx_attendance_school_date ON attendance(school_id, date);
CREATE INDEX idx_student_fees_school_status ON student_fees(school_id, status);

-- Lookup indexes
CREATE INDEX idx_students_class_id ON students(class_id);
CREATE INDEX idx_students_dorm_id ON students(dorm_id);
CREATE INDEX idx_attendance_student_date ON attendance(student_id, date);
CREATE INDEX idx_grades_student_subject ON grades(student_id, subject_id);
CREATE INDEX idx_incidents_status ON incidents(status);
CREATE INDEX idx_incidents_assigned_to ON incidents(assigned_to);
CREATE INDEX idx_leave_requests_student_status ON leave_requests(student_id, status);
CREATE INDEX idx_cctv_requests_status ON cctv_access_requests(status);
CREATE INDEX idx_messages_recipient ON messages(recipient_id, is_read);
CREATE INDEX idx_notifications_user_unread ON notifications(user_id, is_read);

-- =============================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =============================================

-- Enable RLS on all tables
ALTER TABLE schools ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE teachers ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE parents ENABLE ROW LEVEL SECURITY;
ALTER TABLE classes ENABLE ROW LEVEL SECURITY;
ALTER TABLE attendance ENABLE ROW LEVEL SECURITY;
ALTER TABLE grades ENABLE ROW LEVEL SECURITY;
ALTER TABLE incidents ENABLE ROW LEVEL SECURITY;
ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- Example RLS policies (basic examples, expand based on requirements)

-- Users can only see users from their school
CREATE POLICY "Users can see their school users" ON users
    FOR SELECT
    USING (school_id = (SELECT school_id FROM users WHERE id = auth.uid()));

-- Teachers can see their class students
CREATE POLICY "Teachers can see their students" ON students
    FOR SELECT
    USING (
        school_id = (SELECT school_id FROM users WHERE id = auth.uid()) AND
        (
            class_id IN (SELECT class_id FROM classes WHERE homeroom_teacher_id = (SELECT teacher_id FROM users WHERE id = auth.uid()))
            OR
            id IN (SELECT student_id FROM attendance WHERE marked_by = auth.uid())
        )
    );

-- Parents can only see their children
CREATE POLICY "Parents can see their children" ON students
    FOR SELECT
    USING (
        id IN (
            SELECT student_id FROM student_parents 
            WHERE parent_id = (SELECT parent_id FROM users WHERE id = auth.uid())
        )
    );

-- Students can only see their own data
CREATE POLICY "Students can see own data" ON students
    FOR SELECT
    USING (user_id = auth.uid());

-- =============================================
-- FUNCTIONS AND TRIGGERS
-- =============================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at trigger to all tables with updated_at column
CREATE TRIGGER update_schools_updated_at BEFORE UPDATE ON schools
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_teachers_updated_at BEFORE UPDATE ON teachers
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_students_updated_at BEFORE UPDATE ON students
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_classes_updated_at BEFORE UPDATE ON classes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to generate incident number
CREATE OR REPLACE FUNCTION generate_incident_number()
RETURNS TRIGGER AS $$
BEGIN
    NEW.incident_number = 'INC-' || EXTRACT(YEAR FROM NOW()) || '-' || LPAD(NEXTVAL('incident_number_seq')::TEXT, 5, '0');
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create sequence for incident numbers
CREATE SEQUENCE incident_number_seq;

-- Trigger for incident number generation
CREATE TRIGGER generate_incident_number_trigger BEFORE INSERT ON incidents
    FOR EACH ROW EXECUTE FUNCTION generate_incident_number();

-- Function to check student limit based on subscription
CREATE OR REPLACE FUNCTION check_student_limit()
RETURNS TRIGGER AS $$
DECLARE
    current_count INTEGER;
    limit_count INTEGER;
BEGIN
    SELECT COUNT(*), MAX(s.student_limit)
    INTO current_count, limit_count
    FROM students st
    JOIN schools s ON st.school_id = s.id
    WHERE st.school_id = NEW.school_id
    GROUP BY st.school_id;
    
    IF current_count >= limit_count THEN
        RAISE EXCEPTION 'Student limit reached for this subscription plan';
    END IF;
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to check student limit
CREATE TRIGGER check_student_limit_trigger BEFORE INSERT ON students
    FOR EACH ROW EXECUTE FUNCTION check_student_limit();

-- =============================================
-- INITIAL DATA
-- =============================================

-- Insert default subjects
INSERT INTO subjects (school_id, code, name, description, credit_hours, is_mandatory) VALUES
(NULL, 'MTK', 'Matematika', 'Mathematics', 4, true),
(NULL, 'BIN', 'Bahasa Indonesia', 'Indonesian Language', 4, true),
(NULL, 'ENG', 'Bahasa Inggris', 'English Language', 4, true),
(NULL, 'IPA', 'Ilmu Pengetahuan Alam', 'Natural Sciences', 4, true),
(NULL, 'IPS', 'Ilmu Pengetahuan Sosial', 'Social Sciences', 3, true),
(NULL, 'AGM', 'Pendidikan Agama Islam', 'Islamic Studies', 4, true),
(NULL, 'QRN', 'Al-Quran dan Hadits', 'Quran and Hadith Studies', 3, true),
(NULL, 'ARB', 'Bahasa Arab', 'Arabic Language', 3, true);

-- =============================================
-- END OF SCHEMA
-- =============================================
</file>

<file path="docs/implementation-plan/login-screend-draft.md">
import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Animated,
  Dimensions,
  TouchableOpacity,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuthStore } from '../../store/authStore';
import { router } from 'expo-router';
import { Button, ButtonText } from '../ui/button';
import { Input, InputField } from '../ui/input';
import { Card } from '../ui/card';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { Ionicons } from '@expo/vector-icons';

const { width, height } = Dimensions.get('window');

interface LoginScreenProps {
  onNavigateToSignUp?: () => void;
  onNavigateToForgotPassword?: () => void;
}

export default function LoginScreen({
  onNavigateToSignUp,
  onNavigateToForgotPassword
}: LoginScreenProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [focusedField, setFocusedField] = useState<string | null>(null);

  const { signIn, loading, error, clearError } = useAuthStore();

  // Animation values
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const scaleAnim = useRef(new Animated.Value(0.9)).current;
  const floatAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // Entry animations
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.spring(slideAnim, {
        toValue: 0,
        tension: 20,
        friction: 7,
        useNativeDriver: true,
      }),
      Animated.spring(scaleAnim, {
        toValue: 1,
        tension: 20,
        friction: 7,
        useNativeDriver: true,
      }),
    ]).start();

    // Floating animation for decorative elements
    Animated.loop(
      Animated.sequence([
        Animated.timing(floatAnim, {
          toValue: -10,
          duration: 2000,
          useNativeDriver: true,
        }),
        Animated.timing(floatAnim, {
          toValue: 0,
          duration: 2000,
          useNativeDriver: true,
        }),
      ])
    ).start();
  }, []);

  const handleLogin = async () => {
    if (!email.trim() || !password.trim()) {
      Alert.alert('Error', 'Mohon isi email dan password');
      return;
    }

    const result = await signIn(email.trim().toLowerCase(), password);

    if (result.success) {
      // Success animation before navigation
      Animated.timing(scaleAnim, {
        toValue: 0.95,
        duration: 200,
        useNativeDriver: true,
      }).start(() => {
        router.replace('/(drawer)');
      });
    } else {
      // Error shake animation
      Animated.sequence([
        Animated.timing(slideAnim, { toValue: 10, duration: 50, useNativeDriver: true }),
        Animated.timing(slideAnim, { toValue: -10, duration: 50, useNativeDriver: true }),
        Animated.timing(slideAnim, { toValue: 10, duration: 50, useNativeDriver: true }),
        Animated.timing(slideAnim, { toValue: 0, duration: 50, useNativeDriver: true }),
      ]).start();
      
      Alert.alert('Login Gagal', result.error || 'Terjadi kesalahan saat login');
    }
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const isFormValid = email.trim() && password.trim() && validateEmail(email);

  React.useEffect(() => {
    if (error) {
      Alert.alert('Error', error);
      clearError();
    }
  }, [error, clearError]);

  return (
    <View className="flex-1 bg-white">
      <LinearGradient
        colors={['#667eea', '#764ba2', '#f093fb']}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
        style={{ position: 'absolute', width, height }}
      />
      
      {/* Animated Background Elements */}
      <Animated.View
        style={{
          position: 'absolute',
          top: -100,
          right: -50,
          width: 200,
          height: 200,
          borderRadius: 100,
          backgroundColor: 'rgba(255, 255, 255, 0.1)',
          transform: [{ translateY: floatAnim }],
        }}
      />
      <Animated.View
        style={{
          position: 'absolute',
          bottom: -80,
          left: -80,
          width: 250,
          height: 250,
          borderRadius: 125,
          backgroundColor: 'rgba(255, 255, 255, 0.08)',
          transform: [{ translateY: floatAnim }],
        }}
      />

      <SafeAreaView className="flex-1">
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          className="flex-1"
        >
          <ScrollView
            contentContainerStyle={{ flexGrow: 1, justifyContent: 'center', padding: 24 }}
            keyboardShouldPersistTaps="handled"
            showsVerticalScrollIndicator={false}
          >
            <Animated.View
              style={{
                opacity: fadeAnim,
                transform: [
                  { translateY: slideAnim },
                  { scale: scaleAnim }
                ],
              }}
            >
              {/* Logo Section */}
              <View className="items-center mb-8">
                <View className="w-28 h-28 bg-white/20 rounded-full items-center justify-center mb-4 backdrop-blur-lg">
                  <Ionicons name="school" size={50} color="white" />
                </View>
                <Text className="text-3xl font-bold text-white mb-2">SchoolSync</Text>
                <Text className="text-white/80 text-center">
                  Sistem Manajemen Pesantren Digital
                </Text>
              </View>

              {/* Login Card */}
              <BlurView intensity={30} tint="light" className="rounded-3xl overflow-hidden">
                <View className="bg-white/10 p-8">
                  <Text className="text-2xl font-bold text-white mb-8 text-center">
                    Masuk ke Akun Anda
                  </Text>

                  {/* Email Input */}
                  <View className="mb-6">
                    <Text className="text-white/90 text-sm font-medium mb-2 ml-1">
                      Email
                    </Text>
                    <View className={`bg-white/20 rounded-2xl border ${
                      focusedField === 'email' ? 'border-white/50' : 'border-white/20'
                    }`}>
                      <View className="flex-row items-center px-4">
                        <Ionicons 
                          name="mail-outline" 
                          size={20} 
                          color="rgba(255,255,255,0.7)" 
                        />
                        <InputField
                          className="flex-1 py-4 px-3 text-white placeholder:text-white/50"
                          placeholder="nama@email.com"
                          value={email}
                          onChangeText={setEmail}
                          keyboardType="email-address"
                          autoCapitalize="none"
                          autoCorrect={false}
                          onFocus={() => setFocusedField('email')}
                          onBlur={() => setFocusedField(null)}
                        />
                      </View>
                    </View>
                    {email && !validateEmail(email) && (
                      <Text className="text-red-300 text-xs mt-2 ml-1">
                        Format email tidak valid
                      </Text>
                    )}
                  </View>

                  {/* Password Input */}
                  <View className="mb-8">
                    <Text className="text-white/90 text-sm font-medium mb-2 ml-1">
                      Password
                    </Text>
                    <View className={`bg-white/20 rounded-2xl border ${
                      focusedField === 'password' ? 'border-white/50' : 'border-white/20'
                    }`}>
                      <View className="flex-row items-center px-4">
                        <Ionicons 
                          name="lock-closed-outline" 
                          size={20} 
                          color="rgba(255,255,255,0.7)" 
                        />
                        <InputField
                          className="flex-1 py-4 px-3 text-white placeholder:text-white/50"
                          placeholder="Masukkan password"
                          value={password}
                          onChangeText={setPassword}
                          secureTextEntry={!showPassword}
                          autoCapitalize="none"
                          autoCorrect={false}
                          onFocus={() => setFocusedField('password')}
                          onBlur={() => setFocusedField(null)}
                        />
                        <TouchableOpacity
                          onPress={() => setShowPassword(!showPassword)}
                          className="p-2"
                        >
                          <Ionicons
                            name={showPassword ? "eye-off-outline" : "eye-outline"}
                            size={20}
                            color="rgba(255,255,255,0.7)"
                          />
                        </TouchableOpacity>
                      </View>
                    </View>
                  </View>

                  {/* Forgot Password Link */}
                  <TouchableOpacity
                    onPress={onNavigateToForgotPassword}
                    className="mb-8 self-end"
                  >
                    <Text className="text-white/80 text-sm">
                      Lupa Password?
                    </Text>
                  </TouchableOpacity>

                  {/* Login Button */}
                  <TouchableOpacity
                    onPress={handleLogin}
                    disabled={!isFormValid || loading}
                    className={`py-4 rounded-2xl ${
                      isFormValid && !loading 
                        ? 'bg-white' 
                        : 'bg-white/50'
                    }`}
                    activeOpacity={0.8}
                  >
                    <Text className={`text-center font-semibold text-lg ${
                      isFormValid && !loading 
                        ? 'text-purple-600' 
                        : 'text-purple-400'
                    }`}>
                      {loading ? 'Memproses...' : 'Masuk'}
                    </Text>
                  </TouchableOpacity>

                  {/* Divider */}
                  <View className="flex-row items-center my-8">
                    <View className="flex-1 h-px bg-white/20" />
                    <Text className="mx-4 text-white/60 text-sm">atau</Text>
                    <View className="flex-1 h-px bg-white/20" />
                  </View>

                  {/* Sign Up Link */}
                  <View className="flex-row justify-center items-center">
                    <Text className="text-white/80">Belum punya akun? </Text>
                    <TouchableOpacity onPress={onNavigateToSignUp}>
                      <Text className="text-white font-semibold">
                        Daftar Sekarang
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </BlurView>

              {/* Bottom decorative text */}
              <Text className="text-white/60 text-xs text-center mt-8">
                Dengan masuk, Anda menyetujui Syarat & Ketentuan kami
              </Text>
            </Animated.View>
          </ScrollView>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </View>
  );
}
</file>

<file path="docs/implementation-plan/remove-drawer-navigation.md">
# Implementation Plan: Remove Drawer Navigation

## Background and Motivation

The user has requested to remove the drawer navigation currently used in the management screen. The primary motivation is to adopt a navigation pattern more suitable for mobile applications, as drawers can sometimes feel less intuitive or take up too much screen real estate on smaller devices.

## Branch Name

`feature/remove-drawer-nav`

## Key Challenges and Analysis

1.  **Identifying Drawer Implementation:** Locating all components, configuration, and routes associated with the current drawer navigation.
2.  **Alternative Navigation:** Deciding on and implementing a suitable replacement navigation pattern (e.g., tabs, stack navigation, a dedicated menu screen) if the drawer's functionality needs to be preserved.
3.  **Route Management:** Ensuring all screens previously accessible via the drawer are still reachable through the new navigation structure.
4.  **UI/UX Impact:** Maintaining a good user experience during and after the transition.
5.  **Code Refactoring:** Modifying existing layout files, navigation components, and potentially screen-level code that interacts with the drawer.

## High-level Task Breakdown

### Phase 1: Analysis and Planning
- [x] Create Feature Branch
- [x] Analyze Current Drawer Implementation
- [x] Choose Replacement Navigation Pattern (Custom Menu Screen)
- [ ] Plan Migration Strategy

### Phase 2: Implementation
- [ ] Create Custom Menu/Dashboard Screen
- [ ] Remove Drawer Layout Structure
- [ ] Update App Routing Configuration
- [ ] Migrate Existing Screens to New Structure
- [ ] Style Menu Screen with Navigation Cards

### Phase 3: Testing and Cleanup
- [ ] Test Navigation Flow
- [ ] Manual Testing on Mobile
- [ ] Code Cleanup
- [ ] Documentation Update

## Project Status Board

### Current Status / Progress Tracking
- [x] **Create Feature Branch** - COMPLETED
  - Successfully created `feature/remove-drawer-nav` branch from `master`
- [x] **Analyze Current Drawer Implementation** - COMPLETED
  - Analyzed drawer structure in `app/(drawer)/`
  - Identified key components and navigation hierarchy
  - Documented findings in implementation plan
- [x] **Choose Replacement Navigation Pattern** - COMPLETED
  - User selected Custom Menu Screen approach
  - Will create dedicated dashboard with navigation cards
- [x] **Plan Migration Strategy** - COMPLETED
  - Defined new app structure without drawer
  - Planned screen reorganization from `(drawer)` to root level
  - Designed menu screen layout and navigation flow
- [x] **Create Custom Menu/Dashboard Screen** - COMPLETED
  - Created `app/dashboard.tsx` with navigation cards
  - Implemented mobile-optimized layout with touch-friendly cards
  - Added navigation to tabs and other sections
  - Migrated dashboard content from drawer structure
- [x] **Remove Drawer Layout Structure** - COMPLETED
  - Deleted entire `(drawer)` directory structure
  - Removed drawer references from main app layout
- [x] **Update App Routing Configuration** - COMPLETED
  - Updated `app/_layout.tsx` to include dashboard and tabs routes
  - Removed drawer route configuration
- [x] **Migrate Existing Screens to New Structure** - COMPLETED
  - Moved tabs from `(drawer)/(tabs)` to root level `(tabs)`
  - Updated all navigation redirects from drawer to dashboard
  - Fixed auth flow redirects in login, onboarding, and auth index
- [ ] **Test Navigation Flow** - IN PROGRESS
  - Started development server to test changes
  - Need to verify all navigation works correctly
- [ ] Integrate and Test New Navigation
- [ ] Code Cleanup and Refinement
- [ ] Review and Merge

## Executor's Feedback or Assistance Requests

### Progress Update - Custom Menu Screen Implementation

**Completed Tasks:**
1. ✅ **Created Custom Dashboard Screen** - Successfully created `app/dashboard.tsx` with:
   - Mobile-optimized navigation cards with icons and descriptions
   - Preserved existing dashboard statistics (santri count, ustadz count)
   - Touch-friendly card interface with visual feedback
   - Navigation to tabs and placeholder actions for future features

2. ✅ **Restructured App Navigation** - Completely removed drawer architecture:
   - Deleted entire `(drawer)` directory structure
   - Updated main `app/_layout.tsx` to use Stack navigation with dashboard and tabs
   - Moved tabs from nested drawer structure to root level

3. ✅ **Updated All Navigation References** - Fixed all redirects:
   - Auth flow now redirects to `/dashboard` instead of `/(drawer)`
   - Login screen redirects updated
   - Onboarding completion redirects updated
   - Auth index redirects updated

**Current Status:**
- Development server is starting (Metro bundler initializing)
- Ready for navigation flow testing

**Next Steps Needed:**
1. Verify the app loads without errors
2. Test navigation from dashboard to tabs
3. Test auth flow redirects work correctly
4. Confirm mobile-friendly interface on device/simulator

**Request for User:**
Once the development server is fully running, please test the navigation flow manually to ensure:
- Dashboard loads correctly after authentication
- Navigation cards are touch-friendly and responsive
- Tab navigation works from dashboard
- No broken routes or missing screens

## Migration Strategy

### New App Structure
The new structure will eliminate the drawer and reorganize screens as follows:

**Current Structure:**
```
app/
├── _layout.tsx (Stack with auth, (drawer), modal)
├── (drawer)/
│   ├── _layout.tsx (Drawer with index, (tabs))
│   ├── index.tsx (Dashboard)
│   └── (tabs)/
│       ├── _layout.tsx (Tabs with index, two)
│       ├── index.tsx (Tab One)
│       └── two.tsx (Tab Two)
```

**New Structure:**
```
app/
├── _layout.tsx (Stack with auth, dashboard, tabs, modal)
├── dashboard.tsx (New custom menu screen)
├── (tabs)/
│   ├── _layout.tsx (Tabs with index, two)
│   ├── index.tsx (Tab One)
│   └── two.tsx (Tab Two)
```

### Migration Steps
1. **Create Custom Menu Screen** (`app/dashboard.tsx`)
   - Design with navigation cards for different sections
   - Include quick access to main features
   - Mobile-optimized layout with touch-friendly buttons

2. **Restructure App Layout**
   - Remove `(drawer)` directory structure
   - Move `(tabs)` to root level
   - Update main `_layout.tsx` to include new routes

3. **Update Navigation Flow**
   - Dashboard becomes the main landing screen after auth
   - Navigation cards link to specific screens/sections
   - Maintain tab navigation for related screens

4. **Screen Content Migration**
   - Move dashboard content from `(drawer)/index.tsx` to new `dashboard.tsx`
   - Preserve existing tab functionality
   - Ensure all screens remain accessible

### Design Considerations
- **Mobile-First**: Large, touch-friendly navigation cards
- **Visual Hierarchy**: Clear sections with icons and descriptions
- **Quick Access**: Most-used features prominently displayed
- **Consistent Styling**: Match existing app design system

## Lessons Learned

*(Initially empty)*
</file>

<file path="docs/implementation-plan/supabase-auth-database.md">
# Supabase Auth Database Sync

## Background and Motivation
The app can successfully sign-up users and these users appear in the **Auth → Users** section of the Supabase dashboard.
However, when looking at **Database → Tables**, the user cannot see any schema or table that relates to these accounts.
This is confusing and blocks any future work that requires a user-profile table (e.g., storing display names, avatars, roles, etc.).

Supabase automatically stores authentication records in the `auth` schema, while the **Database** screen defaults to the `public` schema.
We need to (a) verify that the default `auth` tables are present, (b) decide what additional tables we want (usually a `profiles` table in `public`), and (c) create them via migration so they show up in the dashboard and can be queried from the app.

## Key Challenges and Analysis
* New Supabase users often overlook that the **auth** schema is separate from **public**.
* The dashboard UI hides other schemas unless explicitly selected.
* We must design the extra user-profile table: minimal fields, FK to `auth.users`, RLS policy.
* Ensure migrations are idempotent and committed to source control.
* Coordinate Expo (React Native) client to upsert profile data after sign-up.

## High-level Task Breakdown
- [ ] **T1 – Verify existing `auth` schema**
  • Open Supabase → Database → **auth** schema and confirm `users`, `refresh_tokens`, etc. exist.
  • Success = `auth.users` table visible.
- [x] **T2 – Clarify required user-profile fields**
  • Based on the schema draft, we'll use the `users` table design from line 144.
  • Fields: id (UUID, PK, refs auth.users), school_id, email, full_name, phone, role (user_role enum), avatar_url, teacher_id, parent_id, student_id, is_active, last_login_at, invited_by, invited_at, activated_at, created_at, updated_at.
  • Success = Fields confirmed from schema draft.
- [x] **T3 – Create migration for `public.users` table**
  • Created tables: `schools`, `users` (profile table), and `user_role` enum type.
  • Enabled RLS with policies for users to manage their own profiles and admins to manage school users.
  • Success = Tables appear under `public`, migrations applied.
- [x] **T4 – Seed/Back-fill existing users into `users` table**
  • Created migration to insert rows for all existing auth users.
  • Added trigger to automatically create profile for new signups.
  • Success = All auth users have corresponding entries in the `public.users` table.
- [x] **T5 – Update client code to upsert profile after registration / sign-in**
  • Updated the `signUp` function in `authStore.ts` to call `loadUserProfile()` after successful registration.
  • This ensures the client loads the profile created by our database trigger.
  • Success = Client code now properly handles profile loading after registration.
- [x] **T6 – Smoke test end-to-end**
  • Verified existing users in `auth.users` have corresponding entries in `public.users`.
  • Confirmed RLS policies are correctly applied to the `users` table.
  • Success = Both tables populated, RLS enforced.
- [x] **T7 – Documentation & Lessons Learned**
  • Updated `docs/LESSONS_LEARNED.md` with detailed information about Supabase auth schema and user profiles.
  • Added best practices for implementing user profiles with Supabase auth.
  • Success = Documentation updated for future reference.

## Project Status Board
- [x] T1 – Verify `auth` schema (Executor) - Completed on 2025-06-02
- [x] T2 – Clarify fields (Executor) - Completed on 2025-06-02
- [x] T3 – Migration created (Executor) - Completed on 2025-06-02
- [x] T4 – Seed existing users (Executor) - Completed on 2025-06-02
- [x] T5 – Update client code (Executor) - Completed on 2025-06-02
- [x] T6 – Smoke test (Executor) - Completed on 2025-06-02
- [x] T7 – Docs updated (Executor) - Completed on 2025-06-02

## Executor's Feedback or Assistance Requests

### Final Implementation Summary (2025-06-02)

All tasks have been successfully completed for the Supabase Auth Database Integration:

1. **Verified Auth Schema**: Confirmed that Supabase stores authentication users in the `auth` schema with tables like `auth.users`.

2. **Created User Profile Schema**: Implemented a `public.users` table that extends `auth.users` with profile fields as per the schema draft, including school_id, email, full_name, role, etc.

3. **Implemented RLS Policies**: Set up Row Level Security policies to ensure users can only access appropriate data:
   - Users can view/update their own profiles
   - Admins can view/update all users in their school
   - Teachers can view students in their school

4. **Created Database Trigger**: Implemented a trigger to automatically create a profile in `public.users` when a new user signs up in `auth.users`.

5. **Seeded Existing Users**: Migrated existing auth users into the `public.users` table.

6. **Updated Client Code**: Modified the `signUp` function in `authStore.ts` to load user profiles after registration.

7. **Smoke Tested**: Verified that existing users have profiles and RLS policies are working correctly.

8. **Updated Documentation**: Added detailed information about Supabase auth schema and user profiles to `docs/LESSONS_LEARNED.md`.

The implementation successfully bridges the gap between Supabase authentication and our application's user profile system, ensuring that all authenticated users have corresponding profile records with appropriate access controls.
T1 Complete: Verified that the `auth` schema exists in the SchoolSyncV2 project and contains 16 tables including the critical `users` table. This confirms that authentication is working correctly at the database level. The issue is that these tables are not visible in the default Database view because that view only shows the `public` schema by default.

T2-T4 Complete: Based on the schema draft, I've implemented the database structure following the design in lines 144-175. Created:
1. `user_role` enum type with roles like student, teacher, etc.
2. `schools` table as a foundation for multi-tenancy
3. `users` table that extends auth.users with profile information
4. RLS policies to ensure proper data access control
5. A trigger to automatically create profiles for new signups
6. Migration to seed existing auth users into the profiles table

Next steps: We need to update the client code to properly handle profile creation/updates during registration and login.

## Lessons Learned
_(populate as we progress)_
</file>

<file path="docs/prd_management_role">
# Product Requirements Document (PRD) - Part 1
# Aplikasi Pesantren - Management Role (B2B Subscription)

**Versi:** 2.0  
**Tanggal:** Mei 2025  
**Model:** B2B SaaS Subscription
**Bagian:** 1 dari 2

---

## Daftar Isi

1. [Ringkasan Eksekutif](#1-ringkasan-eksekutif)
2. [Model Bisnis B2B](#2-model-bisnis-b2b)
3. [Persona Pengguna](#3-persona-pengguna)
4. [Onboarding & Setup](#4-onboarding--setup)
5. [Dashboard Manajemen](#5-dashboard-manajemen)
6. [Manajemen Pengguna](#6-manajemen-pengguna)
7. [Fitur Operasional](#7-fitur-operasional)
8. [Subscription & Billing](#8-subscription--billing)
9. [Reporting & Analytics](#9-reporting--analytics)
10. [Mobile Experience](#10-mobile-experience)
11. [Komunikasi & Pengumuman](#11-komunikasi--pengumuman)
12. [Workflow Persetujuan](#12-workflow-persetujuan)
13. [Integrasi & API](#13-integrasi--api)
14. [Implementasi Timeline](#14-implementasi-timeline)
15. [Lampiran](#15-lampiran)

---

## 1. Ringkasan Eksekutif

### 1.1 Overview
Aplikasi Pesantren Digital adalah platform B2B SaaS yang dirancang khusus untuk modernisasi pesantren di Indonesia. Management (Kepala Sekolah/Pemilik Yayasan) adalah **primary account holder** yang mendaftar, membayar subscription, dan mengelola seluruh ekosistem digital pesantren.

### 1.2 Model Subscription
- **Hirarki Pengguna**: Management → Teachers → Students/Parents
- **Pricing**: Berdasarkan jumlah santri aktif
- **Billing**: Monthly/Annual dengan diskon
- **Onboarding**: Self-service dengan support

### 1.3 Value Proposition
- **Untuk Pesantren**: Digitalisasi operasional dengan ROI <6 bulan
- **Untuk Management**: Visibilitas real-time dan kontrol penuh
- **Untuk Guru**: Produktivitas meningkat 40%
- **Untuk Orang Tua**: Transparansi dan komunikasi lebih baik

### 1.4 Target Metrics
- Onboarding completion: <7 hari
- Teacher activation rate: >80%
- Monthly churn: <2%
- Customer Lifetime Value: >Rp 100M

---

## 2. Model Bisnis B2B

### 2.1 User Hierarchy & Growth Model
```
School Owner/Principal (Pays Subscription)
    ↓ invites
Management Team (Admin roles)
    ↓ invites
Teachers (Operational roles)
    ↓ adds
Students + Parents (End users)
```

### 2.2 Pricing Tiers

| Plan | Student Count | Monthly Price | Annual Price | Features |
|------|--------------|---------------|--------------|----------|
| **Starter** | ≤100 | Rp 1.5M | Rp 15M (2 bulan gratis) | All core features |
| **Growing** | 101-500 | Rp 5M | Rp 50M (2 bulan gratis) | + Priority support |
| **Enterprise** | 500+ | Custom | Custom | + Dedicated CS |

### 2.3 Revenue Model
- **Base Fee**: Per student per month
- **Add-ons**: SMS credits, extra storage, API access
- **Professional Services**: Training, custom development
- **Transaction Fees**: Payment processing (2.9%)

### 2.4 Customer Journey
```
Awareness → Free Trial (30 days) → Paid Subscription → 
Expansion → Renewal → Advocacy
```

---

## 3. Persona Pengguna

### 3.1 Primary Persona: Pak Ahmad (Kepala Sekolah)
- **Usia**: 45-55 tahun
- **Background**: S2 Pendidikan Islam, 20+ tahun pengalaman
- **Tech Level**: Moderate (uses WhatsApp, basic apps)
- **Motivasi**: 
  - Modernisasi pesantren
  - Meningkatkan efisiensi operasional
  - Transparansi untuk orang tua
  - Keamanan santri

### 3.2 Pain Points
- Manual processes memakan 60% waktu staff
- Informasi tersebar, sulit dapat big picture
- Lambat respons terhadap insiden
- Kesulitan tracking pembayaran
- Komunikasi dengan orang tua tidak efektif

### 3.3 Jobs to be Done
1. "Saya perlu tahu apa yang terjadi di pesantren real-time"
2. "Saya perlu memastikan keamanan semua santri"
3. "Saya perlu efisiensi dalam operasional harian"
4. "Saya perlu laporan untuk yayasan/stakeholder"
5. "Saya perlu sistem yang mudah untuk guru-guru"

### 3.4 Sub-Personas

**Wakil Kepala Bidang**
- Fokus pada area spesifik (akademik/kesiswaan/sarana)
- Butuh laporan detail per bidang
- Koordinasi dengan guru-guru

**Kepala Tata Usaha**
- Fokus administrasi dan keuangan
- Butuh tools untuk billing dan payment
- Manage dokumen dan arsip

---

## 4. Onboarding & Setup

### 4.1 Signup Flow (5 Steps)

**Step 1: Basic Information**
```
┌─────────────────────────────────────────────────┐
│  DAFTAR PESANTREN DIGITAL                       │
├─────────────────────────────────────────────────┤
│                                                  │
│  Nama Lengkap Anda*                             │
│  [_________________________________________]    │
│                                                  │
│  Email* (untuk login)                           │
│  [_________________________________________]    │
│                                                  │
│  No. WhatsApp*                                  │
│  [+62 _____________________________________]    │
│                                                  │
│  Password*                                      │
│  [_________________________________________]    │
│  Min. 8 karakter dengan huruf dan angka         │
│                                                  │
│  [Lanjutkan →]                                  │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 2: School Information**
```
┌─────────────────────────────────────────────────┐
│  INFORMASI PESANTREN                            │
├─────────────────────────────────────────────────┤
│                                                  │
│  Nama Pesantren*                                │
│  [_________________________________________]    │
│                                                  │
│  Alamat Lengkap*                                │
│  [_________________________________________]    │
│  [_________________________________________]    │
│                                                  │
│  Kota/Kabupaten*                                │
│  [________________] Provinsi [_____________]     │
│                                                  │
│  No. Izin Operasional                           │
│  [_________________________________________]    │
│                                                  │
│  Jumlah Santri (Estimasi)*                      │
│  ○ <50  ○ 50-100  ● 101-250  ○ 251-500  ○ 500+│
│                                                  │
│  [← Kembali] [Lanjutkan →]                      │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 3: Choose Plan**
```
┌─────────────────────────────────────────────────┐
│  PILIH PAKET                                    │
├─────────────────────────────────────────────────┤
│                                                  │
│  Rekomendasi untuk 101-250 santri:              │
│                                                  │
│  ┌─────────────────────────────────────────────┐│
│  │ ⭐ GROWING PLAN                   RECOMMENDED││
│  │                                              ││
│  │ Rp 5.000.000/bulan                          ││
│  │ Rp 50.000.000/tahun (hemat 2 bulan!)       ││
│  │                                              ││
│  │ ✓ Hingga 500 santri                         ││
│  │ ✓ Unlimited guru                            ││
│  │ ✓ Semua fitur core                          ││
│  │ ✓ Priority support                          ││
│  │ ✓ Training untuk guru                       ││
│  │                                              ││
│  │ [Mulai Free Trial 30 Hari]                  ││
│  └─────────────────────────────────────────────┘│
│                                                  │
│  [Lihat semua paket]                            │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 4: Invite First Teachers**
```
┌─────────────────────────────────────────────────┐
│  UNDANG GURU PERTAMA                            │
├─────────────────────────────────────────────────┤
│                                                  │
│  Mari undang guru-guru untuk memulai:           │
│                                                  │
│  Email Guru 1:                                  │
│  [_________________________________________]    │
│                                                  │
│  Email Guru 2:                                  │
│  [_________________________________________]    │
│                                                  │
│  Email Guru 3:                                  │
│  [_________________________________________]    │
│                                                  │
│  [+ Tambah Guru]                                │
│                                                  │
│  ⓘ Anda dapat menambah guru kapan saja nanti   │
│                                                  │
│  [Skip untuk nanti] [Kirim Undangan]            │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 5: Welcome & Setup Complete**
```
┌─────────────────────────────────────────────────┐
│  SELAMAT! SETUP SELESAI 🎉                     │
├─────────────────────────────────────────────────┤
│                                                  │
│  Pesantren Al-Hikmah sudah siap!                │
│                                                  │
│  Langkah selanjutnya:                           │
│  1. ✓ Akun Anda sudah aktif                    │
│  2. ⏳ 3 guru sudah diundang via email          │
│  3. 📅 Free trial 30 hari dimulai hari ini     │
│                                                  │
│  Tim kami akan menghubungi Anda dalam 24 jam   │
│  untuk membantu onboarding.                     │
│                                                  │
│  [Lihat Video Tutorial] [Masuk ke Dashboard]    │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 4.2 Post-Signup Onboarding Journey

**Day 1-3: Activation**
- Welcome email dengan resources
- Call dari Customer Success Manager
- Guided tour dashboard via video call
- Setup profil sekolah lengkap

**Day 4-7: Teacher Onboarding**
- Follow up guru yang belum register
- Training session untuk guru (online)
- Template import data santri
- First parent invitation

**Week 2-4: Full Adoption**
- Weekly check-in calls
- Monitor adoption metrics
- Address pain points
- Success milestone celebration

---

## 5. Dashboard Manajemen

### 5.1 Main Dashboard Layout
```
┌─────────────────────────────────────────────────┐
│ 🕌 Pesantren Al-Hikmah        [🔔 5] [👤]      │
│ Assalamualaikum, Pak Ahmad                      │
│ Senin, 1 Juni 2025 | 08:30 WIB                 │
├─────────────────────────────────────────────────┤
│                                                  │
│ TRIAL STATUS                    Expires in: 23d │
│ ┌─────────────────────────────────────────────┐ │
│ │ Progress: ████████░░░░░░ 60% complete       │ │
│ │ ✓ Profile setup  ✓ 5 teachers  ⏳ Students  │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ TODAY'S SNAPSHOT                                │
│ ┌───────────┐ ┌───────────┐ ┌───────────┐      │
│ │ SANTRI    │ │ KEHADIRAN │ │ KEUANGAN  │      │
│ │ 156       │ │ 96.5%     │ │ 89.2%     │      │
│ │ ↑ 12 baru │ │ ↓ 0.5%    │ │ collected │      │
│ └───────────┘ └───────────┘ └───────────┘      │
│                                                  │
│ ┌───────────┐ ┌───────────┐ ┌───────────┐      │
│ │ GURU      │ │ INSIDEN   │ │ APPROVAL  │      │
│ │ 12/15     │ │ 1 aktif   │ │ 3 pending │      │
│ │ online    │ │ 0 baru    │ │ 1 urgent  │      │
│ └───────────┘ └───────────┘ └───────────┘      │
│                                                  │
│ PRIORITAS HARI INI                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🔴 1 approval urgent: Izin pulang Ahmad     │ │
│ │ 🟡 3 guru belum input absen pagi            │ │
│ │ 🟢 Target collection rate tercapai!         │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ [+ Guru] [📊 Reports] [⚙️ Settings] [? Help]    │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 5.2 Dashboard Widgets Explained

**5.2.1 Trial/Subscription Status**
- Visual progress bar
- Key milestones checklist
- Days remaining
- Upgrade CTA when appropriate

**5.2.2 Snapshot Widgets**
- Real-time metrics
- Trend indicators (↑↓)
- Click for detailed view
- Color-coded performance

**5.2.3 Priority Section**
- daily priorities
- Red/Yellow/Green severity
- Direct action buttons
- Dismissible when completed


---

## 6. Manajemen Pengguna

### 6.1 User Hierarchy Overview
```
┌─────────────────────────────────────────────────┐
│ USER MANAGEMENT                 [+ Tambah Guru] │
├─────────────────────────────────────────────────┤
│                                                  │
│ HIERARCHY OVERVIEW                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🏫 Pesantren Al-Hikmah (You)                │ │
│ │  ├─ 👥 15 Guru (12 active)                  │ │
│ │  │   ├─ 156 Santri                          │ │
│ │  │   └─ 134 Orang Tua (86% connected)       │ │
│ │  └─ 💰 Growing Plan (156/500 santri)        │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ ADOPTION FUNNEL                                 │
│ Invited     ████████████████ 15 guru          │
│ Registered  ████████████ 12 (80%)             │
│ Active      ██████████ 10 (67%)               │
│ Added Students ████████ 8 (53%)               │
│                                                  │
│ [View All Teachers] [Download Report]           │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 6.2 Teacher Management

**6.2.1 Teacher List View**
```
┌─────────────────────────────────────────────────┐
│ GURU & STAFF                                    │
├─────────────────────────────────────────────────┤
│                                                  │
│ Search: [🔍_____________] Filter: [Active ▼]   │
│                                                  │
│ ┌─────────────────────────────────────────────┐ │
│ │ ✓ Ust. Ahmad Fauzi                          │ │
│ │   Matematika, Fisika | Wali Kelas 2A       │ │
│ │   👥 28 santri | 📧 ahmad@pesantren.id     │ │
│ │   Last active: 2 menit lalu                │ │
│ │   [Message] [View Details] [⋮]             │ │
│ ├─────────────────────────────────────────────┤ │
│ │ ⏳ Ustz. Siti Nurhaliza                    │ │
│ │   Bahasa Indonesia | Pembina Asrama Putri  │ │
│ │   👥 0 santri | 📧 siti@pesantren.id      │ │
│ │   Status: Invited 2 hari lalu              │ │
│ │   [Resend Invite] [Cancel Invite] [⋮]      │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ Showing 2 of 15                 [Load More ↓]  │
│                                                  │
└─────────────────────────────────────────────────┘
```

**6.2.2 Add Teacher Methods**

a) **Individual Invite**
```
┌─────────────────────────────────────────────────┐
│ UNDANG GURU BARU                                │
├─────────────────────────────────────────────────┤
│                                                  │
│ Nama Lengkap*                                   │
│ [_________________________________________]     │
│                                                  │
│ Email*                                          │
│ [_________________________________________]     │
│                                                  │
│ No. WhatsApp                                    │
│ [+62 _____________________________________]     │
│                                                  │
│ Peran (bisa pilih multiple):                    │
│ ☑ Guru Mata Pelajaran                          │
│ ☐ Wali Kelas                                  │
│ ☐ Pembina Asrama                              │
│ ☐ Admin/Tata Usaha                            │
│                                                  │
│ Mata Pelajaran:                                 │
│ [Pilih mata pelajaran ▼] [+ Tambah]            │
│                                                  │
│ Personal Message (optional):                    │
│ [_________________________________________]     │
│ [_________________________________________]     │
│                                                  │
│ [Cancel] [Kirim Undangan]                       │
│                                                  │
└─────────────────────────────────────────────────┘
```

b) **Bulk Import**
```
┌─────────────────────────────────────────────────┐
│ IMPORT GURU (BULK)                              │
├─────────────────────────────────────────────────┤
│                                                  │
│ Download template Excel:                         │
│ [📥 Download Template]                          │
│                                                  │
│ Upload file:                                    │
│ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ │
│ │                                              │ │
│ │      📁 Drop file Excel di sini atau        │ │
│ │         [Browse File]                        │ │
│ │                                              │ │
│ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │
│                                                  │
│ ✓ guru_list.xlsx uploaded                       │
│                                                  │
│ Preview (15 teachers detected):                 │
│ ┌─────────────────────────────────────────────┐ │
│ │ ✓ Ahmad Fauzi - ahmad@email.com            │ │
│ │ ✓ Siti Nurhaliza - siti@email.com          │ │
│ │ ⚠ Budi Santoso - budi@email (invalid)      │ │
│ │ ... 12 more                                 │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ [Cancel] [Fix Errors] [Import 14 Teachers]      │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 6.3 Teacher Adoption Tracking
```
┌─────────────────────────────────────────────────┐
│ TEACHER PERFORMANCE & ADOPTION                  │
├─────────────────────────────────────────────────┤
│                                                  │
│ ADOPTION METRICS                                │
│ Average time to activate: 2.3 days             │
│ Average students per teacher: 13               │
│ Most active: Ust. Ahmad (28 students)          │
│                                                  │
│ INACTIVE TEACHERS (3)                          │
│ ┌─────────────────────────────────────────────┐ │
│ │ Ust. Budi - Invited 5 days ago             │ │
│ │ Ustz. Zahra - No login for 7 days          │ │
│ │ Ust. Rizky - 0 students added              │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ Actions: [Send Reminder] [Schedule Training]    │
│          [Assign Buddy] [Contact via WA]        │
│                                                  │
└─────────────────────────────────────────────────┘
```

---

## 7. Fitur Operasional

### 7.1 Incident Management
```
┌─────────────────────────────────────────────────┐
│ MANAJEMEN INSIDEN              [+ Report Baru]  │
├─────────────────────────────────────────────────┤
│                                                  │
│ Filter: [Semua ▼] [7 hari terakhir ▼]         │
│                                                  │
│ ACTIVE INCIDENTS (1)                            │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🔴 #2451 - Kesehatan: Demam Tinggi          │ │
│ │ Santri: M. Rizki (3A) | Asrama B           │ │
│ │ Reported: 30 menit lalu by Ust. Mahmud     │ │
│ │ Status: Assigned to Tim Kesehatan          │ │
│ │ [View] [Update] [Add Note] [Close]         │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ PENDING REVIEW (2)                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🟡 #2450 - Bullying Report (Anonymous)      │ │
│ │ Location: Kantin | 2 jam lalu              │ │
│ │ [Assign Investigator]                       │ │
│ ├─────────────────────────────────────────────┤ │
│ │ 🟡 #2449 - Fasilitas: AC Rusak             │ │
│ │ Location: Kelas 2B | 3 jam lalu            │ │
│ │ [Assign to Maintenance]                     │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.2 CCTV Access Management
```
┌─────────────────────────────────────────────────┐
│ CCTV ACCESS REQUESTS           [Policy Settings]│
├─────────────────────────────────────────────────┤
│                                                  │
│ PENDING REQUESTS (2)                            │
│ ┌─────────────────────────────────────────────┐ │
│ │ Request #089                     ⏱ 45 min   │ │
│ │                                              │ │
│ │ Parent: Ibu Fatimah                         │ │
│ │ Student: Ahmad Rizki (3A)                   │ │
│ │ Camera: Kantin Area                         │ │
│ │ Date/Time: Today, 12:00-12:30              │ │
│ │                                              │ │
│ │ Reason: "Anak tidak kembali setelah makan  │ │
│ │ siang, khawatir ada masalah"               │ │
│ │                                              │ │
│ │ ✓ Within 48 hour policy                     │ │
│ │ ✓ Public area camera                        │ │
│ │ ✓ Valid reason category                     │ │
│ │                                              │ │
│ │ [Approve 30 min] [Deny] [Request Info]     │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.3 Financial Overview
```
┌─────────────────────────────────────────────────┐
│ FINANCIAL SNAPSHOT - JUNI 2025                  │
├─────────────────────────────────────────────────┤
│                                                  │
│ COLLECTION THIS MONTH                           │
│ ┌─────────────────────────────────────────────┐ │
│ │ Target:     Rp 156,000,000                  │ │
│ │ Collected:  Rp 139,000,000                  │ │
│ │ ████████████████████░░░░ 89.1%             │ │
│ │                                              │ │
│ │ Outstanding: Rp 17,000,000 (23 students)    │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ BY PAYMENT TYPE                                 │
│ SPP        ████████████████░░ 88%              │
│ Asrama     ███████████████░░░ 85%              │
│ Kegiatan   ████████████░░░░░░ 70%              │
│                                                  │
│ TOP OVERDUE (>30 days)                         │
│ • Ahmad Rizki - Rp 2.5M - 45 days - [Remind]  │
│ • Siti Zahra - Rp 2.0M - 38 days - [Remind]   │
│ • M. Fauzan - Rp 1.8M - 32 days - [Remind]    │
│                                                  │
│ [Full Report] [Send Bulk Reminders]            │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.4 Academic Oversight
```
┌─────────────────────────────────────────────────┐
│ ACADEMIC PERFORMANCE                            │
├─────────────────────────────────────────────────┤
│                                                  │
│ GRADE DISTRIBUTION (All Classes)                │
│ A (90-100)  ████████░░░░░░░░ 25%              │
│ B (80-89)   ████████████████ 45%              │
│ C (70-79)   ████████░░░░░░░░ 22%              │
│ D (<70)     ███░░░░░░░░░░░░░ 8%               │
│                                                  │
│ BY SUBJECT AVERAGE                              │
│ Agama Islam    ████████████████ 85.6          │
│ B. Indonesia   ██████████████░░ 82.3          │
│ Matematika     ████████████░░░░ 78.5          │
│ B. Inggris     ███████████░░░░░ 71.2          │
│                                                  │
│ AT-RISK STUDENTS (Grade <70 or Attendance <80%)│
│ Total: 12 students needing intervention         │
│ [View List] [Generate Action Plan]              │
│                                                  │
└─────────────────────────────────────────────────┘
```

---

## 8. Subscription & Billing

### 8.1 Subscription Management
```
┌─────────────────────────────────────────────────┐
│ SUBSCRIPTION & BILLING                          │
</file>

<file path="docs/prd_management_role.md">
# Product Requirements Document (PRD) - Part 1
# Aplikasi Pesantren - Management Role (B2B Subscription)

**Versi:** 2.0  
**Tanggal:** Mei 2025  
**Model:** B2B SaaS Subscription
**Bagian:** 1 dari 2

---

## Daftar Isi

1. [Ringkasan Eksekutif](#1-ringkasan-eksekutif)
2. [Model Bisnis B2B](#2-model-bisnis-b2b)
3. [Persona Pengguna](#3-persona-pengguna)
4. [Onboarding & Setup](#4-onboarding--setup)
5. [Dashboard Manajemen](#5-dashboard-manajemen)
6. [Manajemen Pengguna](#6-manajemen-pengguna)
7. [Fitur Operasional](#7-fitur-operasional)
8. [Subscription & Billing](#8-subscription--billing)
9. [Reporting & Analytics](#9-reporting--analytics)
10. [Mobile Experience](#10-mobile-experience)
11. [Komunikasi & Pengumuman](#11-komunikasi--pengumuman)
12. [Workflow Persetujuan](#12-workflow-persetujuan)
13. [Integrasi & API](#13-integrasi--api)
14. [Implementasi Timeline](#14-implementasi-timeline)
15. [Lampiran](#15-lampiran)

---

## 1. Ringkasan Eksekutif

### 1.1 Overview
Aplikasi Pesantren Digital adalah platform B2B SaaS yang dirancang khusus untuk modernisasi pesantren di Indonesia. Management (Kepala Sekolah/Pemilik Yayasan) adalah **primary account holder** yang mendaftar, membayar subscription, dan mengelola seluruh ekosistem digital pesantren.

### 1.2 Model Subscription
- **Hirarki Pengguna**: Management → Teachers → Students/Parents
- **Pricing**: Berdasarkan jumlah santri aktif
- **Billing**: Monthly/Annual dengan diskon
- **Onboarding**: Self-service dengan support

### 1.3 Value Proposition
- **Untuk Pesantren**: Digitalisasi operasional dengan ROI <6 bulan
- **Untuk Management**: Visibilitas real-time dan kontrol penuh
- **Untuk Guru**: Produktivitas meningkat 40%
- **Untuk Orang Tua**: Transparansi dan komunikasi lebih baik

### 1.4 Target Metrics
- Onboarding completion: <7 hari
- Teacher activation rate: >80%
- Monthly churn: <2%
- Customer Lifetime Value: >Rp 100M

---

## 2. Model Bisnis B2B

### 2.1 User Hierarchy & Growth Model
```
School Owner/Principal (Pays Subscription)
    ↓ invites
Management Team (Admin roles)
    ↓ invites
Teachers (Operational roles)
    ↓ adds
Students + Parents (End users)
```

### 2.2 Pricing Tiers

| Plan | Student Count | Monthly Price | Annual Price | Features |
|------|--------------|---------------|--------------|----------|
| **Starter** | ≤100 | Rp 1.5M | Rp 15M (2 bulan gratis) | All core features |
| **Growing** | 101-500 | Rp 5M | Rp 50M (2 bulan gratis) | + Priority support |
| **Enterprise** | 500+ | Custom | Custom | + Dedicated CS |

### 2.3 Revenue Model
- **Base Fee**: Per student per month
- **Add-ons**: SMS credits, extra storage, API access
- **Professional Services**: Training, custom development
- **Transaction Fees**: Payment processing (2.9%)

### 2.4 Customer Journey
```
Awareness → Free Trial (30 days) → Paid Subscription → 
Expansion → Renewal → Advocacy
```

---

## 3. Persona Pengguna

### 3.1 Primary Persona: Pak Ahmad (Kepala Sekolah)
- **Usia**: 45-55 tahun
- **Background**: S2 Pendidikan Islam, 20+ tahun pengalaman
- **Tech Level**: Moderate (uses WhatsApp, basic apps)
- **Motivasi**: 
  - Modernisasi pesantren
  - Meningkatkan efisiensi operasional
  - Transparansi untuk orang tua
  - Keamanan santri

### 3.2 Pain Points
- Manual processes memakan 60% waktu staff
- Informasi tersebar, sulit dapat big picture
- Lambat respons terhadap insiden
- Kesulitan tracking pembayaran
- Komunikasi dengan orang tua tidak efektif

### 3.3 Jobs to be Done
1. "Saya perlu tahu apa yang terjadi di pesantren real-time"
2. "Saya perlu memastikan keamanan semua santri"
3. "Saya perlu efisiensi dalam operasional harian"
4. "Saya perlu laporan untuk yayasan/stakeholder"
5. "Saya perlu sistem yang mudah untuk guru-guru"

### 3.4 Sub-Personas

**Wakil Kepala Bidang**
- Fokus pada area spesifik (akademik/kesiswaan/sarana)
- Butuh laporan detail per bidang
- Koordinasi dengan guru-guru

**Kepala Tata Usaha**
- Fokus administrasi dan keuangan
- Butuh tools untuk billing dan payment
- Manage dokumen dan arsip

---

## 4. Onboarding & Setup

### 4.1 Signup Flow (5 Steps)

**Step 1: Basic Information**
```
┌─────────────────────────────────────────────────┐
│  DAFTAR PESANTREN DIGITAL                       │
├─────────────────────────────────────────────────┤
│                                                  │
│  Nama Lengkap Anda*                             │
│  [_________________________________________]    │
│                                                  │
│  Email* (untuk login)                           │
│  [_________________________________________]    │
│                                                  │
│  No. WhatsApp*                                  │
│  [+62 _____________________________________]    │
│                                                  │
│  Password*                                      │
│  [_________________________________________]    │
│  Min. 8 karakter dengan huruf dan angka         │
│                                                  │
│  [Lanjutkan →]                                  │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 2: School Information**
```
┌─────────────────────────────────────────────────┐
│  INFORMASI PESANTREN                            │
├─────────────────────────────────────────────────┤
│                                                  │
│  Nama Pesantren*                                │
│  [_________________________________________]    │
│                                                  │
│  Alamat Lengkap*                                │
│  [_________________________________________]    │
│  [_________________________________________]    │
│                                                  │
│  Kota/Kabupaten*                                │
│  [________________] Provinsi [_____________]     │
│                                                  │
│  No. Izin Operasional                           │
│  [_________________________________________]    │
│                                                  │
│  Jumlah Santri (Estimasi)*                      │
│  ○ <50  ○ 50-100  ● 101-250  ○ 251-500  ○ 500+│
│                                                  │
│  [← Kembali] [Lanjutkan →]                      │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 3: Choose Plan**
```
┌─────────────────────────────────────────────────┐
│  PILIH PAKET                                    │
├─────────────────────────────────────────────────┤
│                                                  │
│  Rekomendasi untuk 101-250 santri:              │
│                                                  │
│  ┌─────────────────────────────────────────────┐│
│  │ ⭐ GROWING PLAN                   RECOMMENDED││
│  │                                              ││
│  │ Rp 5.000.000/bulan                          ││
│  │ Rp 50.000.000/tahun (hemat 2 bulan!)       ││
│  │                                              ││
│  │ ✓ Hingga 500 santri                         ││
│  │ ✓ Unlimited guru                            ││
│  │ ✓ Semua fitur core                          ││
│  │ ✓ Priority support                          ││
│  │ ✓ Training untuk guru                       ││
│  │                                              ││
│  │ [Mulai Free Trial 30 Hari]                  ││
│  └─────────────────────────────────────────────┘│
│                                                  │
│  [Lihat semua paket]                            │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 4: Invite First Teachers**
```
┌─────────────────────────────────────────────────┐
│  UNDANG GURU PERTAMA                            │
├─────────────────────────────────────────────────┤
│                                                  │
│  Mari undang guru-guru untuk memulai:           │
│                                                  │
│  Email Guru 1:                                  │
│  [_________________________________________]    │
│                                                  │
│  Email Guru 2:                                  │
│  [_________________________________________]    │
│                                                  │
│  Email Guru 3:                                  │
│  [_________________________________________]    │
│                                                  │
│  [+ Tambah Guru]                                │
│                                                  │
│  ⓘ Anda dapat menambah guru kapan saja nanti   │
│                                                  │
│  [Skip untuk nanti] [Kirim Undangan]            │
│                                                  │
└─────────────────────────────────────────────────┘
```

**Step 5: Welcome & Setup Complete**
```
┌─────────────────────────────────────────────────┐
│  SELAMAT! SETUP SELESAI 🎉                     │
├─────────────────────────────────────────────────┤
│                                                  │
│  Pesantren Al-Hikmah sudah siap!                │
│                                                  │
│  Langkah selanjutnya:                           │
│  1. ✓ Akun Anda sudah aktif                    │
│  2. ⏳ 3 guru sudah diundang via email          │
│  3. 📅 Free trial 30 hari dimulai hari ini     │
│                                                  │
│  Tim kami akan menghubungi Anda dalam 24 jam   │
│  untuk membantu onboarding.                     │
│                                                  │
│  [Lihat Video Tutorial] [Masuk ke Dashboard]    │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 4.2 Post-Signup Onboarding Journey

**Day 1-3: Activation**
- Welcome email dengan resources
- Call dari Customer Success Manager
- Guided tour dashboard via video call
- Setup profil sekolah lengkap

**Day 4-7: Teacher Onboarding**
- Follow up guru yang belum register
- Training session untuk guru (online)
- Template import data santri
- First parent invitation

**Week 2-4: Full Adoption**
- Weekly check-in calls
- Monitor adoption metrics
- Address pain points
- Success milestone celebration

---

## 5. Dashboard Manajemen

### 5.1 Main Dashboard Layout
```
┌─────────────────────────────────────────────────┐
│ 🕌 Pesantren Al-Hikmah        [🔔 5] [👤]      │
│ Assalamualaikum, Pak Ahmad                      │
│ Senin, 1 Juni 2025 | 08:30 WIB                 │
├─────────────────────────────────────────────────┤
│                                                  │
│ TRIAL STATUS                    Expires in: 23d │
│ ┌─────────────────────────────────────────────┐ │
│ │ Progress: ████████░░░░░░ 60% complete       │ │
│ │ ✓ Profile setup  ✓ 5 teachers  ⏳ Students  │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ TODAY'S SNAPSHOT                                │
│ ┌───────────┐ ┌───────────┐ ┌───────────┐      │
│ │ SANTRI    │ │ KEHADIRAN │ │ KEUANGAN  │      │
│ │ 156       │ │ 96.5%     │ │ 89.2%     │      │
│ │ ↑ 12 baru │ │ ↓ 0.5%    │ │ collected │      │
│ └───────────┘ └───────────┘ └───────────┘      │
│                                                  │
│ ┌───────────┐ ┌───────────┐ ┌───────────┐      │
│ │ GURU      │ │ INSIDEN   │ │ APPROVAL  │      │
│ │ 12/15     │ │ 1 aktif   │ │ 3 pending │      │
│ │ online    │ │ 0 baru    │ │ 1 urgent  │      │
│ └───────────┘ └───────────┘ └───────────┘      │
│                                                  │
│ PRIORITAS HARI INI                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🔴 1 approval urgent: Izin pulang Ahmad     │ │
│ │ 🟡 3 guru belum input absen pagi            │ │
│ │ 🟢 Target collection rate tercapai!         │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ [+ Guru] [📊 Reports] [⚙️ Settings] [? Help]    │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 5.2 Dashboard Widgets Explained

**5.2.1 Trial/Subscription Status**
- Visual progress bar
- Key milestones checklist
- Days remaining
- Upgrade CTA when appropriate

**5.2.2 Snapshot Widgets**
- Real-time metrics
- Trend indicators (↑↓)
- Click for detailed view
- Color-coded performance

**5.2.3 Priority Section**
- daily priorities
- Red/Yellow/Green severity
- Direct action buttons
- Dismissible when completed


---

## 6. Manajemen Pengguna

### 6.1 User Hierarchy Overview
```
┌─────────────────────────────────────────────────┐
│ USER MANAGEMENT                 [+ Tambah Guru] │
├─────────────────────────────────────────────────┤
│                                                  │
│ HIERARCHY OVERVIEW                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🏫 Pesantren Al-Hikmah (You)                │ │
│ │  ├─ 👥 15 Guru (12 active)                  │ │
│ │  │   ├─ 156 Santri                          │ │
│ │  │   └─ 134 Orang Tua (86% connected)       │ │
│ │  └─ 💰 Growing Plan (156/500 santri)        │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ ADOPTION FUNNEL                                 │
│ Invited     ████████████████ 15 guru          │
│ Registered  ████████████ 12 (80%)             │
│ Active      ██████████ 10 (67%)               │
│ Added Students ████████ 8 (53%)               │
│                                                  │
│ [View All Teachers] [Download Report]           │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 6.2 Teacher Management

**6.2.1 Teacher List View**
```
┌─────────────────────────────────────────────────┐
│ GURU & STAFF                                    │
├─────────────────────────────────────────────────┤
│                                                  │
│ Search: [🔍_____________] Filter: [Active ▼]   │
│                                                  │
│ ┌─────────────────────────────────────────────┐ │
│ │ ✓ Ust. Ahmad Fauzi                          │ │
│ │   Matematika, Fisika | Wali Kelas 2A       │ │
│ │   👥 28 santri | 📧 ahmad@pesantren.id     │ │
│ │   Last active: 2 menit lalu                │ │
│ │   [Message] [View Details] [⋮]             │ │
│ ├─────────────────────────────────────────────┤ │
│ │ ⏳ Ustz. Siti Nurhaliza                    │ │
│ │   Bahasa Indonesia | Pembina Asrama Putri  │ │
│ │   👥 0 santri | 📧 siti@pesantren.id      │ │
│ │   Status: Invited 2 hari lalu              │ │
│ │   [Resend Invite] [Cancel Invite] [⋮]      │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ Showing 2 of 15                 [Load More ↓]  │
│                                                  │
└─────────────────────────────────────────────────┘
```

**6.2.2 Add Teacher Methods**

a) **Individual Invite**
```
┌─────────────────────────────────────────────────┐
│ UNDANG GURU BARU                                │
├─────────────────────────────────────────────────┤
│                                                  │
│ Nama Lengkap*                                   │
│ [_________________________________________]     │
│                                                  │
│ Email*                                          │
│ [_________________________________________]     │
│                                                  │
│ No. WhatsApp                                    │
│ [+62 _____________________________________]     │
│                                                  │
│ Peran (bisa pilih multiple):                    │
│ ☑ Guru Mata Pelajaran                          │
│ ☐ Wali Kelas                                  │
│ ☐ Pembina Asrama                              │
│ ☐ Admin/Tata Usaha                            │
│                                                  │
│ Mata Pelajaran:                                 │
│ [Pilih mata pelajaran ▼] [+ Tambah]            │
│                                                  │
│ Personal Message (optional):                    │
│ [_________________________________________]     │
│ [_________________________________________]     │
│                                                  │
│ [Cancel] [Kirim Undangan]                       │
│                                                  │
└─────────────────────────────────────────────────┘
```

b) **Bulk Import**
```
┌─────────────────────────────────────────────────┐
│ IMPORT GURU (BULK)                              │
├─────────────────────────────────────────────────┤
│                                                  │
│ Download template Excel:                         │
│ [📥 Download Template]                          │
│                                                  │
│ Upload file:                                    │
│ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ │
│ │                                              │ │
│ │      📁 Drop file Excel di sini atau        │ │
│ │         [Browse File]                        │ │
│ │                                              │ │
│ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │
│                                                  │
│ ✓ guru_list.xlsx uploaded                       │
│                                                  │
│ Preview (15 teachers detected):                 │
│ ┌─────────────────────────────────────────────┐ │
│ │ ✓ Ahmad Fauzi - ahmad@email.com            │ │
│ │ ✓ Siti Nurhaliza - siti@email.com          │ │
│ │ ⚠ Budi Santoso - budi@email (invalid)      │ │
│ │ ... 12 more                                 │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ [Cancel] [Fix Errors] [Import 14 Teachers]      │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 6.3 Teacher Adoption Tracking
```
┌─────────────────────────────────────────────────┐
│ TEACHER PERFORMANCE & ADOPTION                  │
├─────────────────────────────────────────────────┤
│                                                  │
│ ADOPTION METRICS                                │
│ Average time to activate: 2.3 days             │
│ Average students per teacher: 13               │
│ Most active: Ust. Ahmad (28 students)          │
│                                                  │
│ INACTIVE TEACHERS (3)                          │
│ ┌─────────────────────────────────────────────┐ │
│ │ Ust. Budi - Invited 5 days ago             │ │
│ │ Ustz. Zahra - No login for 7 days          │ │
│ │ Ust. Rizky - 0 students added              │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ Actions: [Send Reminder] [Schedule Training]    │
│          [Assign Buddy] [Contact via WA]        │
│                                                  │
└─────────────────────────────────────────────────┘
```

---

## 7. Fitur Operasional

### 7.1 Incident Management
```
┌─────────────────────────────────────────────────┐
│ MANAJEMEN INSIDEN              [+ Report Baru]  │
├─────────────────────────────────────────────────┤
│                                                  │
│ Filter: [Semua ▼] [7 hari terakhir ▼]         │
│                                                  │
│ ACTIVE INCIDENTS (1)                            │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🔴 #2451 - Kesehatan: Demam Tinggi          │ │
│ │ Santri: M. Rizki (3A) | Asrama B           │ │
│ │ Reported: 30 menit lalu by Ust. Mahmud     │ │
│ │ Status: Assigned to Tim Kesehatan          │ │
│ │ [View] [Update] [Add Note] [Close]         │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ PENDING REVIEW (2)                              │
│ ┌─────────────────────────────────────────────┐ │
│ │ 🟡 #2450 - Bullying Report (Anonymous)      │ │
│ │ Location: Kantin | 2 jam lalu              │ │
│ │ [Assign Investigator]                       │ │
│ ├─────────────────────────────────────────────┤ │
│ │ 🟡 #2449 - Fasilitas: AC Rusak             │ │
│ │ Location: Kelas 2B | 3 jam lalu            │ │
│ │ [Assign to Maintenance]                     │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.2 CCTV Access Management
```
┌─────────────────────────────────────────────────┐
│ CCTV ACCESS REQUESTS           [Policy Settings]│
├─────────────────────────────────────────────────┤
│                                                  │
│ PENDING REQUESTS (2)                            │
│ ┌─────────────────────────────────────────────┐ │
│ │ Request #089                     ⏱ 45 min   │ │
│ │                                              │ │
│ │ Parent: Ibu Fatimah                         │ │
│ │ Student: Ahmad Rizki (3A)                   │ │
│ │ Camera: Kantin Area                         │ │
│ │ Date/Time: Today, 12:00-12:30              │ │
│ │                                              │ │
│ │ Reason: "Anak tidak kembali setelah makan  │ │
│ │ siang, khawatir ada masalah"               │ │
│ │                                              │ │
│ │ ✓ Within 48 hour policy                     │ │
│ │ ✓ Public area camera                        │ │
│ │ ✓ Valid reason category                     │ │
│ │                                              │ │
│ │ [Approve 30 min] [Deny] [Request Info]     │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.3 Financial Overview
```
┌─────────────────────────────────────────────────┐
│ FINANCIAL SNAPSHOT - JUNI 2025                  │
├─────────────────────────────────────────────────┤
│                                                  │
│ COLLECTION THIS MONTH                           │
│ ┌─────────────────────────────────────────────┐ │
│ │ Target:     Rp 156,000,000                  │ │
│ │ Collected:  Rp 139,000,000                  │ │
│ │ ████████████████████░░░░ 89.1%             │ │
│ │                                              │ │
│ │ Outstanding: Rp 17,000,000 (23 students)    │ │
│ └─────────────────────────────────────────────┘ │
│                                                  │
│ BY PAYMENT TYPE                                 │
│ SPP        ████████████████░░ 88%              │
│ Asrama     ███████████████░░░ 85%              │
│ Kegiatan   ████████████░░░░░░ 70%              │
│                                                  │
│ TOP OVERDUE (>30 days)                         │
│ • Ahmad Rizki - Rp 2.5M - 45 days - [Remind]  │
│ • Siti Zahra - Rp 2.0M - 38 days - [Remind]   │
│ • M. Fauzan - Rp 1.8M - 32 days - [Remind]    │
│                                                  │
│ [Full Report] [Send Bulk Reminders]            │
│                                                  │
└─────────────────────────────────────────────────┘
```

### 7.4 Academic Oversight
```
┌─────────────────────────────────────────────────┐
│ ACADEMIC PERFORMANCE                            │
├─────────────────────────────────────────────────┤
│                                                  │
│ GRADE DISTRIBUTION (All Classes)                │
│ A (90-100)  ████████░░░░░░░░ 25%              │
│ B (80-89)   ████████████████ 45%              │
│ C (70-79)   ████████░░░░░░░░ 22%              │
│ D (<70)     ███░░░░░░░░░░░░░ 8%               │
│                                                  │
│ BY SUBJECT AVERAGE                              │
│ Agama Islam    ████████████████ 85.6          │
│ B. Indonesia   ██████████████░░ 82.3          │
│ Matematika     ████████████░░░░ 78.5          │
│ B. Inggris     ███████████░░░░░ 71.2          │
│                                                  │
│ AT-RISK STUDENTS (Grade <70 or Attendance <80%)│
│ Total: 12 students needing intervention         │
│ [View List] [Generate Action Plan]              │
│                                                  │
└─────────────────────────────────────────────────┘
```

---

## 8. Subscription & Billing

### 8.1 Subscription Management
```
┌─────────────────────────────────────────────────┐
│ SUBSCRIPTION & BILLING                          │
</file>

<file path="docs/scratchpad.md">
Current Task: Resolve PGRST116 error after user registration.
Implementation Plan: `docs/implementation-plan/fix-profile-load-error-pgrst116.md`
Status: Planner has defined the tasks. Waiting for Executor to begin T1.

- **Remove Drawer Navigation:** `docs/implementation-plan/remove-drawer-navigation.md` (Status: Not Started)
- **UI Coherence - Auth Screens:** `docs/implementation-plan/auth-ui-coherence.md` (Status: Planning)
<!-- Add new task references above this line -->
</file>

<file path="docs/TODO.md">
# SchoolSync Development TODO List

**Project**: SchoolSync - B2B SaaS Mobile App for Indonesian Boarding Schools (Pesantren)  
**Focus**: Management Role Implementation  
**Timeline**: 10 weeks  
**Last Updated**: December 2024

---

## 🎯 Project Overview

- **Target User**: School Management (Kepala Sekolah/Pemilik Yayasan)
- **Business Model**: B2B SaaS Subscription
- **User Hierarchy**: Management → Teachers → Students/Parents
- **Pricing**: Based on active student count

---

## 📋 Development Phases

### Phase 0: UI Foundation Setup ✅ COMPLETED

#### 🎨 UI Component Library
- [x] Initialize Gluestack UI v2 integration
- [x] Configure Tailwind CSS for styling
- [x] Add Button component to UI library
- [x] Add Input component to UI library
- [x] Add Card component to UI library
- [x] Setup GluestackUIProvider in app root
- [x] Update package.json with dependencies

#### 🖥️ Screen Modernization
- [x] Modernize LoginScreen with Gluestack UI components
- [x] Modernize SignUpScreen with Gluestack UI components
- [x] Modernize Home Dashboard with responsive design
- [x] Migrate from StyleSheet to Tailwind CSS classes
- [x] Remove legacy styling code

#### 🛠️ Development Environment
- [x] Configure Expo development server
- [x] Setup Metro Bundler
- [x] Enable hot reload for development
- [x] Test app on Android emulator

---

### Phase 1: Authentication & Onboarding (Week 1-2)

#### 🔐 Authentication System
- [ ] Setup Supabase Auth configuration
- [ ] Implement email/password authentication
- [ ] Create role-based authentication (management, teacher, student, parent)
- [ ] Setup session management with AsyncStorage
- [ ] Create protected route components
- [ ] Implement logout functionality
- [ ] Add password reset flow

#### 📝 5-Step Onboarding Flow
- [ ] **Step 1**: Basic Information Form
  - [ ] Full name input
  - [ ] Email input with validation
  - [ ] WhatsApp number input (+62 prefix)
  - [ ] Password input with strength validation
  - [ ] Form validation and error handling

- [ ] **Step 2**: School Information Form
  - [ ] School name input
  - [ ] Complete address input
  - [ ] City/Province dropdowns
  - [ ] Operational license number
  - [ ] Student count estimation (radio buttons)
  - [ ] Navigation between steps

- [ ] **Step 3**: Plan Selection
  - [ ] Display pricing tiers (Starter/Growing/Enterprise)
  - [ ] Plan recommendation based on student count
  - [ ] Monthly/Annual pricing toggle
  - [ ] Free trial CTA
  - [ ] Plan comparison modal

- [ ] **Step 4**: Invite First Teachers
  - [ ] Multiple email input fields
  - [ ] Add/remove teacher email functionality
  - [ ] Email validation
  - [ ] Skip option for later
  - [ ] Send invitation emails

- [ ] **Step 5**: Welcome & Setup Complete
  - [ ] Success confirmation screen
  - [ ] Next steps checklist
  - [ ] Trial status display
  - [ ] Video tutorial links
  - [ ] Dashboard navigation

#### 🗄️ Database Schema
- [ ] Create `schools` table
- [ ] Create `users` table with roles
- [ ] Create `subscriptions` table
- [ ] Create `invitations` table
- [ ] Setup Row Level Security (RLS) policies
- [ ] Create database functions for user management
- [ ] Setup database triggers for audit logs

---

### Phase 2: Core Management Dashboard (Week 3-4)

#### 🏠 Main Dashboard
- [ ] Dashboard layout with responsive design
- [ ] Trial/Subscription status widget
  - [ ] Progress bar for trial completion
  - [ ] Days remaining counter
  - [ ] Upgrade CTA when appropriate

- [ ] Real-time Metrics Widgets
  - [ ] Student count with trend indicators
  - [ ] Attendance percentage
  - [ ] Financial collection rate
  - [ ] Active teachers count
  - [ ] Incident tracking
  - [ ] Pending approvals

- [ ] Priority Alerts Section
  - [ ] Color-coded severity (Red/Yellow/Green)
  - [ ] Direct action buttons
  - [ ] Dismissible notifications
  - [ ] Real-time updates

- [ ] Quick Actions
  - [ ] Add teacher button
  - [ ] View reports button
  - [ ] Settings access
  - [ ] Help & support

#### 🧭 Navigation Structure
- [ ] Update drawer navigation layout
- [ ] Create navigation icons
- [ ] Implement nested navigation for user management
- [ ] Add breadcrumb navigation
- [ ] Setup deep linking for specific screens

---

### Phase 3: User Management (Week 5-6)

#### 👨‍🏫 Teacher Management
- [ ] Teacher List View
  - [ ] Display teacher cards with status
  - [ ] Search and filter functionality
  - [ ] Pagination for large lists
  - [ ] Sort by various criteria

- [ ] Teacher Invitation System
  - [ ] Individual teacher invite
  - [ ] Bulk teacher invite (CSV upload)
  - [ ] Invitation status tracking
  - [ ] Resend invitation functionality
  - [ ] Cancel pending invitations

- [ ] Teacher Profile Management
  - [ ] View teacher details
  - [ ] Edit teacher information
  - [ ] Assign subjects and classes
  - [ ] Role and permission management
  - [ ] Activity history

- [ ] Teacher Onboarding
  - [ ] Teacher registration flow
  - [ ] Profile completion wizard
  - [ ] Training material access
  - [ ] First-time user guidance

#### 👨‍🎓 Student & Parent Management
- [ ] Student Enrollment System
  - [ ] Individual student registration
  - [ ] Bulk student import (CSV/Excel)
  - [ ] Student profile creation
  - [ ] Class assignment

- [ ] Parent Account Linking
  - [ ] Parent invitation system
  - [ ] Multiple parent support per student
  - [ ] Parent verification process
  - [ ] Communication preferences

- [ ] Data Management
  - [ ] Import/export functionality
  - [ ] Data validation and cleanup
  - [ ] Duplicate detection
  - [ ] Archive/restore students

---

### Phase 4: Subscription & Billing (Week 7-8)

#### 💳 Subscription Management
- [ ] Current plan display
- [ ] Usage tracking (student count vs. limit)
- [ ] Plan upgrade/downgrade flow
- [ ] Billing cycle management
- [ ] Payment method management
- [ ] Invoice generation and download

#### ⏰ Trial Management
- [ ] 30-day trial countdown
- [ ] Trial expiration notifications
- [ ] Trial extension functionality
- [ ] Conversion flow to paid subscription
- [ ] Trial usage analytics

#### 💰 Payment Integration
- [ ] Indonesian payment gateway integration
- [ ] Multiple payment methods (Bank transfer, e-wallet)
- [ ] Automatic billing
- [ ] Payment failure handling
- [ ] Refund processing

---

### Phase 5: Reports & Analytics (Week 9-10)

#### 📊 Dashboard Analytics
- [ ] User adoption metrics
- [ ] School performance KPIs
- [ ] Financial reports
- [ ] Usage analytics
- [ ] Trend analysis

#### 📈 Advanced Reporting
- [ ] Custom report builder
- [ ] Scheduled reports
- [ ] PDF report generation
- [ ] Data export (CSV, Excel)
- [ ] Report sharing functionality

#### 📱 Mobile Optimization
- [ ] Responsive design for all screens
- [ ] Touch-friendly interactions
- [ ] Offline capability
- [ ] Performance optimization
- [ ] Loading states and error handling

---

## 🛠️ Technical Implementation

### State Management (Zustand)
- [ ] Auth store implementation
- [ ] Management store setup
- [ ] Subscription store
- [ ] UI state management
- [ ] Persistent storage integration

### UI Components
- [ ] Design system setup
- [ ] Common components library
  - [ ] Button variants
  - [ ] Input components
  - [ ] Card components
  - [ ] Modal components
  - [ ] Loading spinners
  - [ ] Toast notifications

### API Integration
- [ ] Supabase client configuration
- [ ] API service layer
- [ ] Error handling middleware
- [ ] Request/response interceptors
- [ ] Offline queue management

### Testing
- [ ] Unit tests for utilities
- [ ] Component testing
- [ ] Integration tests
- [ ] E2E testing setup
- [ ] Performance testing

---

## 🌐 Localization & Cultural Considerations

- [ ] Indonesian language support
- [ ] Islamic calendar integration
- [ ] Prayer time considerations
- [ ] Cultural UI/UX adaptations
- [ ] Local payment method support

---

## 🚀 Deployment & DevOps

- [ ] Environment configuration (dev/staging/prod)
- [ ] CI/CD pipeline setup
- [ ] App store deployment preparation
- [ ] Performance monitoring
- [ ] Error tracking (Sentry)
- [ ] Analytics integration

---

## 📚 Documentation

- [ ] API documentation
- [ ] Component documentation
- [ ] User guide creation
- [ ] Admin manual
- [ ] Deployment guide

---

## 🎯 Success Metrics

- [ ] Onboarding completion rate: >90%
- [ ] Teacher activation rate: >80%
- [ ] Monthly churn rate: <2%
- [ ] App performance: <3s load time
- [ ] User satisfaction: >4.5/5 rating

---

## 🔄 Current Status

**Overall Progress**: 15% (UI Foundation Complete)  
**Current Phase**: Phase 1 - Authentication & Onboarding  
**Next Milestone**: Complete authentication system setup  
**Blockers**: None  
**Team**: Ready to continue development

### ✅ Recently Completed (December 2024)
- **UI Foundation Setup**: Gluestack UI v2 integration complete
- **Component Library**: Added Button, Input, Card components
- **Authentication Screens**: LoginScreen and SignUpScreen modernized
- **Home Dashboard**: Modernized with responsive design
- **Styling System**: Migrated from StyleSheet to Tailwind CSS
- **Development Environment**: Expo development server configured

---

## 📝 Notes

- Focus on mobile-first design
- Prioritize user experience for moderate tech users
- Ensure scalability for growing schools
- Maintain security best practices
- Regular user feedback integration

---

**Last Updated**: December 2024  
**Next Review**: Weekly during development phases
</file>

<file path="docs/WORK_SUMMARY.md">
# SchoolSync UI Modernization Summary

**Date**: December 2024  
**Task**: UI Foundation Setup and Modernization  
**Status**: ✅ Completed  
**Progress**: 15% of overall project

---

## 🎯 What Was Accomplished

### 1. Gluestack UI v2 Integration
- **Initialized Gluestack UI v2** in the existing Expo React Native project
- **Configured Tailwind CSS** for modern styling approach
- **Updated package.json** with necessary dependencies
- **Integrated GluestackUIProvider** in the app root

### 2. UI Component Library Setup
- **Added Button component** (`npx gluestack-ui add button`)
- **Added Input component** (`npx gluestack-ui add input`)
- **Added Card component** (`npx gluestack-ui add card`)
- **Verified component installation** in `components/ui/` directory

### 3. Authentication Screens Modernization

#### LoginScreen (`components/auth/LoginScreen.tsx`)
- **Replaced native React Native components** with Gluestack UI:
  - `TextInput` → `Input` + `InputField`
  - `TouchableOpacity` → `Button` + `ButtonText`
  - Added `ButtonSpinner` for loading states
  - Wrapped form in `Card` component
- **Migrated from StyleSheet to Tailwind CSS**
- **Maintained existing functionality** (useAuthStore integration)
- **Improved accessibility** and visual consistency

#### SignUpScreen (`components/auth/SignUpScreen.tsx`)
- **Complete modernization** of the registration form
- **Replaced all native components** with Gluestack UI equivalents
- **Applied Tailwind CSS classes** for responsive design
- **Removed legacy StyleSheet code** entirely
- **Enhanced form layout** with proper spacing and visual hierarchy
- **Maintained validation logic** and state management

### 4. Home Dashboard Modernization

#### Home Screen (`app/(drawer)/index.tsx`)
- **Created modern dashboard layout** with:
  - Welcome header with user greeting
  - Statistics cards showing key metrics
  - Quick action buttons for common tasks
  - Recent activity section
- **Implemented responsive design** using Tailwind CSS
- **Used Gluestack UI components** for consistency
- **Added proper navigation structure**

### 5. Development Environment
- **Started Expo development server** (`npm start`)
- **Verified Metro Bundler** is running correctly
- **Confirmed web preview** accessibility at `http://localhost:8081`
- **Tested UI components** in development environment

---

## 🛠️ Technical Improvements

### Design System
- **Consistent component library** across the app
- **Modern UI patterns** following current best practices
- **Improved accessibility** with proper ARIA labels
- **Responsive design** that works on various screen sizes

### Code Quality
- **Eliminated StyleSheet usage** in favor of Tailwind CSS
- **Reduced code complexity** with pre-built components
- **Better maintainability** through consistent patterns
- **Improved developer experience** with better tooling

### Performance
- **Optimized component rendering** with Gluestack UI
- **Reduced bundle size** by removing custom styling code
- **Better tree-shaking** with modular component imports

---

## 📁 Files Modified

### Core Configuration
- `package.json` - Added Gluestack UI dependencies
- `app/_layout.tsx` - Integrated GluestackUIProvider
- `tailwind.config.js` - Configured Tailwind CSS

### UI Components Added
- `components/ui/button/` - Button component
- `components/ui/input/` - Input component
- `components/ui/card/` - Card component
- `components/ui/gluestack-ui-provider/` - Provider component

### Screens Modernized
- `components/auth/LoginScreen.tsx` - Complete UI overhaul
- `components/auth/SignUpScreen.tsx` - Complete UI overhaul
- `app/(drawer)/index.tsx` - Dashboard modernization

### Documentation
- `TODO.md` - Updated with completed tasks
- `WORK_SUMMARY.md` - This summary file

---

## 🎯 Next Steps for AI Agent

### Immediate Priorities
1. **Complete ForgotPasswordScreen modernization** - Apply same Gluestack UI patterns
2. **Implement remaining authentication features** - Password reset flow, validation
3. **Setup Supabase authentication** - Backend integration
4. **Create onboarding flow** - 5-step process as outlined in TODO.md

### Technical Considerations
- **Maintain consistency** with established Gluestack UI patterns
- **Use Tailwind CSS classes** for all styling (no StyleSheet)
- **Follow responsive design principles** established in home screen
- **Preserve existing state management** (useAuthStore, etc.)

### Code Patterns to Follow
```tsx
// Import pattern
import { Button, ButtonText, Input, InputField, Card } from '@/components/ui'

// Component structure
<Card className="p-6 m-4">
  <Input className="mb-4">
    <InputField placeholder="Email" />
  </Input>
  <Button className="w-full">
    <ButtonText>Submit</ButtonText>
  </Button>
</Card>
```

### Development Environment
- **Server is configured** and ready (`npm start`)
- **Preview available** at `http://localhost:8081`
- **Hot reload enabled** for rapid development

---

## 📊 Project Status

**Overall Progress**: 15% complete  
**Current Phase**: Phase 1 - Authentication & Onboarding  
**UI Foundation**: ✅ Complete  
**Authentication Screens**: ✅ 2/3 Complete (Login, SignUp done; ForgotPassword pending)  
**Dashboard**: ✅ Basic layout complete  
**Next Milestone**: Complete authentication system with backend integration

---

## 🔗 Key Resources

- **Gluestack UI Documentation**: https://ui.gluestack.io/
- **Tailwind CSS Classes**: Use for all styling
- **Expo Documentation**: For React Native specific features
- **Project TODO**: See `TODO.md` for complete roadmap

---

*This summary provides the next AI agent with complete context of the UI modernization work completed and clear direction for continuing the project.*
</file>

<file path="eslint.config.js">
/* eslint-env node */
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
  {
    rules: {
      'react/display-name': 'off',
    },
  },
]);
</file>

<file path="global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="gluestack-ui.config.json">
{
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "global.css"
  },
  "app": {
    "entry": "app/_layout.tsx",
    "components": "components/ui"
  }
}
</file>

<file path="nativewind-env.d.ts">
/// <reference types="nativewind/types" />
</file>

<file path="prettier.config.js">
module.exports = {
  printWidth: 100,
  tabWidth: 2,
  singleQuote: true,
  bracketSameLine: true,
  trailingComma: 'es5',

  plugins: [require.resolve('prettier-plugin-tailwindcss')],
  tailwindAttributes: ['className'],
};
</file>

<file path="store/store.ts">
import { create } from 'zustand';

export interface BearState {
  bears: number;
  increasePopulation: () => void;
  removeAllBears: () => void;
  updateBears: (newBears: number) => void;
}

export const useStore = create<BearState>((set) => ({
  bears: 0,
  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),
  removeAllBears: () => set({ bears: 0 }),
  updateBears: (newBears) => set({ bears: newBears }),
}));
</file>

<file path="test-registration.js">
// Test script to simulate user registration and test retry mechanism
const { createClient } = require('@supabase/supabase-js');

// Initialize Supabase client
const supabaseUrl = 'https://iqysbtxkcqnxjgjvdnbu.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlxeXNidHhrY3FueGpnanZkbmJ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg3NjQ2MzQsImV4cCI6MjA2NDM0MDYzNH0.JVeMIGSGh5ewMh9FVCJY01biIGgwx6O2u9FLfIlWsMY';
const supabase = createClient(supabaseUrl, supabaseKey);

// Generate a unique email for testing
const testEmail = `testretrytester${Math.floor(Math.random() * 10000)}@gmail.com`;
const testPassword = 'Test123456!';

// Function to simulate user registration
async function testRegistration() {
  console.log(`Testing registration with email: ${testEmail}`);
  
  try {
    // Step 1: Register the user
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Test Retry User',
          role: 'management',
        },
      },
    });

    if (signUpError) {
      console.error('Registration error:', signUpError);
      return;
    }

    console.log('User registered successfully:', signUpData.user.id);
    
    // Set the session in the Supabase client to ensure proper authentication
    if (signUpData.session) {
      supabase.auth.setSession({
        access_token: signUpData.session.access_token,
        refresh_token: signUpData.session.refresh_token
      });
      console.log('Auth session set successfully');
    } else {
      console.log('No session available from signUp, attempting to get session...');
      const { data: sessionData } = await supabase.auth.getSession();
      if (sessionData?.session) {
        console.log('Retrieved session successfully');
      } else {
        console.log('No session available, profile fetch may fail due to auth');
      }
    }
    
    // Step 2: Immediately try to fetch the profile (this would normally trigger the retry mechanism in the app)
    const { data: profileData, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('id', signUpData.user.id)
      .single();
    
    if (profileError) {
      console.error('Initial profile fetch error (expected if trigger is still processing):', profileError);
    } else {
      console.log('Profile fetched immediately (no retry needed):', profileData);
    }
    
    // Perform multiple retries with longer delays to match our updated loadUserProfile function
    const maxRetries = 5;
    const retryDelay = 1000; // 1 second
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      console.log(`Attempt ${attempt} of ${maxRetries}...`);
      
      // Wait before retry
      await new Promise(resolve => setTimeout(resolve, retryDelay));
      
      const { data: profileData, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single();
      
      if (profileError) {
        console.error(`Profile fetch error on attempt ${attempt}:`, profileError);
        
        if (attempt === maxRetries) {
          console.log('Test result: FAILED - Profile not available after all retries');
        }
      } else {
        console.log(`Profile fetched successfully on attempt ${attempt}:`, profileData);
        console.log('Test result: SUCCESS - Profile available within retry window');
        break; // Exit the loop if successful
      }
    }
    
  } catch (error) {
    console.error('Unexpected error during test:', error);
  }
}

// Run the test
testRegistration();
</file>

<file path="utils/supabase.ts">
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});
</file>

<file path="app/auth/index.tsx">
import React, { useState, useEffect } from 'react';
import { View } from 'react-native';
import { router } from 'expo-router';
import { useAuthStore } from '../../store/authStore';
import LoginScreen from '../../components/auth/LoginScreen';
import SignUpScreen from '../../components/auth/SignUpScreen';
import ForgotPasswordScreen from '../../components/auth/ForgotPasswordScreen';

type AuthScreen = 'login' | 'signup' | 'forgot-password';

export default function AuthIndex() {
  const [currentScreen, setCurrentScreen] = useState<AuthScreen>('login');
  const { user, session, profile, initialize } = useAuthStore();

  useEffect(() => {
    // Initialize auth store
    initialize();
  }, [initialize]);

  useEffect(() => {
    // Redirect based on user authentication and onboarding status
    if (user && session) {
      // Check if user has completed onboarding (has a school_id)
      if (profile?.school_id) {
        router.replace('/dashboard');
      } else {
        // User is authenticated but hasn't completed onboarding
        router.replace('/auth/onboarding');
      }
    }
  }, [user, session, profile]);

  const handleNavigateToSignUp = () => {
    setCurrentScreen('signup');
  };

  const handleNavigateToLogin = () => {
    setCurrentScreen('login');
  };

  const handleNavigateToForgotPassword = () => {
    setCurrentScreen('forgot-password');
  };

  const renderCurrentScreen = () => {
    switch (currentScreen) {
      case 'login':
        return (
          <LoginScreen
            onNavigateToSignUp={handleNavigateToSignUp}
            onNavigateToForgotPassword={handleNavigateToForgotPassword}
          />
        );
      case 'signup':
        return (
          <SignUpScreen
            onNavigateToLogin={handleNavigateToLogin}
          />
        );
      case 'forgot-password':
        return (
          <ForgotPasswordScreen
            onNavigateToLogin={handleNavigateToLogin}
          />
        );
      default:
        return (
          <LoginScreen
            onNavigateToSignUp={handleNavigateToSignUp}
            onNavigateToForgotPassword={handleNavigateToForgotPassword}
          />
        );
    }
  };

  return (
    <View className="flex-1">
      {renderCurrentScreen()}
    </View>
  );
}
</file>

<file path="app/auth/onboarding/index.tsx">
import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  BackHandler,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { router } from 'expo-router';
import { useAuthStore } from '../../../store/authStore';
import BasicInfoStep from '../../../components/onboarding/BasicInfoStep';
import SchoolInfoStep from '../../../components/onboarding/SchoolInfoStep';
// Removed PlanSelectionStep and TeacherInviteStep imports - simplified onboarding
import WelcomeStep from '../../../components/onboarding/WelcomeStep';

export interface OnboardingData {
  // Basic Info
  fullName: string;
  phone: string;
  position: string; // Auto-set to 'management' - not collected in UI
  
  // School Info
  schoolName: string;
  schoolType: string; // Optional - can be set later
  address: string; // Optional - can be set later
  city: string;
  province: string;
  studentCount: number; // Optional - can be set later
  
  // Plan Selection - removed from onboarding, will use default
  // selectedPlan: 'starter' | 'professional' | 'enterprise';
  
  // Teacher Invites - removed from onboarding, can be done later
  // teacherInvites: {
  //   name: string;
  //   email: string;
  //   subject?: string;
  // }[];
}

const TOTAL_STEPS = 3;

export default function OnboardingIndex() {
  const [currentStep, setCurrentStep] = useState(1);
  const [onboardingData, setOnboardingData] = useState<OnboardingData>({
    fullName: '',
    phone: '',
    position: 'management', // Auto-set since user is already in management role
    schoolName: '',
    schoolType: '', // Will be set later or use default
    address: '', // Will be set later
    city: '',
    province: '',
    studentCount: 0, // Will be set later
    // selectedPlan: 'starter', // Will use default plan
    // teacherInvites: [], // Will be handled separately
  });
  
  const { user, profile, updateProfile, createSchool } = useAuthStore();

  const handlePrevious = useCallback(() => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  }, [currentStep]);

  useEffect(() => {
    // Check if user is authenticated
    if (!user) {
      router.replace('/auth');
      return;
    }

    // Pre-fill data from profile if available
    if (profile) {
      setOnboardingData(prev => ({
        ...prev,
        fullName: profile.full_name || '',
        phone: profile.phone || '',
      }));
    }
  }, [user, profile]);

  useEffect(() => {
    // Handle Android back button
    const backAction = () => {
      if (currentStep > 1) {
        handlePrevious();
        return true;
      } else {
        Alert.alert(
          'Keluar dari Onboarding',
          'Apakah Anda yakin ingin keluar? Progress akan hilang.',
          [
            { text: 'Batal', style: 'cancel' },
            { text: 'Keluar', onPress: () => router.replace('/auth') },
          ]
        );
        return true;
      }
    };

    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
    return () => backHandler.remove();
  }, [currentStep, handlePrevious]);

  const updateOnboardingData = (updates: Partial<OnboardingData>) => {
    setOnboardingData(prev => ({ ...prev, ...updates }));
  };

  const handleNext = async () => {
    if (currentStep < TOTAL_STEPS) {
      setCurrentStep(prev => prev + 1);
    } else {
      // Complete onboarding
      await completeOnboarding();
    }
  };

  const completeOnboarding = async () => {
    try {
      // Update user profile
      await updateProfile({
        full_name: onboardingData.fullName,
        phone: onboardingData.phone,
      });

      // Create school
      const schoolResult = await createSchool({
        name: onboardingData.schoolName,
        address: onboardingData.address,
        city: onboardingData.city,
        province: onboardingData.province,
      });

      if (schoolResult.success) {
        // Plan selection and teacher invitations will be handled separately after onboarding
        
        // Navigate directly to dashboard without showing popup
        router.replace('/dashboard');
      } else {
        Alert.alert('Error', schoolResult.error || 'Gagal membuat sekolah');
      }
    } catch (error) {
      console.error('Onboarding completion error:', error);
      Alert.alert('Error', 'Terjadi kesalahan saat menyelesaikan onboarding');
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <BasicInfoStep
            data={onboardingData}
            onUpdate={updateOnboardingData}
            onNext={handleNext}
          />
        );
      case 2:
        return (
          <SchoolInfoStep
            data={onboardingData}
            onUpdate={updateOnboardingData}
            onNext={handleNext}
            onBack={handlePrevious}
          />
        );
      case 3:
        return (
          <WelcomeStep
            data={onboardingData}
            onComplete={completeOnboarding}
          />
        );
      // Removed case 4 (TeacherInviteStep) and case 5 (moved WelcomeStep to case 3)
      default:
        return null;
    }
  };

  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return 'Informasi Dasar';
      case 2: return 'Informasi Sekolah';
      case 3: return 'Selamat Datang';
      default: return '';
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Progress Header */}
      <View style={styles.header}>
        <View style={styles.progressContainer}>
          <View style={styles.progressBar}>
            <View 
              style={[
                styles.progressFill, 
                { width: `${(currentStep / TOTAL_STEPS) * 100}%` }
              ]} 
            />
          </View>
          <Text style={styles.progressText}>
            {currentStep} dari {TOTAL_STEPS}
          </Text>
        </View>
        
        <Text style={styles.stepTitle}>{getStepTitle()}</Text>
        
        {currentStep > 1 && (
          <TouchableOpacity
            style={styles.backButton}
            onPress={handlePrevious}
          >
            <Text style={styles.backButtonText}>← Kembali</Text>
          </TouchableOpacity>
        )}
      </View>

      {/* Step Content */}
      <View style={styles.content}>
        {renderStep()}
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    paddingHorizontal: 24,
    paddingVertical: 20,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  progressContainer: {
    marginBottom: 16,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#e5e7eb',
    borderRadius: 2,
    marginBottom: 8,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#3b82f6',
    borderRadius: 2,
  },
  progressText: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
  },
  stepTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    textAlign: 'center',
    marginBottom: 8,
  },
  backButton: {
    alignSelf: 'flex-start',
  },
  backButtonText: {
    color: '#3b82f6',
    fontSize: 16,
    fontWeight: '500',
  },
  content: {
    flex: 1,
  },
});
</file>

<file path="components/auth/SignUpScreen.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  TouchableOpacity,
  TextInput,
  StyleSheet,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuthStore } from '../../store/authStore';
import { router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

interface SignUpScreenProps {
  onNavigateToLogin?: () => void;
}

export default function SignUpScreen({ onNavigateToLogin }: SignUpScreenProps) {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
  });

  const [acceptedTerms, setAcceptedTerms] = useState(false);
  
  const { signUp, loading, error, clearError } = useAuthStore();

  const handleSignUp = async () => {
    // Validation
    if (!formData.email.trim() || !validateEmail(formData.email)) {
      Alert.alert('Error', 'Mohon isi email yang valid');
      return;
    }

    if (!formData.password || formData.password.length < 6) {
      Alert.alert('Error', 'Password minimal 6 karakter');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      Alert.alert('Error', 'Konfirmasi password tidak cocok');
      return;
    }

    if (!acceptedTerms) {
      Alert.alert('Error', 'Mohon setujui syarat dan ketentuan');
      return;
    }

    const result = await signUp(
      formData.email.trim().toLowerCase(),
      formData.password,
      {
        role: 'management',
      }
    );
    
    if (result.success) {
      Alert.alert(
        'Registrasi Berhasil',
        'Silakan cek email Anda untuk verifikasi akun',
        [
          {
            text: 'OK',
            onPress: () => {
              // Use setTimeout to ensure navigation happens after Alert is dismissed
              setTimeout(() => {
                router.replace('/auth/onboarding');
              }, 100);
            },
          },
        ]
      );
    } else {
      Alert.alert('Registrasi Gagal', result.error || 'Terjadi kesalahan saat registrasi');
    }
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password: string) => {
    return password.length >= 6;
  };

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const isFormValid = 
    formData.email.trim() &&
    validateEmail(formData.email) &&
    formData.password.length >= 6 &&
    formData.password === formData.confirmPassword &&
    acceptedTerms;

  React.useEffect(() => {
    if (error) {
      Alert.alert('Error', error);
      clearError();
    }
  }, [error, clearError]);

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView
          contentContainerStyle={styles.scrollView}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.headerTitle}>
                Daftar Akun Baru
              </Text>
              <Text style={styles.headerSubtitle}>
                Buat akun dengan email dan password. Informasi lainnya akan dilengkapi setelah pendaftaran.
              </Text>
            </View>

            {/* Main Card */}
            <View style={styles.card}>
              <View style={styles.formContainer}>
                 {/* Email Input */}
                 <View style={styles.inputGroup}>
                   <Text style={styles.inputLabel}>
                     Email *
                   </Text>
                   <TextInput
                     style={[styles.input, formData.email && !validateEmail(formData.email) && styles.inputError]}
                     placeholder="nama@email.com"
                     value={formData.email}
                     onChangeText={(text) => setFormData(prev => ({ ...prev, email: text }))}
                     keyboardType="email-address"
                     autoCapitalize="none"
                     autoCorrect={false}
                     placeholderTextColor="#9CA3AF"
                   />
                   {formData.email && !validateEmail(formData.email) && (
                     <Text style={styles.errorText}>
                       Format email tidak valid
                     </Text>
                   )}
                 </View>

                 {/* Password Input */}
                 <View style={styles.inputGroup}>
                   <Text style={styles.inputLabel}>
                     Password *
                   </Text>
                   <TextInput
                     style={[styles.input, formData.password && !validatePassword(formData.password) && styles.inputError]}
                     placeholder="Minimal 6 karakter"
                     value={formData.password}
                     onChangeText={(text) => setFormData(prev => ({ ...prev, password: text }))}
                     secureTextEntry
                     placeholderTextColor="#9CA3AF"
                   />
                   {formData.password && !validatePassword(formData.password) && (
                     <Text style={styles.errorText}>
                       Password minimal 6 karakter
                     </Text>
                   )}
                 </View>

                 {/* Confirm Password Input */}
                 <View style={styles.inputGroup}>
                   <Text style={styles.inputLabel}>
                     Konfirmasi Password *
                   </Text>
                   <TextInput
                     style={[styles.input, formData.confirmPassword && formData.password !== formData.confirmPassword && styles.inputError]}
                     placeholder="Ulangi password"
                     value={formData.confirmPassword}
                     onChangeText={(text) => setFormData(prev => ({ ...prev, confirmPassword: text }))}
                     secureTextEntry
                     placeholderTextColor="#9CA3AF"
                   />
                   {formData.confirmPassword && formData.password !== formData.confirmPassword && (
                     <Text style={styles.errorText}>
                       Password tidak cocok
                     </Text>
                   )}
                 </View>

                 {/* Terms and Conditions */}
                 <View style={styles.termsContainer}>
                   <TouchableOpacity
                     onPress={() => setAcceptedTerms(!acceptedTerms)}
                     style={styles.checkboxContainer}
                   >
                     <View style={[styles.checkbox, acceptedTerms && styles.checkboxChecked]}>
                       {acceptedTerms && (
                         <Ionicons name="checkmark" size={12} color="white" />
                       )}
                     </View>
                   </TouchableOpacity>
                   <Text style={styles.termsText}>
                     Saya menyetujui{' '}
                     <Text style={styles.termsLink}>
                       Syarat dan Ketentuan
                     </Text>
                     {' '}serta{' '}
                     <Text style={styles.termsLink}>
                       Kebijakan Privasi
                     </Text>
                     {' '}SchoolSync
                   </Text>
                 </View>

                 {/* Sign Up Button */}
                 <TouchableOpacity
                   style={[styles.signUpButton, (!isFormValid || loading) && styles.signUpButtonDisabled]}
                   onPress={handleSignUp}
                   disabled={!isFormValid || loading}
                 >
                   <Text style={styles.signUpButtonText}>
                     {loading ? 'Mendaftar...' : 'Daftar Sekarang'}
                   </Text>
                 </TouchableOpacity>

                 {/* Login Link */}
                 <View style={styles.loginLinkContainer}>
                   <Text style={styles.loginText}>
                     Sudah punya akun?{' '}
                     <Text
                       style={styles.loginLink}
                       onPress={onNavigateToLogin}
                     >
                       Masuk di sini
                     </Text>
                   </Text>
                 </View>
              </View>
            </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  keyboardView: {
    flex: 1,
  },
  scrollView: {
    flexGrow: 1,
  },
  scrollContent: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    marginBottom: 32,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 16,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#6B7280',
    lineHeight: 24,
    textAlign: 'center',
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
    marginBottom: 24,
  },
  formContainer: {
    gap: 24,
  },
  inputGroup: {
    marginBottom: 4,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 12,
  },
  input: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#F9FAFB',
    color: '#111827',
  },
  inputError: {
    borderColor: '#EF4444',
  },
  errorText: {
    fontSize: 14,
    color: '#EF4444',
    marginTop: 8,
  },
  termsContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginTop: 8,
    gap: 12,
  },
  checkboxContainer: {
    marginTop: 4,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderWidth: 2,
    borderColor: '#9CA3AF',
    borderRadius: 4,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
  },
  checkboxChecked: {
    backgroundColor: '#3B82F6',
    borderColor: '#3B82F6',
  },
  termsText: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
    flex: 1,
  },
  termsLink: {
    color: '#3B82F6',
    fontWeight: '600',
  },
  signUpButton: {
    backgroundColor: '#3B82F6',
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 32,
  },
  signUpButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  signUpButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  loginLinkContainer: {
    alignItems: 'center',
    marginTop: 32,
  },
  loginText: {
    fontSize: 16,
    color: '#6B7280',
  },
  loginLink: {
    color: '#3B82F6',
    fontWeight: '600',
  },
});
</file>

<file path="components/onboarding/BasicInfoStep.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { OnboardingData } from '../../app/auth/onboarding';

interface BasicInfoStepProps {
  data: OnboardingData;
  onUpdate: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
}

// Position options removed - user is already in management role

export default function BasicInfoStep({ data, onUpdate, onNext }: BasicInfoStepProps) {

  const validatePhone = (phone: string) => {
    // Indonesian phone number validation
    const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
    return phoneRegex.test(phone.replace(/[\s-]/g, ''));
  };

  const handleNext = () => {
    // Validation
    if (!data.fullName.trim()) {
      Alert.alert('Error', 'Mohon isi nama lengkap');
      return;
    }

    if (!data.phone.trim() || !validatePhone(data.phone)) {
      Alert.alert('Error', 'Mohon isi nomor telepon yang valid');
      return;
    }

    // Position validation removed - user is already in management role

    onNext();
  };

  // Position handling functions removed - user is already in management role

  const isFormValid = 
    data.fullName.trim() &&
    data.phone.trim() &&
    validatePhone(data.phone);

  return (
    <ScrollView style={styles.container} keyboardShouldPersistTaps="handled">
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>Informasi Dasar</Text>
          <Text style={styles.subtitle}>
            Kami perlu mengetahui beberapa informasi dasar tentang Anda
          </Text>
        </View>

        {/* Form */}
        <View style={styles.form}>
          {/* Full Name */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Nama Lengkap *</Text>
            <TextInput
              style={styles.input}
              placeholder="Masukkan nama lengkap Anda"
              value={data.fullName}
              onChangeText={(value) => onUpdate({ fullName: value })}
              autoCapitalize="words"
              autoCorrect={false}
            />
          </View>

          {/* Phone */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Nomor Telepon *</Text>
            <TextInput
              style={[
                styles.input,
                data.phone && !validatePhone(data.phone) && styles.inputError
              ]}
              placeholder="Contoh: 08123456789"
              value={data.phone}
              onChangeText={(value) => onUpdate({ phone: value })}
              keyboardType="phone-pad"
              autoCorrect={false}
            />
            {data.phone && !validatePhone(data.phone) && (
              <Text style={styles.errorText}>Format nomor telepon tidak valid</Text>
            )}
          </View>

          {/* Position field removed - user is already in management role */}

          {/* Info Box */}
          <View style={styles.infoBox}>
            <Text style={styles.infoTitle}>💡 Mengapa kami memerlukan informasi ini?</Text>
            <Text style={styles.infoText}>
              Informasi ini membantu kami menyesuaikan pengalaman SchoolSync dengan kebutuhan dan peran Anda di pesantren.
            </Text>
          </View>
        </View>

        {/* Next Button */}
        <TouchableOpacity
          style={[
            styles.nextButton,
            !isFormValid && styles.nextButtonDisabled
          ]}
          onPress={handleNext}
          disabled={!isFormValid}
        >
          <Text style={styles.nextButtonText}>Lanjutkan</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    marginBottom: 32,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    lineHeight: 24,
  },
  form: {
    marginBottom: 32,
  },
  inputContainer: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    backgroundColor: 'white',
    color: '#1f2937',
  },
  inputError: {
    borderColor: '#ef4444',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 14,
    marginTop: 4,
  },
  dropdownButton: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    backgroundColor: 'white',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  dropdownButtonText: {
    fontSize: 16,
    color: '#1f2937',
    flex: 1,
  },
  placeholderText: {
    color: '#9ca3af',
  },
  dropdownArrow: {
    fontSize: 12,
    color: '#6b7280',
  },
  dropdown: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    backgroundColor: 'white',
    marginTop: 4,
    maxHeight: 200,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  dropdownOption: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f3f4f6',
  },
  dropdownOptionSelected: {
    backgroundColor: '#dbeafe',
  },
  dropdownOptionText: {
    fontSize: 16,
    color: '#1f2937',
  },
  dropdownOptionTextSelected: {
    color: '#3b82f6',
    fontWeight: '500',
  },
  customPositionContainer: {
    marginTop: 8,
    position: 'relative',
  },
  submitCustomButton: {
    position: 'absolute',
    right: 12,
    top: 12,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#3b82f6',
    alignItems: 'center',
    justifyContent: 'center',
  },
  submitCustomButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  infoBox: {
    backgroundColor: '#f0f9ff',
    borderRadius: 12,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#3b82f6',
  },
  infoTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  infoText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
  },
  nextButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  nextButtonDisabled: {
    backgroundColor: '#9ca3af',
    shadowOpacity: 0,
    elevation: 0,
  },
  nextButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="components/onboarding/SchoolInfoStep.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { OnboardingData } from '../../app/auth/onboarding';

interface SchoolInfoStepProps {
  data: OnboardingData;
  onUpdate: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
  onBack: () => void;
}

// School types removed - simplified onboarding

const PROVINCES = [
  'Aceh',
  'Sumatera Utara',
  'Sumatera Barat',
  'Riau',
  'Kepulauan Riau',
  'Jambi',
  'Sumatera Selatan',
  'Bangka Belitung',
  'Bengkulu',
  'Lampung',
  'DKI Jakarta',
  'Jawa Barat',
  'Jawa Tengah',
  'DI Yogyakarta',
  'Jawa Timur',
  'Banten',
  'Bali',
  'Nusa Tenggara Barat',
  'Nusa Tenggara Timur',
  'Kalimantan Barat',
  'Kalimantan Tengah',
  'Kalimantan Selatan',
  'Kalimantan Timur',
  'Kalimantan Utara',
  'Sulawesi Utara',
  'Sulawesi Tengah',
  'Sulawesi Selatan',
  'Sulawesi Tenggara',
  'Gorontalo',
  'Sulawesi Barat',
  'Maluku',
  'Maluku Utara',
  'Papua',
  'Papua Barat',
  'Papua Selatan',
  'Papua Tengah',
  'Papua Pegunungan',
  'Papua Barat Daya',
];

export default function SchoolInfoStep({ data, onUpdate, onNext, onBack }: SchoolInfoStepProps) {
  const [showProvinceDropdown, setShowProvinceDropdown] = useState(false);

  // Student count validation removed - simplified onboarding

  const handleNext = () => {
    // Validation
    if (!data.schoolName.trim()) {
      Alert.alert('Error', 'Mohon isi nama pesantren');
      return;
    }

    // School type and address validation removed - simplified onboarding

    if (!data.city.trim()) {
      Alert.alert('Error', 'Mohon isi kota/kabupaten');
      return;
    }

    if (!data.province.trim()) {
      Alert.alert('Error', 'Mohon pilih provinsi');
      return;
    }

    // Student count validation removed - simplified onboarding

    onNext();
  };

  // School type handling functions removed - simplified onboarding

  const handleProvinceSelect = (province: string) => {
    onUpdate({ province });
    setShowProvinceDropdown(false);
  };

  const isFormValid = 
    data.schoolName.trim() &&
    data.city.trim() &&
    data.province.trim();

  return (
    <ScrollView style={styles.container} keyboardShouldPersistTaps="handled">
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>Informasi Pesantren</Text>
          <Text style={styles.subtitle}>
            Berikan informasi dasar tentang pesantren Anda
          </Text>
        </View>

        {/* Form */}
        <View style={styles.form}>
          {/* School Name */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Nama Pesantren *</Text>
            <TextInput
              style={styles.input}
              placeholder="Contoh: Pondok Pesantren Al-Hikmah"
              value={data.schoolName}
              onChangeText={(value) => onUpdate({ schoolName: value })}
              autoCapitalize="words"
              autoCorrect={false}
            />
          </View>

          {/* School type and address fields removed - simplified onboarding */}

          {/* City */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Kota/Kabupaten *</Text>
            <TextInput
              style={styles.input}
              placeholder="Contoh: Bogor"
              value={data.city}
              onChangeText={(value) => onUpdate({ city: value })}
              autoCapitalize="words"
              autoCorrect={false}
            />
          </View>

          {/* Province */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>Provinsi *</Text>
            
            <TouchableOpacity
              style={styles.dropdownButton}
              onPress={() => setShowProvinceDropdown(!showProvinceDropdown)}
            >
              <Text style={[
                styles.dropdownButtonText,
                !data.province && styles.placeholderText
              ]}>
                {data.province || 'Pilih provinsi'}
              </Text>
              <Text style={styles.dropdownArrow}>
                {showProvinceDropdown ? '▲' : '▼'}
              </Text>
            </TouchableOpacity>

            {showProvinceDropdown && (
              <ScrollView style={styles.dropdown} nestedScrollEnabled>
                {PROVINCES.map((province, index) => (
                  <TouchableOpacity
                    key={index}
                    style={[
                      styles.dropdownOption,
                      data.province === province && styles.dropdownOptionSelected
                    ]}
                    onPress={() => handleProvinceSelect(province)}
                  >
                    <Text style={[
                      styles.dropdownOptionText,
                      data.province === province && styles.dropdownOptionTextSelected
                    ]}>
                      {province}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            )}
          </View>

          {/* Student count field removed - simplified onboarding */}

          {/* Info Box */}
          <View style={styles.infoBox}>
            <Text style={styles.infoTitle}>🏫 Informasi Pesantren</Text>
            <Text style={styles.infoText}>
              Informasi dasar pesantren Anda. Detail lainnya dapat dilengkapi setelah onboarding selesai.
            </Text>
          </View>
        </View>

        {/* Navigation Buttons */}
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.backButton} onPress={onBack}>
            <Text style={styles.backButtonText}>Kembali</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.nextButton,
              !isFormValid && styles.nextButtonDisabled
            ]}
            onPress={handleNext}
            disabled={!isFormValid}
          >
            <Text style={styles.nextButtonText}>Lanjutkan</Text>
          </TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    marginBottom: 32,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    lineHeight: 24,
  },
  form: {
    marginBottom: 32,
  },
  inputContainer: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    backgroundColor: 'white',
    color: '#1f2937',
  },
  textArea: {
    height: 80,
    paddingTop: 14,
  },
  inputError: {
    borderColor: '#ef4444',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 14,
    marginTop: 4,
  },
  dropdownButton: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    backgroundColor: 'white',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  dropdownButtonText: {
    fontSize: 16,
    color: '#1f2937',
    flex: 1,
  },
  placeholderText: {
    color: '#9ca3af',
  },
  dropdownArrow: {
    fontSize: 12,
    color: '#6b7280',
  },
  dropdown: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    backgroundColor: 'white',
    marginTop: 4,
    maxHeight: 200,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  dropdownOption: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f3f4f6',
  },
  dropdownOptionSelected: {
    backgroundColor: '#dbeafe',
  },
  dropdownOptionText: {
    fontSize: 16,
    color: '#1f2937',
  },
  dropdownOptionTextSelected: {
    color: '#3b82f6',
    fontWeight: '500',
  },
  customInputContainer: {
    marginTop: 8,
    position: 'relative',
  },
  submitCustomButton: {
    position: 'absolute',
    right: 12,
    top: 12,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#3b82f6',
    alignItems: 'center',
    justifyContent: 'center',
  },
  submitCustomButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  infoBox: {
    backgroundColor: '#f0f9ff',
    borderRadius: 12,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#3b82f6',
  },
  infoTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  infoText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 16,
  },
  backButton: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#6b7280',
    fontSize: 16,
    fontWeight: '600',
  },
  nextButton: {
    flex: 2,
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  nextButtonDisabled: {
    backgroundColor: '#9ca3af',
    shadowOpacity: 0,
    elevation: 0,
  },
  nextButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="components/onboarding/WelcomeStep.tsx">
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from 'react-native';
import { OnboardingData } from '../../app/auth/onboarding';

interface WelcomeStepProps {
  data: OnboardingData;
  onComplete: () => void;
}

export default function WelcomeStep({ data, onComplete }: WelcomeStepProps) {

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <View style={styles.content}>
        {/* Success Animation Area */}
        <View style={styles.successSection}>
          <View style={styles.successIcon}>
            <Text style={styles.successEmoji}>🎉</Text>
          </View>
          <Text style={styles.successTitle}>Selamat!</Text>
          <Text style={styles.successSubtitle}>
            Akun SchoolSync untuk {data.schoolName} berhasil dibuat
          </Text>
        </View>

        {/* Summary Card */}
        <View style={styles.summaryCard}>
          <Text style={styles.summaryTitle}>Ringkasan Setup</Text>
          
          <View style={styles.summaryItem}>
            <Text style={styles.summaryLabel}>Pesantren:</Text>
            <Text style={styles.summaryValue}>{data.schoolName}</Text>
          </View>
          
          <View style={styles.summaryItem}>
            <Text style={styles.summaryLabel}>Lokasi:</Text>
            <Text style={styles.summaryValue}>{data.city}, {data.province}</Text>
          </View>
        </View>

        {/* Complete Button */}
        <TouchableOpacity style={styles.completeButton} onPress={onComplete}>
          <Text style={styles.completeButtonText}>Mulai Menggunakan SchoolSync</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  content: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  successSection: {
    alignItems: 'center',
    marginBottom: 32,
  },
  successIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#dcfce7',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  successEmoji: {
    fontSize: 40,
  },
  successTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  successSubtitle: {
    fontSize: 16,
    color: '#64748b',
    textAlign: 'center',
    lineHeight: 24,
  },
  summaryCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 16,
  },
  summaryItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  summaryLabel: {
    fontSize: 14,
    color: '#64748b',
    fontWeight: '500',
  },
  summaryValue: {
    fontSize: 14,
    color: '#1e293b',
    fontWeight: '600',
    flex: 1,
    textAlign: 'right',
  },
  completeButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 16,
    paddingVertical: 18,
    alignItems: 'center',
    marginBottom: 24,
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 12,
  },
  completeButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});
</file>

<file path="metro.config.js">
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');

const { withNativeWind } = require('nativewind/metro');

/** @type {import('expo/metro-config').MetroConfig} */

const config = getDefaultConfig(__dirname);

config.resolver.unstable_enablePackageExports = false;

module.exports = withNativeWind(config, { input: './global.css' });
</file>

<file path="README.md">
# SchoolSync V2 🏫

A comprehensive school management system built with React Native and Expo, specifically designed for Indonesian boarding schools (Pesantren). This B2B SaaS solution empowers school management with modern tools to efficiently manage students, teachers, and administrative tasks.

## 🌟 Features

### 🔐 Authentication & User Management
- Secure authentication with Supabase
- Role-based access control (Management, Teachers, Students, Parents)
- User onboarding flow with school setup
- Teacher invitation system

### 📊 Management Dashboard
- Real-time school statistics and metrics
- Student enrollment tracking
- Teacher management interface
- Subscription and billing overview

### 🎓 Academic Management
- Student information system
- Class and grade management
- Academic calendar integration
- Performance tracking

### 💰 Subscription Management
- Tiered pricing plans (Starter, Growing, Enterprise)
- Student count-based billing
- Trial period management
- Payment processing integration

## 🛠️ Tech Stack

### Frontend
- **React Native** - Cross-platform mobile development
- **Expo** - Development platform and toolchain
- **Expo Router** - File-based navigation
- **TypeScript** - Type-safe development
- **Gluestack UI v2** - Modern component library
- **Tailwind CSS** - Utility-first styling
- **NativeWind** - Tailwind CSS for React Native

### Backend & Database
- **Supabase** - Backend-as-a-Service
- **PostgreSQL** - Relational database
- **Row Level Security (RLS)** - Data security
- **Real-time subscriptions** - Live data updates

### State Management
- **Zustand** - Lightweight state management
- **React Hooks** - Component state management

### Development Tools
- **ESLint** - Code linting
- **Prettier** - Code formatting
- **TypeScript** - Static type checking
- **Metro Bundler** - JavaScript bundler

## 🚀 Getting Started

### Prerequisites

- Node.js (v18 or higher)
- npm or yarn
- Expo CLI
- Android Studio (for Android development)
- Xcode (for iOS development, macOS only)

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/ramdhanhdy/SchoolSyncV2.git
   cd SchoolSyncV2
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up environment variables**
   ```bash
   cp .env.example .env
   ```
   
   Configure your Supabase credentials:
   ```env
   EXPO_PUBLIC_SUPABASE_URL=your_supabase_url
   EXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
   ```

4. **Set up the database**
   - Create a new Supabase project
   - Run the SQL schema from `database/schema.sql`
   - Configure Row Level Security policies

5. **Start the development server**
   ```bash
   npm start
   ```

### Running on Different Platforms

- **Android**: `npm run android`
- **iOS**: `npm run ios`
- **Web**: `npm run web`

## 📱 App Structure

```
app/
├── (drawer)/           # Main app with drawer navigation
│   ├── (tabs)/         # Tab-based navigation
│   └── index.tsx       # Dashboard home
├── auth/               # Authentication screens
│   ├── index.tsx       # Auth router
│   └── onboarding/     # School setup flow
├── _layout.tsx         # Root layout
└── index.tsx           # App entry point

components/
├── auth/               # Authentication components
├── onboarding/         # Onboarding flow components
└── ui/                 # Reusable UI components

store/
├── authStore.ts        # Authentication state
└── store.ts            # Global state management

utils/
└── supabase.ts         # Supabase client configuration
```

## 🗄️ Database Schema

The application uses a comprehensive PostgreSQL schema with the following main entities:

- **Schools** - School information and settings
- **Users** - User accounts with role-based access
- **Subscriptions** - Billing and plan management
- **Students** - Student information and enrollment
- **Teachers** - Teacher profiles and assignments
- **Classes** - Class management and scheduling
- **Grades** - Academic performance tracking

## 🔧 Development

### Code Style

This project uses ESLint and Prettier for code formatting:

```bash
# Lint code
npm run lint

# Format code
npm run format
```

### Project Structure Guidelines

- Use TypeScript for all new files
- Follow the established folder structure
- Use Gluestack UI components for consistency
- Apply Tailwind CSS classes for styling
- Implement proper error handling
- Write meaningful commit messages

## 📋 Development Roadmap

### Phase 1: Authentication & Onboarding ✅
- [x] User authentication system
- [x] School onboarding flow
- [x] Teacher invitation system
- [x] Role-based access control

### Phase 2: Core Management Features (In Progress)
- [ ] Student management system
- [ ] Teacher dashboard
- [ ] Class scheduling
- [ ] Academic calendar

### Phase 3: Advanced Features (Planned)
- [ ] Attendance tracking
- [ ] Grade management
- [ ] Parent communication
- [ ] Reporting and analytics

### Phase 4: Mobile Optimization (Planned)
- [ ] Offline functionality
- [ ] Push notifications
- [ ] Mobile-specific UI improvements
- [ ] Performance optimization

## 📞 Support

For technical support or questions about SchoolSync V2, please contact the development team.

## 🙏 Acknowledgments

- [Expo](https://expo.dev/) for the amazing development platform
- [Supabase](https://supabase.com/) for the backend infrastructure
- [Gluestack UI](https://ui.gluestack.io/) for the component library
- [Tailwind CSS](https://tailwindcss.com/) for the styling framework

---

**Built with ❤️ for Indonesian educational institutions**
</file>

<file path="tailwind.config.js">
import gluestackPlugin from '@gluestack-ui/nativewind-utils/tailwind-plugin';

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: process.env.DARK_MODE ? process.env.DARK_MODE : 'media',
  content: [
    './app/**/*.{html,js,jsx,ts,tsx}',
    './components/**/*.{html,js,jsx,ts,tsx,mdx}',
    './store/**/*.{html,js,jsx,ts,tsx,mdx}',
    './utils/**/*.{html,js,jsx,ts,tsx,mdx}',
  ],
  presets: [require('nativewind/preset')],
  safelist: [
    {
      pattern:
        /(bg|border|text|stroke|fill)-(primary|secondary|tertiary|error|success|warning|info|typography|outline|background|indicator)-(0|50|100|200|300|400|500|600|700|800|900|950|white|gray|black|error|warning|muted|success|info|light|dark|primary)/,
    },
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          0: 'rgb(var(--color-primary-0)/<alpha-value>)',
          50: 'rgb(var(--color-primary-50)/<alpha-value>)',
          100: 'rgb(var(--color-primary-100)/<alpha-value>)',
          200: 'rgb(var(--color-primary-200)/<alpha-value>)',
          300: 'rgb(var(--color-primary-300)/<alpha-value>)',
          400: 'rgb(var(--color-primary-400)/<alpha-value>)',
          500: 'rgb(var(--color-primary-500)/<alpha-value>)',
          600: 'rgb(var(--color-primary-600)/<alpha-value>)',
          700: 'rgb(var(--color-primary-700)/<alpha-value>)',
          800: 'rgb(var(--color-primary-800)/<alpha-value>)',
          900: 'rgb(var(--color-primary-900)/<alpha-value>)',
          950: 'rgb(var(--color-primary-950)/<alpha-value>)',
        },
        secondary: {
          0: 'rgb(var(--color-secondary-0)/<alpha-value>)',
          50: 'rgb(var(--color-secondary-50)/<alpha-value>)',
          100: 'rgb(var(--color-secondary-100)/<alpha-value>)',
          200: 'rgb(var(--color-secondary-200)/<alpha-value>)',
          300: 'rgb(var(--color-secondary-300)/<alpha-value>)',
          400: 'rgb(var(--color-secondary-400)/<alpha-value>)',
          500: 'rgb(var(--color-secondary-500)/<alpha-value>)',
          600: 'rgb(var(--color-secondary-600)/<alpha-value>)',
          700: 'rgb(var(--color-secondary-700)/<alpha-value>)',
          800: 'rgb(var(--color-secondary-800)/<alpha-value>)',
          900: 'rgb(var(--color-secondary-900)/<alpha-value>)',
          950: 'rgb(var(--color-secondary-950)/<alpha-value>)',
        },
        tertiary: {
          50: 'rgb(var(--color-tertiary-50)/<alpha-value>)',
          100: 'rgb(var(--color-tertiary-100)/<alpha-value>)',
          200: 'rgb(var(--color-tertiary-200)/<alpha-value>)',
          300: 'rgb(var(--color-tertiary-300)/<alpha-value>)',
          400: 'rgb(var(--color-tertiary-400)/<alpha-value>)',
          500: 'rgb(var(--color-tertiary-500)/<alpha-value>)',
          600: 'rgb(var(--color-tertiary-600)/<alpha-value>)',
          700: 'rgb(var(--color-tertiary-700)/<alpha-value>)',
          800: 'rgb(var(--color-tertiary-800)/<alpha-value>)',
          900: 'rgb(var(--color-tertiary-900)/<alpha-value>)',
          950: 'rgb(var(--color-tertiary-950)/<alpha-value>)',
        },
        error: {
          0: 'rgb(var(--color-error-0)/<alpha-value>)',
          50: 'rgb(var(--color-error-50)/<alpha-value>)',
          100: 'rgb(var(--color-error-100)/<alpha-value>)',
          200: 'rgb(var(--color-error-200)/<alpha-value>)',
          300: 'rgb(var(--color-error-300)/<alpha-value>)',
          400: 'rgb(var(--color-error-400)/<alpha-value>)',
          500: 'rgb(var(--color-error-500)/<alpha-value>)',
          600: 'rgb(var(--color-error-600)/<alpha-value>)',
          700: 'rgb(var(--color-error-700)/<alpha-value>)',
          800: 'rgb(var(--color-error-800)/<alpha-value>)',
          900: 'rgb(var(--color-error-900)/<alpha-value>)',
          950: 'rgb(var(--color-error-950)/<alpha-value>)',
        },
        success: {
          0: 'rgb(var(--color-success-0)/<alpha-value>)',
          50: 'rgb(var(--color-success-50)/<alpha-value>)',
          100: 'rgb(var(--color-success-100)/<alpha-value>)',
          200: 'rgb(var(--color-success-200)/<alpha-value>)',
          300: 'rgb(var(--color-success-300)/<alpha-value>)',
          400: 'rgb(var(--color-success-400)/<alpha-value>)',
          500: 'rgb(var(--color-success-500)/<alpha-value>)',
          600: 'rgb(var(--color-success-600)/<alpha-value>)',
          700: 'rgb(var(--color-success-700)/<alpha-value>)',
          800: 'rgb(var(--color-success-800)/<alpha-value>)',
          900: 'rgb(var(--color-success-900)/<alpha-value>)',
          950: 'rgb(var(--color-success-950)/<alpha-value>)',
        },
        warning: {
          0: 'rgb(var(--color-warning-0)/<alpha-value>)',
          50: 'rgb(var(--color-warning-50)/<alpha-value>)',
          100: 'rgb(var(--color-warning-100)/<alpha-value>)',
          200: 'rgb(var(--color-warning-200)/<alpha-value>)',
          300: 'rgb(var(--color-warning-300)/<alpha-value>)',
          400: 'rgb(var(--color-warning-400)/<alpha-value>)',
          500: 'rgb(var(--color-warning-500)/<alpha-value>)',
          600: 'rgb(var(--color-warning-600)/<alpha-value>)',
          700: 'rgb(var(--color-warning-700)/<alpha-value>)',
          800: 'rgb(var(--color-warning-800)/<alpha-value>)',
          900: 'rgb(var(--color-warning-900)/<alpha-value>)',
          950: 'rgb(var(--color-warning-950)/<alpha-value>)',
        },
        info: {
          0: 'rgb(var(--color-info-0)/<alpha-value>)',
          50: 'rgb(var(--color-info-50)/<alpha-value>)',
          100: 'rgb(var(--color-info-100)/<alpha-value>)',
          200: 'rgb(var(--color-info-200)/<alpha-value>)',
          300: 'rgb(var(--color-info-300)/<alpha-value>)',
          400: 'rgb(var(--color-info-400)/<alpha-value>)',
          500: 'rgb(var(--color-info-500)/<alpha-value>)',
          600: 'rgb(var(--color-info-600)/<alpha-value>)',
          700: 'rgb(var(--color-info-700)/<alpha-value>)',
          800: 'rgb(var(--color-info-800)/<alpha-value>)',
          900: 'rgb(var(--color-info-900)/<alpha-value>)',
          950: 'rgb(var(--color-info-950)/<alpha-value>)',
        },
        typography: {
          0: 'rgb(var(--color-typography-0)/<alpha-value>)',
          50: 'rgb(var(--color-typography-50)/<alpha-value>)',
          100: 'rgb(var(--color-typography-100)/<alpha-value>)',
          200: 'rgb(var(--color-typography-200)/<alpha-value>)',
          300: 'rgb(var(--color-typography-300)/<alpha-value>)',
          400: 'rgb(var(--color-typography-400)/<alpha-value>)',
          500: 'rgb(var(--color-typography-500)/<alpha-value>)',
          600: 'rgb(var(--color-typography-600)/<alpha-value>)',
          700: 'rgb(var(--color-typography-700)/<alpha-value>)',
          800: 'rgb(var(--color-typography-800)/<alpha-value>)',
          900: 'rgb(var(--color-typography-900)/<alpha-value>)',
          950: 'rgb(var(--color-typography-950)/<alpha-value>)',
          white: '#FFFFFF',
          gray: '#D4D4D4',
          black: '#181718',
        },
        outline: {
          0: 'rgb(var(--color-outline-0)/<alpha-value>)',
          50: 'rgb(var(--color-outline-50)/<alpha-value>)',
          100: 'rgb(var(--color-outline-100)/<alpha-value>)',
          200: 'rgb(var(--color-outline-200)/<alpha-value>)',
          300: 'rgb(var(--color-outline-300)/<alpha-value>)',
          400: 'rgb(var(--color-outline-400)/<alpha-value>)',
          500: 'rgb(var(--color-outline-500)/<alpha-value>)',
          600: 'rgb(var(--color-outline-600)/<alpha-value>)',
          700: 'rgb(var(--color-outline-700)/<alpha-value>)',
          800: 'rgb(var(--color-outline-800)/<alpha-value>)',
          900: 'rgb(var(--color-outline-900)/<alpha-value>)',
          950: 'rgb(var(--color-outline-950)/<alpha-value>)',
        },
        background: {
          0: 'rgb(var(--color-background-0)/<alpha-value>)',
          50: 'rgb(var(--color-background-50)/<alpha-value>)',
          100: 'rgb(var(--color-background-100)/<alpha-value>)',
          200: 'rgb(var(--color-background-200)/<alpha-value>)',
          300: 'rgb(var(--color-background-300)/<alpha-value>)',
          400: 'rgb(var(--color-background-400)/<alpha-value>)',
          500: 'rgb(var(--color-background-500)/<alpha-value>)',
          600: 'rgb(var(--color-background-600)/<alpha-value>)',
          700: 'rgb(var(--color-background-700)/<alpha-value>)',
          800: 'rgb(var(--color-background-800)/<alpha-value>)',
          900: 'rgb(var(--color-background-900)/<alpha-value>)',
          950: 'rgb(var(--color-background-950)/<alpha-value>)',
          error: 'rgb(var(--color-background-error)/<alpha-value>)',
          warning: 'rgb(var(--color-background-warning)/<alpha-value>)',
          muted: 'rgb(var(--color-background-muted)/<alpha-value>)',
          success: 'rgb(var(--color-background-success)/<alpha-value>)',
          info: 'rgb(var(--color-background-info)/<alpha-value>)',
          light: '#FBFBFB',
          dark: '#181719',
        },
        indicator: {
          primary: 'rgb(var(--color-indicator-primary)/<alpha-value>)',
          info: 'rgb(var(--color-indicator-info)/<alpha-value>)',
          error: 'rgb(var(--color-indicator-error)/<alpha-value>)',
        },
      },
      fontFamily: {
        heading: undefined,
        body: undefined,
        mono: undefined,
        roboto: ['Roboto', 'sans-serif'],
      },
      fontWeight: {
        extrablack: '950',
      },
      fontSize: {
        '2xs': '10px',
      },
      boxShadow: {
        'hard-1': '-2px 2px 8px 0px rgba(38, 38, 38, 0.20)',
        'hard-2': '0px 3px 10px 0px rgba(38, 38, 38, 0.20)',
        'hard-3': '2px 2px 8px 0px rgba(38, 38, 38, 0.20)',
        'hard-4': '0px -3px 10px 0px rgba(38, 38, 38, 0.20)',
        'hard-5': '0px 2px 10px 0px rgba(38, 38, 38, 0.10)',
        'soft-1': '0px 0px 10px rgba(38, 38, 38, 0.1)',
        'soft-2': '0px 0px 20px rgba(38, 38, 38, 0.2)',
        'soft-3': '0px 0px 30px rgba(38, 38, 38, 0.1)',
        'soft-4': '0px 0px 40px rgba(38, 38, 38, 0.1)',
      },
    },
  },
  plugins: [gluestackPlugin],
};
</file>

<file path="tsconfig.json">
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "~/*": [
        "*"
      ],
      "@/*": [
        "./*"
      ],
      "tailwind.config": [
        "./tailwind.config.js"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "nativewind-env.d.ts"
  ]
}
</file>

<file path=".gitignore">
node_modules/
.expo/
dist/
npm-debug.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
web-build/
# expo router
expo-env.d.ts

# firebase/supabase/vexo
.env

ios
android

# macOS
.DS_Store

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*

# Repomix files
.repomix/
repomix-output.txt.md

# Trae files
.trae/
</file>

<file path="app/_layout.tsx">
import '../global.css';
import React from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { Stack } from 'expo-router';
import { GluestackUIProvider } from '../components/ui/gluestack-ui-provider';

export const unstable_settings = {
  // Start with auth flow
  initialRouteName: 'auth/index',
};

export default function RootLayout() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <GluestackUIProvider mode="system">
        <Stack>
          <Stack.Screen name="auth" options={{ headerShown: false }} />
          <Stack.Screen name="dashboard" options={{ headerShown: true, title: 'Dashboard' }} />
          <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
          <Stack.Screen name="modal" options={{ title: 'Modal', presentation: 'modal' }} />
        </Stack>
      </GluestackUIProvider>
    </GestureHandlerRootView>
  );
}
</file>

<file path="docs/LESSONS_LEARNED.md">
# Lessons Learned - SchoolSync Development

*Last Updated: June 2, 2025*

This document tracks issues encountered during the SchoolSync mobile app development and their solutions for future reference.

## 📱 React Native & Expo Issues

### Issue #1: Metro Bundler - Node.js Module Import Error

**Date:** December 2024  
**Severity:** High  
**Platform:** Android Build

#### Problem Description
```
Android Bundling failed
The package at "node_modules\ws\lib\stream.js" attempted to import the Node standard library module "stream".
It failed because the native React runtime does not include the Node standard library.
```

#### Root Cause
- Supabase's `realtime-js` package dependency (`ws`) attempts to import Node.js standard library modules
- React Native doesn't include Node.js standard library modules
- This is a known compatibility issue between Expo and Supabase packages

#### Solution
Disable package exports configuration in Metro bundler:

```javascript
// metro.config.js
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

// Add this line to fix the issue
config.resolver.unstable_enablePackageExports = false;

module.exports = config;
```

#### References
- [Supabase Realtime Issue #415](https://github.com/supabase/realtime-js/issues/415)
- [Expo Metro Config Documentation](https://docs.expo.dev/workflow/using-libraries/#using-third-party-libraries)

#### Prevention
- Always check package compatibility with React Native before adding dependencies
- Test builds on multiple platforms early in development
- Monitor Expo and Supabase compatibility updates

---

## 🔐 Authentication & Database

### Issue #2: Supabase Auth Schema and User Profiles

**Date:** June 2025  
**Severity:** Medium  
**Platform:** Database Architecture

#### Problem Description
Supabase stores authentication users in a separate `auth` schema, which is hidden by default in the dashboard. This can lead to confusion when implementing user profiles, as the auth users are not visible in the default public schema.

#### Solution
Implemented a proper user profile system with these components:

1. Created a `public.users` table that extends `auth.users` with profile fields:
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    -- Additional profile fields
    school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
    email VARCHAR(255) UNIQUE NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    role user_role NOT NULL,
    -- Other fields...
);
```

2. Added a database trigger to auto-create profiles when users sign up:
```sql
CREATE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email, full_name, role)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.email),
    COALESCE((NEW.raw_user_meta_data->>'role')::user_role, 'student'::user_role)
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
```

3. Updated client code to load user profiles after authentication:
```typescript
// In signUp function
if (data.user) {
  set({ user: data.user, session: data.session });
  await get().loadUserProfile(); // Load profile after signup
  return { success: true };
}
```

#### Best Practices
- Always create a separate profile table in the public schema linked to auth.users
- Use database triggers to automatically create/update profiles
- Implement proper RLS policies on the profile table
- Ensure client code loads profiles after authentication events

### Issue #3: Supabase RLS Policy Configuration

**Date:** December 2024  
**Severity:** Medium  
**Platform:** Database Security

#### Problem Description
Initial database setup without proper Row Level Security (RLS) policies could lead to data access issues.

#### Solution
Implemented comprehensive RLS policies for all tables:

```sql
-- Example: Schools table RLS policy
CREATE POLICY "Users can view their own school" ON schools
  FOR SELECT USING (
    id IN (
      SELECT school_id FROM users WHERE id = auth.uid()
    )
  );
```

#### Best Practices
- Always enable RLS on all tables containing sensitive data
- Test policies with different user roles
- Document policy logic for team understanding

### Issue #4: PGRST116 Error After User Registration

**Date:** June 2025  
**Severity:** High  
**Platform:** Authentication Flow

#### Problem Description
After implementing the Supabase Auth Database Integration, newly registered users encountered a `PGRST116` error ("JSON object requested, multiple (or no) rows returned") when attempting to load their profile immediately after registration. This occurred because the client-side `loadUserProfile` function was querying the profile before the database trigger (`on_auth_user_created`) had completed creating the new profile row, or due to RLS policy issues preventing the newly registered user from seeing their own profile.

#### Root Cause Analysis
- **Race Condition**: Timing issue between client-side profile loading and server-side trigger execution
- **RLS Policy Circular Dependencies**: Some RLS policies were creating circular dependencies by using helper functions that themselves query the users table
- **Role Hierarchy Mismatch**: The default role in the trigger function was set to 'student', but only management users should perform direct sign-up

#### Solution
1. **Enhanced Database Trigger**:
```sql
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  existing_user_count INTEGER;
  default_role TEXT := 'management'; -- Changed from 'student' to 'management'
  user_role_value TEXT;
  profile_id UUID;
BEGIN
  -- Get role from metadata or use default management role
  user_role_value := COALESCE(NEW.raw_user_meta_data->>'role', default_role);
  
  -- Insert the user profile
  INSERT INTO public.users (...) VALUES (...) RETURNING id INTO profile_id;
  
  -- Force the transaction to commit by performing a read operation
  PERFORM 1 FROM public.users WHERE id = profile_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

2. **Simplified RLS Policies**:
```sql
-- Drop helper functions that cause recursion
DROP FUNCTION IF EXISTS public.get_my_role();
DROP FUNCTION IF EXISTS public.get_my_school_id();

-- Create simple, non-recursive RLS policies
CREATE POLICY "Users can view own profile"
ON public.users
FOR SELECT
TO public
USING (id = auth.uid());
```

3. **Resilient Client-Side Profile Loading**:
```typescript
loadUserProfile: async () => {
  try {
    const { user } = get();
    if (!user) return;

    set({ loading: true });
    
    let fetchedProfile: UserProfile | null = null;
    let lastProfileError: any = null;
    const maxRetries = 5;
    const retryDelay = 1000; // 1 second delay between retries

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      console.log(`Profile load attempt ${attempt}/${maxRetries}...`);
      
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        // Only retry if it's the PGRST116 error (profile not found)
        if (error.code === 'PGRST116' && attempt < maxRetries) {
          await new Promise(resolve => setTimeout(resolve, retryDelay));
        } else {
          break;
        }
      } else {
        fetchedProfile = data;
        break;
      }
    }

    // Handle special case for new management users
    if (!fetchedProfile && user.user_metadata?.role === 'management') {
      console.log('New management user detected. Profile will be created by database trigger.');
    }
    
    // Continue with normal flow if profile was found
    if (fetchedProfile) {
      set({ profile: fetchedProfile });
      // Load additional data as needed...
    }

    set({ loading: false });
  } catch (error) {
    console.error('Unexpected error in loadUserProfile:', error);
    set({ loading: false });
  }
}
```

#### Best Practices
- **RLS Policy Design**: Avoid circular dependencies in RLS policies. Don't use helper functions that query the same table the policy is protecting.
- **Role-Based Registration**: Understand your application's user hierarchy model. In our case, only management users should perform direct sign-up.
- **Client-Side Resilience**: Implement robust retry mechanisms for operations that may be affected by database triggers or RLS policies.
- **Comprehensive Logging**: Add detailed logging throughout authentication flows to help diagnose issues in production.
- **Transaction Management**: Be aware of how PostgreSQL handles transactions in triggers and ensure data is committed before client queries.

---

## 🎨 UI/UX Development

### Issue #4: TypeScript Interface Mismatches

**Date:** December 2024  
**Severity:** Low  
**Platform:** Development

#### Problem Description
Mismatched interfaces between onboarding components and data store caused TypeScript errors.

#### Solution
- Standardized interface definitions in central store
- Updated component props to match store interfaces
- Used consistent naming conventions across components

#### Prevention
- Define interfaces in a central location
- Use TypeScript strict mode
- Regular interface audits during development

---

## 📦 Package Management

### Issue #5: Dependency Version Conflicts

**Date:** December 2024  
**Severity:** Medium  
**Platform:** Development Environment

#### Problem Description
Potential conflicts between Expo SDK version and third-party packages.

#### Solution
- Use Expo-compatible versions of packages
- Check Expo documentation for recommended packages
- Test thoroughly after package updates

#### Best Practices
- Pin dependency versions in package.json
- Use `expo install` for Expo-compatible packages
- Regular dependency audits

---

## 🚀 Development Workflow

### Best Practices Learned

1. **Environment Setup**
   - Always use `.env` files for configuration
   - Never commit sensitive keys to repository
   - Use different environments for development/production

2. **Code Organization**
   - Separate concerns (auth, UI, business logic)
   - Use consistent file naming conventions
   - Implement proper TypeScript typing

3. **Testing Strategy**
   - Test on multiple platforms early
   - Use development builds for testing native features
   - Implement proper error handling and logging

4. **Database Design**
   - Plan schema carefully before implementation
   - Use proper foreign key relationships
   - Implement comprehensive RLS policies

---

## 🔄 Future Improvements

### Technical Debt
- [ ] Implement comprehensive error boundary components
- [ ] Add proper loading states for all async operations
- [ ] Implement offline data synchronization
- [ ] Add comprehensive unit and integration tests

### Performance Optimizations
- [ ] Implement lazy loading for large lists
- [ ] Optimize image loading and caching
- [ ] Add proper memoization for expensive computations

### Security Enhancements
- [ ] Implement proper input validation
- [ ] Add rate limiting for API calls
- [ ] Implement proper session management

---

## 📝 Notes for Team

- Always update this document when encountering new issues
- Include reproduction steps for complex issues
- Document workarounds for known limitations
- Share solutions with the team immediately

---

**Last Updated:** June 2025  
**Contributors:** Development Team
</file>

<file path="package.json">
{
  "name": "SchoolSyncV2",
  "version": "1.0.0",
  "main": "expo-router/entry",
  "scripts": {
    "android": "DARK_MODE=media expo start --android",
    "ios": "DARK_MODE=media expo start --ios",
    "start": "expo start",
    "prebuild": "expo prebuild",
    "lint": "eslint \"**/*.{js,jsx,ts,tsx}\" && prettier -c \"**/*.{js,jsx,ts,tsx,json}\"",
    "format": "eslint \"**/*.{js,jsx,ts,tsx}\" --fix && prettier \"**/*.{js,jsx,ts,tsx,json}\" --write",
    "web": "DARK_MODE=media expo start --web"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.0",
    "@gluestack-ui/button": "^1.0.14",
    "@gluestack-ui/icon": "^0.1.27",
    "@gluestack-ui/input": "^0.1.38",
    "@gluestack-ui/nativewind-utils": "^1.0.26",
    "@gluestack-ui/overlay": "^0.1.22",
    "@gluestack-ui/toast": "^1.0.9",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-navigation/bottom-tabs": "^7.0.5",
    "@react-navigation/drawer": "^7.0.0",
    "@react-navigation/native": "^7.0.3",
    "@supabase/supabase-js": "^2.49.8",
    "babel-plugin-module-resolver": "^5.0.2",
    "expo": "^53.0.9",
    "expo-constants": "~17.1.4",
    "expo-linking": "~7.1.4",
    "expo-router": "~5.0.3",
    "expo-status-bar": "~2.2.3",
    "expo-system-ui": "~5.0.6",
    "expo-web-browser": "~14.1.6",
    "nativewind": "^4.1.23",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.2",
    "react-native-css-interop": "^0.1.22",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "^5.4.1",
    "react-native-screens": "~4.10.0",
    "react-native-svg": "15.11.2",
    "react-native-web": "^0.20.0",
    "zustand": "^4.5.1",
    "expo-linear-gradient": "~14.1.4",
    "expo-blur": "~14.1.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@react-native-community/cli": "^18.0.0",
    "@types/react": "~19.0.10",
    "ajv": "^8.12.0",
    "eslint": "^9.25.1",
    "eslint-config-expo": "^9.2.0",
    "eslint-config-prettier": "^10.1.2",
    "jscodeshift": "^0.15.2",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3"
  },
  "private": true
}
</file>

<file path="components/auth/LoginScreen.tsx">
import React, { useState } from 'react';
import {
  View,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Text,
  TouchableOpacity,
  TextInput,
  StyleSheet,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuthStore } from '../../store/authStore';
import { router } from 'expo-router';

interface LoginScreenProps {
  onNavigateToSignUp?: () => void;
  onNavigateToForgotPassword?: () => void;
}

export default function LoginScreen({ 
  onNavigateToSignUp, 
  onNavigateToForgotPassword 
}: LoginScreenProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  
  const { signIn, loading, error, clearError } = useAuthStore();

  const handleLogin = async () => {
    if (!email.trim() || !password.trim()) {
      Alert.alert('Error', 'Mohon isi email dan password');
      return;
    }

    const result = await signIn(email.trim().toLowerCase(), password);
    
    if (result.success) {
      // Navigation will be handled by auth state change
      router.replace('/dashboard');
    } else {
      Alert.alert('Login Gagal', result.error || 'Terjadi kesalahan saat login');
    }
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const isFormValid = email.trim() && password.trim() && validateEmail(email);

  React.useEffect(() => {
    if (error) {
      Alert.alert('Error', error);
      clearError();
    }
  }, [error, clearError]);

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView 
          contentContainerStyle={styles.scrollView}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>
              Masuk ke Akun Anda
            </Text>
            <Text style={styles.subtitle}>
              Silakan masuk untuk melanjutkan ke SchoolSync
            </Text>
          </View>

          {/* Form Fields */}
          <View style={styles.form}>
                {/* Email Input */}
                <View style={styles.inputContainer}>
                  <Text style={styles.label}>
                    Email *
                  </Text>
                  <TextInput
                    style={[
                      styles.input,
                      email && !validateEmail(email) && styles.inputError
                    ]}
                    placeholder="Masukkan email Anda"
                    value={email}
                    onChangeText={setEmail}
                    keyboardType="email-address"
                    autoCapitalize="none"
                    autoCorrect={false}
                    editable={!loading}
                  />
                  {email && !validateEmail(email) && (
                    <Text style={styles.errorText}>Format email tidak valid</Text>
                  )}
                </View>

                {/* Password Input */}
                <View style={styles.inputContainer}>
                  <Text style={styles.label}>
                    Password *
                  </Text>
                  <View style={styles.passwordContainer}>
                    <TextInput
                      style={styles.passwordInput}
                      placeholder="Masukkan password Anda"
                      value={password}
                      onChangeText={setPassword}
                      secureTextEntry={!showPassword}
                      autoCapitalize="none"
                      autoCorrect={false}
                      editable={!loading}
                    />
                    <TouchableOpacity 
                      onPress={() => setShowPassword(!showPassword)}
                      style={styles.passwordToggle}
                    >
                      <Text style={styles.passwordToggleText}>
                        {showPassword ? '👁️' : '👁️‍🗨️'}
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>

                {/* Remember Me and Forgot Password */}
                <View style={styles.optionsRow}>
                  <TouchableOpacity 
                    onPress={() => setRememberMe(!rememberMe)}
                    style={styles.rememberMeContainer}
                  >
                    <View style={[
                      styles.checkbox,
                      rememberMe && styles.checkboxChecked
                    ]}>
                      {rememberMe && (
                        <Text style={styles.checkboxText}>✓</Text>
                      )}
                    </View>
                    <Text style={styles.rememberMeText}>
                      Ingat saya
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity onPress={onNavigateToForgotPassword}>
                    <Text style={styles.forgotPasswordText}>
                      Lupa Password?
                    </Text>
                  </TouchableOpacity>
                </View>
          </View>

          {/* Error Message */}
          {error && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorMessage}>{error}</Text>
            </View>
          )}

          {/* Login Button */}
          <TouchableOpacity
            style={[
              styles.loginButton,
              (!isFormValid || loading) && styles.loginButtonDisabled
            ]}
            onPress={handleLogin}
            disabled={!isFormValid || loading}
          >
            <Text style={[
              styles.loginButtonText,
              (!isFormValid || loading) && styles.loginButtonTextDisabled
            ]}>
              {loading ? 'Masuk...' : 'Masuk'}
            </Text>
          </TouchableOpacity>

          {/* Divider */}
          <View style={styles.divider}>
            <View style={styles.dividerLine} />
            <Text style={styles.dividerText}>atau masuk dengan</Text>
            <View style={styles.dividerLine} />
          </View>

          {/* Social Login Buttons */}
          <View style={styles.socialContainer}>
            <TouchableOpacity style={styles.socialButton}>
              <Text style={styles.socialButtonText}>G</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.socialButton}>
              <Text style={styles.socialButtonText}>🍎</Text>
            </TouchableOpacity>
          </View>

          {/* Sign Up Link */}
          <View style={styles.signUpContainer}>
            <Text style={styles.signUpText}>
              Belum punya akun?
            </Text>
            <TouchableOpacity onPress={onNavigateToSignUp}>
              <Text style={styles.signUpLink}>
                Daftar
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  keyboardView: {
    flex: 1,
  },
  scrollView: {
    flexGrow: 1,
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  header: {
    marginBottom: 32,
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#1F2937',
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 24,
  },
  form: {
    marginBottom: 24,
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#1F2937',
    backgroundColor: '#FFFFFF',
  },
  inputError: {
    borderColor: '#EF4444',
  },
  errorText: {
    fontSize: 12,
    color: '#EF4444',
    marginTop: 4,
  },
  passwordContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
  },
  passwordInput: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#1F2937',
  },
  passwordToggle: {
    paddingHorizontal: 12,
    paddingVertical: 12,
  },
  passwordToggleText: {
    fontSize: 16,
  },
  optionsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 24,
  },
  rememberMeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  checkbox: {
    width: 16,
    height: 16,
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 3,
    marginRight: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkboxChecked: {
    backgroundColor: '#3B82F6',
    borderColor: '#3B82F6',
  },
  checkboxText: {
    color: '#FFFFFF',
    fontSize: 10,
  },
  rememberMeText: {
    fontSize: 14,
    color: '#374151',
  },
  forgotPasswordText: {
    fontSize: 14,
    color: '#3B82F6',
    fontWeight: '500',
  },
  errorContainer: {
    backgroundColor: '#FEF2F2',
    borderWidth: 1,
    borderColor: '#FECACA',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
  },
  errorMessage: {
    fontSize: 14,
    color: '#DC2626',
  },
  loginButton: {
    backgroundColor: '#3B82F6',
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 24,
  },
  loginButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  loginButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  loginButtonTextDisabled: {
    color: '#D1D5DB',
  },
  divider: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 24,
  },
  dividerLine: {
    flex: 1,
    height: 1,
    backgroundColor: '#E5E7EB',
  },
  dividerText: {
    marginHorizontal: 16,
    fontSize: 14,
    color: '#6B7280',
  },
  socialContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 16,
    marginBottom: 32,
  },
  socialButton: {
    width: 48,
    height: 48,
    borderRadius: 8,
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#E5E7EB',
    alignItems: 'center',
    justifyContent: 'center',
  },
  socialButtonText: {
    fontSize: 18,
  },
  signUpContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 'auto',
  },
  signUpText: {
    fontSize: 16,
    color: '#6B7280',
    marginRight: 8,
  },
  signUpLink: {
    fontSize: 16,
    color: '#3B82F6',
    fontWeight: '600',
  },
});
</file>

<file path="store/authStore.ts">
import { create } from 'zustand';
import { supabase } from '../utils/supabase';
import { User, Session } from '@supabase/supabase-js';

export type UserRole = 'management' | 'teacher' | 'student' | 'parent';

export interface School {
  id: string;
  name: string;
  address?: string;
  city?: string;
  province?: string;
  license_number?: string;
  created_at: string;
}

export interface UserProfile {
  id: string;
  email: string;
  full_name: string;
  phone?: string;
  role: UserRole;
  school_id?: string;
  created_at: string;
  updated_at: string;
}

export interface Subscription {
  id: string;
  school_id: string;
  plan: 'starter' | 'growing' | 'enterprise';
  status: 'trial' | 'active' | 'cancelled' | 'expired';
  trial_ends_at?: string;
  current_period_start: string;
  current_period_end: string;
  student_limit: number;
}

export interface AuthState {
  // Auth state
  user: User | null;
  session: Session | null;
  profile: UserProfile | null;
  school: School | null;
  subscription: Subscription | null;
  loading: boolean;
  error: string | null;
  
  // Auth actions
  signIn: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  signUp: (email: string, password: string, userData: Partial<UserProfile>) => Promise<{ success: boolean; error?: string }>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<{ success: boolean; error?: string }>;
  
  // Profile actions
  updateProfile: (updates: Partial<UserProfile>) => Promise<{ success: boolean; error?: string }>;
  loadUserProfile: () => Promise<void>;
  
  // School actions
  createSchool: (schoolData: Omit<School, 'id' | 'created_at'>) => Promise<{ success: boolean; schoolId?: string; error?: string }>;
  updateSchool: (updates: Partial<School>) => Promise<{ success: boolean; error?: string }>;
  
  // Subscription actions
  loadSubscription: () => Promise<void>;
  
  // Utility actions
  initialize: () => Promise<void>;
  clearError: () => void;
  setLoading: (loading: boolean) => void;
}

export const useAuthStore = create<AuthState>((set, get) => ({
  // Initial state
  user: null,
  session: null,
  profile: null,
  school: null,
  subscription: null,
  loading: false,
  error: null,

  // Auth actions
  signIn: async (email: string, password: string) => {
    try {
      set({ loading: true, error: null });
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      if (data.user && data.session) {
        set({ user: data.user, session: data.session });
        await get().loadUserProfile();
        return { success: true };
      }

      return { success: false, error: 'Login failed' };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  signUp: async (email: string, password: string, userData: Partial<UserProfile>) => {
    try {
      set({ loading: true, error: null });
      
      // Check if email already exists before attempting to register
      const { data: existingUsers, error: checkError } = await supabase
        .from('users')
        .select('email')
        .eq('email', email)
        .limit(1);
      
      if (checkError) {
        console.error('Error checking existing email:', checkError);
      } else if (existingUsers && existingUsers.length > 0) {
        set({ error: 'Email already registered', loading: false });
        return { success: false, error: 'Email already registered' };
      }
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: userData.full_name,
            phone: userData.phone,
            role: userData.role || 'management',
          },
        },
      });

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      if (data.user) {
        set({ user: data.user, session: data.session });
        await get().loadUserProfile();
        return { success: true };
      }

      return { success: false, error: 'Registration failed' };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  signOut: async () => {
    try {
      set({ loading: true });
      await supabase.auth.signOut();
      set({ 
        user: null, 
        session: null, 
        profile: null, 
        school: null, 
        subscription: null,
        loading: false,
        error: null 
      });
    } catch (error) {
      console.error('Sign out error:', error);
      set({ loading: false });
    }
  },

  resetPassword: async (email: string) => {
    try {
      set({ loading: true, error: null });
      
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: 'schoolsync://reset-password',
      });

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      set({ loading: false });
      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  // Profile actions
  updateProfile: async (updates: Partial<UserProfile>) => {
    try {
      set({ loading: true, error: null });
      const { profile } = get();
      
      if (!profile) {
        set({ error: 'No profile found', loading: false });
        return { success: false, error: 'No profile found' };
      }

      const { data, error } = await supabase
        .from('users')
        .update({ ...updates, updated_at: new Date().toISOString() })
        .eq('id', profile.id)
        .select()
        .single();

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      set({ profile: data, loading: false });
      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  loadUserProfile: async () => {
    try {
      const { user } = get();
      if (!user) return;

      set({ loading: true });
      
      let fetchedProfile: UserProfile | null = null;
      let lastProfileError: any = null; // Can be PostgrestError or other
      const maxRetries = 5;
      const retryDelay = 1000; // 1 second delay between retries

      console.log('Starting profile load for user:', user.id);
      
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        console.log(`Profile load attempt ${attempt}/${maxRetries}...`);
        
        const { data, error } = await supabase
          .from('users')
          .select('*')
          .eq('id', user.id)
          .single();

        if (error) {
          console.log(`Profile load attempt ${attempt}/${maxRetries} failed:`, error);
          lastProfileError = error;
          
          // Only retry if it's the PGRST116 error (profile not found)
          if (error.code === 'PGRST116') {
            if (attempt < maxRetries) {
              console.log(`Waiting ${retryDelay}ms before retry...`);
              await new Promise(resolve => setTimeout(resolve, retryDelay));
            }
          } else {
            // For other errors, don't retry
            console.error('Non-PGRST116 error encountered, stopping retries:', error);
            break;
          }
        } else {
          console.log('Profile loaded successfully on attempt', attempt);
          fetchedProfile = data;
          break;
        }
      }

      if (!fetchedProfile) {
        console.error('Failed to load profile after all retries. Last error:', lastProfileError);
        
        // If we still can't load the profile after all retries, check if this is a new user
        // by examining the user metadata for role = 'management'
        if (user.user_metadata?.role === 'management' && lastProfileError?.code === 'PGRST116') {
          console.log('New management user detected. Profile will be created by database trigger.');
          // We'll let the user continue, as the profile should be created by the database trigger
          // and will be available on next app launch or refresh
        }
        
        set({ loading: false });
        return;
      }

      set({ profile: fetchedProfile });

      // Load school if user has school_id
      if (fetchedProfile.school_id) {
        console.log('Loading school data for school_id:', fetchedProfile.school_id);
        const { data: school, error: schoolError } = await supabase
          .from('schools')
          .select('*')
          .eq('id', fetchedProfile.school_id)
          .single();
        
        if (schoolError) {
          console.error('Error loading school data:', schoolError);
        } else if (school) {
          console.log('School data loaded successfully');
          set({ school });
          await get().loadSubscription();
        }
      } else {
        console.log('User has no school_id, skipping school data load');
      }

      set({ loading: false });
      console.log('Profile loading complete');
    } catch (error) {
      // Catch any other unexpected errors from the outer try block
      console.error('authStore: Unexpected error in loadUserProfile:', error);
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred during profile load';
      set({ error: errorMessage, loading: false });
    }
  },

  // School actions
  createSchool: async (schoolData: Omit<School, 'id' | 'created_at'>) => {
    try {
      set({ loading: true, error: null });
      
      const { data, error } = await supabase
        .from('schools')
        .insert([schoolData])
        .select()
        .single();

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      set({ school: data, loading: false });
      
      // Update user profile with school_id
      await get().updateProfile({ school_id: data.id });
      
      return { success: true, schoolId: data.id };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  updateSchool: async (updates: Partial<School>) => {
    try {
      set({ loading: true, error: null });
      const { school } = get();
      
      if (!school) {
        set({ error: 'No school found', loading: false });
        return { success: false, error: 'No school found' };
      }

      const { data, error } = await supabase
        .from('schools')
        .update(updates)
        .eq('id', school.id)
        .select()
        .single();

      if (error) {
        set({ error: error.message, loading: false });
        return { success: false, error: error.message };
      }

      set({ school: data, loading: false });
      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  // Subscription actions
  loadSubscription: async () => {
    try {
      const { school } = get();
      if (!school) return;

      const { data: subscription } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('school_id', school.id)
        .single();

      if (subscription) {
        set({ subscription });
      }
    } catch (error) {
      console.error('Load subscription error:', error);
    }
  },

  // Utility actions
  initialize: async () => {
    try {
      set({ loading: true });
      
      // Get current session
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session) {
        set({ session, user: session.user });
        await get().loadUserProfile();
      }
      
      // Listen for auth changes
      supabase.auth.onAuthStateChange(async (event, session) => {
        if (event === 'SIGNED_IN' && session) {
          set({ session, user: session.user });
          await get().loadUserProfile();
        } else if (event === 'SIGNED_OUT') {
          set({ 
            user: null, 
            session: null, 
            profile: null, 
            school: null, 
            subscription: null 
          });
        }
      });
      
      set({ loading: false });
    } catch (error) {
      console.error('Initialize error:', error);
      set({ loading: false });
    }
  },

  clearError: () => set({ error: null }),
  setLoading: (loading: boolean) => set({ loading }),
}));
</file>

</files>
